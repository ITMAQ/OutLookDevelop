// Created by Microsoft (R) C/C++ Compiler Version 14.16.27027.1 (47305c9e).
//
// d:\outlook_develope\calendar\mfccalendar\mfccalendar\debug\msoutl.tli
//
// Wrapper implementations for type library C:\\Program Files\\Microsoft Office\\Office16\\MSOUTL.OLB
// compiler-generated file created 05/06/19 at 09:25:31 - DO NOT EDIT!


//
// interface _IRecipientControl wrapper method implementations
//

#pragma implementation_key(1)
inline char _IRecipientControl::GetEnabled ( ) {
    char _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2)
inline void _IRecipientControl::PutEnabled ( char Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3)
inline long _IRecipientControl::GetBackColor ( ) {
    long _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4)
inline void _IRecipientControl::PutBackColor ( long BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5)
inline long _IRecipientControl::GetForeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline void _IRecipientControl::PutForeColor ( long ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7)
inline char _IRecipientControl::GetReadOnly ( ) {
    char _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline void _IRecipientControl::PutReadOnly ( char ReadOnly ) {
    HRESULT _hr = put_ReadOnly(ReadOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(9)
inline IDispatchPtr _IRecipientControl::GetFont ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(10)
inline void _IRecipientControl::PutFont ( IDispatch * Font ) {
    HRESULT _hr = put_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(11)
inline long _IRecipientControl::GetSpecialEffect ( ) {
    long _result = 0;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(12)
inline void _IRecipientControl::PutSpecialEffect ( long Effect ) {
    HRESULT _hr = put_SpecialEffect(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _DRecipientControl wrapper method implementations
//

#pragma implementation_key(13)
inline char _DRecipientControl::GetEnabled ( ) {
    char _result = 0;
    _com_dispatch_method(this, DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_UI1, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(14)
inline void _DRecipientControl::PutEnabled ( char _arg1 ) {
    _com_dispatch_method(this, DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0011", _arg1);
}

#pragma implementation_key(15)
inline long _DRecipientControl::GetBackColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(16)
inline void _DRecipientControl::PutBackColor ( long _arg1 ) {
    _com_dispatch_method(this, DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(17)
inline long _DRecipientControl::GetForeColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, DISPID_FORECOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(18)
inline void _DRecipientControl::PutForeColor ( long _arg1 ) {
    _com_dispatch_method(this, DISPID_FORECOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(19)
inline char _DRecipientControl::GetReadOnly ( ) {
    char _result = 0;
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYGET, VT_UI1, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(20)
inline void _DRecipientControl::PutReadOnly ( char _arg1 ) {
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0011", _arg1);
}

#pragma implementation_key(21)
inline IDispatchPtr _DRecipientControl::GetFont ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, DISPID_FONT, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(22)
inline void _DRecipientControl::PutFont ( IDispatch * _arg1 ) {
    _com_dispatch_method(this, DISPID_FONT, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(23)
inline long _DRecipientControl::GetSpecialEffect ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(24)
inline void _DRecipientControl::PutSpecialEffect ( long _arg1 ) {
    _com_dispatch_method(this, 0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// interface _IDocSiteControl wrapper method implementations
//

#pragma implementation_key(25)
inline char _IDocSiteControl::GetReadOnly ( ) {
    char _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline void _IDocSiteControl::PutReadOnly ( char ReadOnly ) {
    HRESULT _hr = put_ReadOnly(ReadOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(27)
inline char _IDocSiteControl::GetSuppressAttachments ( ) {
    char _result = 0;
    HRESULT _hr = get_SuppressAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline void _IDocSiteControl::PutSuppressAttachments ( char SuppressAttachments ) {
    HRESULT _hr = put_SuppressAttachments(SuppressAttachments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _DDocSiteControl wrapper method implementations
//

#pragma implementation_key(29)
inline char _DDocSiteControl::GetReadOnly ( ) {
    char _result = 0;
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYGET, VT_UI1, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(30)
inline void _DDocSiteControl::PutReadOnly ( char _arg1 ) {
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0011", _arg1);
}

#pragma implementation_key(31)
inline char _DDocSiteControl::GetSuppressAttachments ( ) {
    char _result = 0;
    _com_dispatch_method(this, 0xfbe3, DISPATCH_PROPERTYGET, VT_UI1, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(32)
inline void _DDocSiteControl::PutSuppressAttachments ( char _arg1 ) {
    _com_dispatch_method(this, 0xfbe3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0011", _arg1);
}

//
// interface OlkControl wrapper method implementations
//

#pragma implementation_key(33)
inline _bstr_t OlkControl::GetItemProperty ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ItemProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(34)
inline void OlkControl::PutItemProperty ( _bstr_t ItemProperty ) {
    HRESULT _hr = put_ItemProperty(ItemProperty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(35)
inline _bstr_t OlkControl::GetControlProperty ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(36)
inline void OlkControl::PutControlProperty ( _bstr_t ControlProperty ) {
    HRESULT _hr = put_ControlProperty(ControlProperty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(37)
inline _bstr_t OlkControl::GetPossibleValues ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PossibleValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(38)
inline void OlkControl::PutPossibleValues ( _bstr_t PossibleValues ) {
    HRESULT _hr = put_PossibleValues(PossibleValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(39)
inline long OlkControl::GetFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline void OlkControl::PutFormat ( long Format ) {
    HRESULT _hr = put_Format(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline VARIANT_BOOL OlkControl::GetEnableAutoLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline void OlkControl::PutEnableAutoLayout ( VARIANT_BOOL EnableAutoLayout ) {
    HRESULT _hr = put_EnableAutoLayout(EnableAutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(43)
inline long OlkControl::GetMinimumWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_MinimumWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline void OlkControl::PutMinimumWidth ( long MinimumWidth ) {
    HRESULT _hr = put_MinimumWidth(MinimumWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline long OlkControl::GetMinimumHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_MinimumHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void OlkControl::PutMinimumHeight ( long MinimumHeight ) {
    HRESULT _hr = put_MinimumHeight(MinimumHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline enum OlHorizontalLayout OlkControl::GetHorizontalLayout ( ) {
    enum OlHorizontalLayout _result;
    HRESULT _hr = get_HorizontalLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline void OlkControl::PutHorizontalLayout ( enum OlHorizontalLayout HorizontalLayout ) {
    HRESULT _hr = put_HorizontalLayout(HorizontalLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(49)
inline enum OlVerticalLayout OlkControl::GetVerticalLayout ( ) {
    enum OlVerticalLayout _result;
    HRESULT _hr = get_VerticalLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void OlkControl::PutVerticalLayout ( enum OlVerticalLayout VerticalLayout ) {
    HRESULT _hr = put_VerticalLayout(VerticalLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _OlkTextBox wrapper method implementations
//

#pragma implementation_key(51)
inline VARIANT_BOOL _OlkTextBox::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline void _OlkTextBox::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(53)
inline VARIANT_BOOL _OlkTextBox::GetAutoTab ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(54)
inline void _OlkTextBox::PutAutoTab ( VARIANT_BOOL AutoTab ) {
    HRESULT _hr = put_AutoTab(AutoTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline VARIANT_BOOL _OlkTextBox::GetAutoWordSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoWordSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline void _OlkTextBox::PutAutoWordSelect ( VARIANT_BOOL AutoWordSelect ) {
    HRESULT _hr = put_AutoWordSelect(AutoWordSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(57)
inline OLE_COLOR _OlkTextBox::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(58)
inline void _OlkTextBox::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(59)
inline enum OlBorderStyle _OlkTextBox::GetBorderStyle ( ) {
    enum OlBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void _OlkTextBox::PutBorderStyle ( enum OlBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline enum OlDragBehavior _OlkTextBox::GetDragBehavior ( ) {
    enum OlDragBehavior _result;
    HRESULT _hr = get_DragBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(62)
inline void _OlkTextBox::PutDragBehavior ( enum OlDragBehavior DragBehavior ) {
    HRESULT _hr = put_DragBehavior(DragBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline VARIANT_BOOL _OlkTextBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(64)
inline void _OlkTextBox::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline enum OlEnterFieldBehavior _OlkTextBox::GetEnterFieldBehavior ( ) {
    enum OlEnterFieldBehavior _result;
    HRESULT _hr = get_EnterFieldBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline void _OlkTextBox::PutEnterFieldBehavior ( enum OlEnterFieldBehavior EnterFieldBehavior ) {
    HRESULT _hr = put_EnterFieldBehavior(EnterFieldBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(67)
inline VARIANT_BOOL _OlkTextBox::GetEnterKeyBehavior ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnterKeyBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(68)
inline void _OlkTextBox::PutEnterKeyBehavior ( VARIANT_BOOL EnterKeyBehavior ) {
    HRESULT _hr = put_EnterKeyBehavior(EnterKeyBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline FontPtr _OlkTextBox::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(70)
inline OLE_COLOR _OlkTextBox::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline void _OlkTextBox::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline VARIANT_BOOL _OlkTextBox::GetHideSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline void _OlkTextBox::PutHideSelection ( VARIANT_BOOL HideSelection ) {
    HRESULT _hr = put_HideSelection(HideSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline VARIANT_BOOL _OlkTextBox::GetIntegralHeight ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IntegralHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void _OlkTextBox::PutIntegralHeight ( VARIANT_BOOL IntegralHeight ) {
    HRESULT _hr = put_IntegralHeight(IntegralHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline VARIANT_BOOL _OlkTextBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(77)
inline void _OlkTextBox::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline long _OlkTextBox::GetMaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void _OlkTextBox::PutMaxLength ( long MaxLength ) {
    HRESULT _hr = put_MaxLength(MaxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline PicturePtr _OlkTextBox::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(81)
inline void _OlkTextBox::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline enum OlMousePointer _OlkTextBox::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline void _OlkTextBox::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline VARIANT_BOOL _OlkTextBox::GetMultiLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline void _OlkTextBox::PutMultiLine ( VARIANT_BOOL MultiLine ) {
    HRESULT _hr = put_MultiLine(MultiLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline _bstr_t _OlkTextBox::GetPasswordChar ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordChar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(87)
inline void _OlkTextBox::PutPasswordChar ( _bstr_t PasswordChar ) {
    HRESULT _hr = put_PasswordChar(PasswordChar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(88)
inline enum OlScrollBars _OlkTextBox::GetScrollbars ( ) {
    enum OlScrollBars _result;
    HRESULT _hr = get_Scrollbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void _OlkTextBox::PutScrollbars ( enum OlScrollBars Scrollbars ) {
    HRESULT _hr = put_Scrollbars(Scrollbars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(90)
inline VARIANT_BOOL _OlkTextBox::GetSelectionMargin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SelectionMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(91)
inline void _OlkTextBox::PutSelectionMargin ( VARIANT_BOOL SelectionMargin ) {
    HRESULT _hr = put_SelectionMargin(SelectionMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(92)
inline VARIANT_BOOL _OlkTextBox::GetTabKeyBehavior ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TabKeyBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(93)
inline void _OlkTextBox::PutTabKeyBehavior ( VARIANT_BOOL TabKeyBehavior ) {
    HRESULT _hr = put_TabKeyBehavior(TabKeyBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(94)
inline _bstr_t _OlkTextBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(95)
inline void _OlkTextBox::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(96)
inline enum OlTextAlign _OlkTextBox::GetTextAlign ( ) {
    enum OlTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(97)
inline void _OlkTextBox::PutTextAlign ( enum OlTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(98)
inline _variant_t _OlkTextBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(99)
inline void _OlkTextBox::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline VARIANT_BOOL _OlkTextBox::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline void _OlkTextBox::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline long _OlkTextBox::GetSelStart ( ) {
    long _result = 0;
    HRESULT _hr = get_SelStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void _OlkTextBox::PutSelStart ( long SelStart ) {
    HRESULT _hr = put_SelStart(SelStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline long _OlkTextBox::GetSelLength ( ) {
    long _result = 0;
    HRESULT _hr = get_SelLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(105)
inline void _OlkTextBox::PutSelLength ( long SelLength ) {
    HRESULT _hr = put_SelLength(SelLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline _bstr_t _OlkTextBox::GetSelText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(107)
inline HRESULT _OlkTextBox::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(108)
inline HRESULT _OlkTextBox::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(109)
inline HRESULT _OlkTextBox::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(110)
inline HRESULT _OlkTextBox::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(111)
inline VARIANT_BOOL _OlkTextBox::GetEnableRichText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableRichText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(112)
inline void _OlkTextBox::PutEnableRichText ( VARIANT_BOOL EnableRichText ) {
    HRESULT _hr = put_EnableRichText(EnableRichText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkTextBoxEvents wrapper method implementations
//

#pragma implementation_key(113)
inline HRESULT OlkTextBoxEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(114)
inline HRESULT OlkTextBoxEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(115)
inline HRESULT OlkTextBoxEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(116)
inline HRESULT OlkTextBoxEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(117)
inline HRESULT OlkTextBoxEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(118)
inline HRESULT OlkTextBoxEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(119)
inline HRESULT OlkTextBoxEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(120)
inline HRESULT OlkTextBoxEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(121)
inline HRESULT OlkTextBoxEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(122)
inline HRESULT OlkTextBoxEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(123)
inline HRESULT OlkTextBoxEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(124)
inline HRESULT OlkTextBoxEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(125)
inline HRESULT OlkTextBoxEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkLabel wrapper method implementations
//

#pragma implementation_key(126)
inline _bstr_t _OlkLabel::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(127)
inline void _OlkLabel::PutAccelerator ( _bstr_t AcceleratorChar ) {
    HRESULT _hr = put_Accelerator(AcceleratorChar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline VARIANT_BOOL _OlkLabel::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void _OlkLabel::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline OLE_COLOR _OlkLabel::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline void _OlkLabel::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(132)
inline enum OlBackStyle _OlkLabel::GetBackStyle ( ) {
    enum OlBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline void _OlkLabel::PutBackStyle ( enum OlBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(134)
inline enum OlBorderStyle _OlkLabel::GetBorderStyle ( ) {
    enum OlBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline void _OlkLabel::PutBorderStyle ( enum OlBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline _bstr_t _OlkLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(137)
inline void _OlkLabel::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline VARIANT_BOOL _OlkLabel::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline void _OlkLabel::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(140)
inline FontPtr _OlkLabel::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(141)
inline OLE_COLOR _OlkLabel::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline void _OlkLabel::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline PicturePtr _OlkLabel::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(144)
inline void _OlkLabel::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline enum OlMousePointer _OlkLabel::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline void _OlkLabel::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(147)
inline enum OlTextAlign _OlkLabel::GetTextAlign ( ) {
    enum OlTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline void _OlkLabel::PutTextAlign ( enum OlTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(149)
inline VARIANT_BOOL _OlkLabel::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void _OlkLabel::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline _variant_t _OlkLabel::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(152)
inline void _OlkLabel::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(153)
inline VARIANT_BOOL _OlkLabel::GetUseHeaderColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseHeaderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline void _OlkLabel::PutUseHeaderColor ( VARIANT_BOOL UseHeaderColor ) {
    HRESULT _hr = put_UseHeaderColor(UseHeaderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkLabelEvents wrapper method implementations
//

#pragma implementation_key(155)
inline HRESULT OlkLabelEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(156)
inline HRESULT OlkLabelEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(157)
inline HRESULT OlkLabelEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(158)
inline HRESULT OlkLabelEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(159)
inline HRESULT OlkLabelEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

//
// interface _OlkCommandButton wrapper method implementations
//

#pragma implementation_key(160)
inline _bstr_t _OlkCommandButton::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(161)
inline void _OlkCommandButton::PutAccelerator ( _bstr_t AcceleratorChar ) {
    HRESULT _hr = put_Accelerator(AcceleratorChar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline VARIANT_BOOL _OlkCommandButton::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void _OlkCommandButton::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline _bstr_t _OlkCommandButton::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(165)
inline void _OlkCommandButton::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline VARIANT_BOOL _OlkCommandButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void _OlkCommandButton::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline FontPtr _OlkCommandButton::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(169)
inline PicturePtr _OlkCommandButton::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(170)
inline void _OlkCommandButton::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(171)
inline enum OlMousePointer _OlkCommandButton::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline void _OlkCommandButton::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(173)
inline VARIANT_BOOL _OlkCommandButton::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(174)
inline void _OlkCommandButton::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(175)
inline enum OlTextAlign _OlkCommandButton::GetTextAlign ( ) {
    enum OlTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(176)
inline void _OlkCommandButton::PutTextAlign ( enum OlTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(177)
inline PicturePtr _OlkCommandButton::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(178)
inline void _OlkCommandButton::PutPicture ( struct Picture * Picture ) {
    HRESULT _hr = put_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(179)
inline enum OlPictureAlignment _OlkCommandButton::GetPictureAlignment ( ) {
    enum OlPictureAlignment _result;
    HRESULT _hr = get_PictureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline void _OlkCommandButton::PutPictureAlignment ( enum OlPictureAlignment PictureAlignment ) {
    HRESULT _hr = put_PictureAlignment(PictureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(181)
inline VARIANT_BOOL _OlkCommandButton::GetDisplayDropArrow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayDropArrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(182)
inline void _OlkCommandButton::PutDisplayDropArrow ( VARIANT_BOOL DisplayDropArrow ) {
    HRESULT _hr = put_DisplayDropArrow(DisplayDropArrow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkCommandButtonEvents wrapper method implementations
//

#pragma implementation_key(183)
inline HRESULT OlkCommandButtonEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(184)
inline HRESULT OlkCommandButtonEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(185)
inline HRESULT OlkCommandButtonEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(186)
inline HRESULT OlkCommandButtonEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(187)
inline HRESULT OlkCommandButtonEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(188)
inline HRESULT OlkCommandButtonEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(189)
inline HRESULT OlkCommandButtonEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(190)
inline HRESULT OlkCommandButtonEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(191)
inline HRESULT OlkCommandButtonEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(192)
inline HRESULT OlkCommandButtonEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(193)
inline HRESULT OlkCommandButtonEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(194)
inline HRESULT OlkCommandButtonEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkCheckBox wrapper method implementations
//

#pragma implementation_key(195)
inline _bstr_t _OlkCheckBox::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(196)
inline void _OlkCheckBox::PutAccelerator ( _bstr_t AcceleratorChar ) {
    HRESULT _hr = put_Accelerator(AcceleratorChar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(197)
inline enum OlAlignment _OlkCheckBox::GetAlignment ( ) {
    enum OlAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(198)
inline void _OlkCheckBox::PutAlignment ( enum OlAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(199)
inline OLE_COLOR _OlkCheckBox::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline void _OlkCheckBox::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(201)
inline enum OlBackStyle _OlkCheckBox::GetBackStyle ( ) {
    enum OlBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline void _OlkCheckBox::PutBackStyle ( enum OlBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(203)
inline _bstr_t _OlkCheckBox::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(204)
inline void _OlkCheckBox::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(205)
inline VARIANT_BOOL _OlkCheckBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline void _OlkCheckBox::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(207)
inline FontPtr _OlkCheckBox::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(208)
inline OLE_COLOR _OlkCheckBox::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline void _OlkCheckBox::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(210)
inline PicturePtr _OlkCheckBox::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(211)
inline void _OlkCheckBox::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(212)
inline enum OlMousePointer _OlkCheckBox::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline void _OlkCheckBox::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline VARIANT_BOOL _OlkCheckBox::GetTripleState ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TripleState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline void _OlkCheckBox::PutTripleState ( VARIANT_BOOL TripleState ) {
    HRESULT _hr = put_TripleState(TripleState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(216)
inline _variant_t _OlkCheckBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(217)
inline void _OlkCheckBox::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(218)
inline VARIANT_BOOL _OlkCheckBox::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline void _OlkCheckBox::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkCheckBoxEvents wrapper method implementations
//

#pragma implementation_key(220)
inline HRESULT OlkCheckBoxEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(221)
inline HRESULT OlkCheckBoxEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(222)
inline HRESULT OlkCheckBoxEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(223)
inline HRESULT OlkCheckBoxEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(224)
inline HRESULT OlkCheckBoxEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(225)
inline HRESULT OlkCheckBoxEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(226)
inline HRESULT OlkCheckBoxEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(227)
inline HRESULT OlkCheckBoxEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(228)
inline HRESULT OlkCheckBoxEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(229)
inline HRESULT OlkCheckBoxEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(230)
inline HRESULT OlkCheckBoxEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(231)
inline HRESULT OlkCheckBoxEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(232)
inline HRESULT OlkCheckBoxEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkOptionButton wrapper method implementations
//

#pragma implementation_key(233)
inline _bstr_t _OlkOptionButton::GetAccelerator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Accelerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(234)
inline void _OlkOptionButton::PutAccelerator ( _bstr_t AcceleratorChar ) {
    HRESULT _hr = put_Accelerator(AcceleratorChar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(235)
inline enum OlAlignment _OlkOptionButton::GetAlignment ( ) {
    enum OlAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(236)
inline void _OlkOptionButton::PutAlignment ( enum OlAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(237)
inline OLE_COLOR _OlkOptionButton::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline void _OlkOptionButton::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline enum OlBackStyle _OlkOptionButton::GetBackStyle ( ) {
    enum OlBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline void _OlkOptionButton::PutBackStyle ( enum OlBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(241)
inline _bstr_t _OlkOptionButton::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(242)
inline void _OlkOptionButton::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(243)
inline VARIANT_BOOL _OlkOptionButton::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline void _OlkOptionButton::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(245)
inline FontPtr _OlkOptionButton::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(246)
inline OLE_COLOR _OlkOptionButton::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline void _OlkOptionButton::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline _bstr_t _OlkOptionButton::GetGroupName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(249)
inline void _OlkOptionButton::PutGroupName ( _bstr_t GroupName ) {
    HRESULT _hr = put_GroupName(GroupName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline PicturePtr _OlkOptionButton::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(251)
inline void _OlkOptionButton::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline enum OlMousePointer _OlkOptionButton::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void _OlkOptionButton::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline _variant_t _OlkOptionButton::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(255)
inline void _OlkOptionButton::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline VARIANT_BOOL _OlkOptionButton::GetWordWrap ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void _OlkOptionButton::PutWordWrap ( VARIANT_BOOL WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkOptionButtonEvents wrapper method implementations
//

#pragma implementation_key(258)
inline HRESULT OlkOptionButtonEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(259)
inline HRESULT OlkOptionButtonEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(260)
inline HRESULT OlkOptionButtonEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(261)
inline HRESULT OlkOptionButtonEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(262)
inline HRESULT OlkOptionButtonEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(263)
inline HRESULT OlkOptionButtonEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(264)
inline HRESULT OlkOptionButtonEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(265)
inline HRESULT OlkOptionButtonEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(266)
inline HRESULT OlkOptionButtonEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(267)
inline HRESULT OlkOptionButtonEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(268)
inline HRESULT OlkOptionButtonEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(269)
inline HRESULT OlkOptionButtonEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(270)
inline HRESULT OlkOptionButtonEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkComboBox wrapper method implementations
//

#pragma implementation_key(271)
inline VARIANT_BOOL _OlkComboBox::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline void _OlkComboBox::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline VARIANT_BOOL _OlkComboBox::GetAutoTab ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline void _OlkComboBox::PutAutoTab ( VARIANT_BOOL AutoTab ) {
    HRESULT _hr = put_AutoTab(AutoTab);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline VARIANT_BOOL _OlkComboBox::GetAutoWordSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoWordSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void _OlkComboBox::PutAutoWordSelect ( VARIANT_BOOL AutoWordSelect ) {
    HRESULT _hr = put_AutoWordSelect(AutoWordSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline OLE_COLOR _OlkComboBox::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline void _OlkComboBox::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(279)
inline enum OlBorderStyle _OlkComboBox::GetBorderStyle ( ) {
    enum OlBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(280)
inline void _OlkComboBox::PutBorderStyle ( enum OlBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(281)
inline enum OlDragBehavior _OlkComboBox::GetDragBehavior ( ) {
    enum OlDragBehavior _result;
    HRESULT _hr = get_DragBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(282)
inline void _OlkComboBox::PutDragBehavior ( enum OlDragBehavior DragBehavior ) {
    HRESULT _hr = put_DragBehavior(DragBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline VARIANT_BOOL _OlkComboBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline void _OlkComboBox::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline enum OlEnterFieldBehavior _OlkComboBox::GetEnterFieldBehavior ( ) {
    enum OlEnterFieldBehavior _result;
    HRESULT _hr = get_EnterFieldBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline void _OlkComboBox::PutEnterFieldBehavior ( enum OlEnterFieldBehavior EnterFieldBehavior ) {
    HRESULT _hr = put_EnterFieldBehavior(EnterFieldBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline FontPtr _OlkComboBox::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(288)
inline OLE_COLOR _OlkComboBox::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline void _OlkComboBox::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline VARIANT_BOOL _OlkComboBox::GetHideSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline void _OlkComboBox::PutHideSelection ( VARIANT_BOOL HideSelection ) {
    HRESULT _hr = put_HideSelection(HideSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(292)
inline VARIANT_BOOL _OlkComboBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline void _OlkComboBox::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(294)
inline long _OlkComboBox::GetMaxLength ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(295)
inline void _OlkComboBox::PutMaxLength ( long MaxLength ) {
    HRESULT _hr = put_MaxLength(MaxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(296)
inline PicturePtr _OlkComboBox::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(297)
inline void _OlkComboBox::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(298)
inline enum OlMousePointer _OlkComboBox::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline void _OlkComboBox::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(300)
inline VARIANT_BOOL _OlkComboBox::GetSelectionMargin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SelectionMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline void _OlkComboBox::PutSelectionMargin ( VARIANT_BOOL SelectionMargin ) {
    HRESULT _hr = put_SelectionMargin(SelectionMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(302)
inline enum OlComboBoxStyle _OlkComboBox::GetStyle ( ) {
    enum OlComboBoxStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(303)
inline void _OlkComboBox::PutStyle ( enum OlComboBoxStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(304)
inline _bstr_t _OlkComboBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(305)
inline void _OlkComboBox::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(306)
inline enum OlTextAlign _OlkComboBox::GetTextAlign ( ) {
    enum OlTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline void _OlkComboBox::PutTextAlign ( enum OlTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(308)
inline long _OlkComboBox::GetTopIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_TopIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline void _OlkComboBox::PutTopIndex ( long TopIndex ) {
    HRESULT _hr = put_TopIndex(TopIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(310)
inline _variant_t _OlkComboBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(311)
inline void _OlkComboBox::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(312)
inline long _OlkComboBox::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void _OlkComboBox::PutListIndex ( long ListIndex ) {
    HRESULT _hr = put_ListIndex(ListIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline long _OlkComboBox::GetListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline long _OlkComboBox::GetSelStart ( ) {
    long _result = 0;
    HRESULT _hr = get_SelStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void _OlkComboBox::PutSelStart ( long SelStart ) {
    HRESULT _hr = put_SelStart(SelStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline long _OlkComboBox::GetSelLength ( ) {
    long _result = 0;
    HRESULT _hr = get_SelLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline void _OlkComboBox::PutSelLength ( long SelLength ) {
    HRESULT _hr = put_SelLength(SelLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(319)
inline _bstr_t _OlkComboBox::GetSelText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(320)
inline _bstr_t _OlkComboBox::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(321)
inline HRESULT _OlkComboBox::SetItem ( long Index, _bstr_t Item ) {
    HRESULT _hr = raw_SetItem(Index, Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(322)
inline HRESULT _OlkComboBox::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(323)
inline HRESULT _OlkComboBox::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(324)
inline HRESULT _OlkComboBox::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(325)
inline HRESULT _OlkComboBox::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(326)
inline HRESULT _OlkComboBox::AddItem ( _bstr_t ItemText, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(ItemText, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(327)
inline HRESULT _OlkComboBox::RemoveItem ( long Index ) {
    HRESULT _hr = raw_RemoveItem(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(328)
inline HRESULT _OlkComboBox::DropDown ( ) {
    HRESULT _hr = raw_DropDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface OlkComboBoxEvents wrapper method implementations
//

#pragma implementation_key(329)
inline HRESULT OlkComboBoxEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(330)
inline HRESULT OlkComboBoxEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(331)
inline HRESULT OlkComboBoxEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(332)
inline HRESULT OlkComboBoxEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(333)
inline HRESULT OlkComboBoxEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(334)
inline HRESULT OlkComboBoxEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(335)
inline HRESULT OlkComboBoxEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(336)
inline HRESULT OlkComboBoxEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(337)
inline HRESULT OlkComboBoxEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(338)
inline HRESULT OlkComboBoxEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(339)
inline HRESULT OlkComboBoxEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(340)
inline HRESULT OlkComboBoxEvents::DropButtonClick ( ) {
    return _com_dispatch_method(this, 0x7d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(341)
inline HRESULT OlkComboBoxEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(342)
inline HRESULT OlkComboBoxEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkListBox wrapper method implementations
//

#pragma implementation_key(343)
inline enum OlBorderStyle _OlkListBox::GetBorderStyle ( ) {
    enum OlBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline void _OlkListBox::PutBorderStyle ( enum OlBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline OLE_COLOR _OlkListBox::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(346)
inline void _OlkListBox::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline VARIANT_BOOL _OlkListBox::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline void _OlkListBox::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline FontPtr _OlkListBox::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(350)
inline OLE_COLOR _OlkListBox::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline void _OlkListBox::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(352)
inline VARIANT_BOOL _OlkListBox::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline void _OlkListBox::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(354)
inline enum OlMatchEntry _OlkListBox::GetMatchEntry ( ) {
    enum OlMatchEntry _result;
    HRESULT _hr = get_MatchEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(355)
inline void _OlkListBox::PutMatchEntry ( enum OlMatchEntry MatchEntry ) {
    HRESULT _hr = put_MatchEntry(MatchEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline PicturePtr _OlkListBox::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(357)
inline void _OlkListBox::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(358)
inline enum OlMousePointer _OlkListBox::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline void _OlkListBox::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(360)
inline enum OlMultiSelect _OlkListBox::GetMultiSelect ( ) {
    enum OlMultiSelect _result;
    HRESULT _hr = get_MultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline void _OlkListBox::PutMultiSelect ( enum OlMultiSelect MultiSelect ) {
    HRESULT _hr = put_MultiSelect(MultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(362)
inline _bstr_t _OlkListBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(363)
inline void _OlkListBox::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline enum OlTextAlign _OlkListBox::GetTextAlign ( ) {
    enum OlTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void _OlkListBox::PutTextAlign ( enum OlTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline long _OlkListBox::GetTopIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_TopIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline void _OlkListBox::PutTopIndex ( long TopIndex ) {
    HRESULT _hr = put_TopIndex(TopIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(368)
inline _variant_t _OlkListBox::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(369)
inline void _OlkListBox::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(370)
inline long _OlkListBox::GetListIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline void _OlkListBox::PutListIndex ( long ListIndex ) {
    HRESULT _hr = put_ListIndex(ListIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(372)
inline long _OlkListBox::GetListCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(373)
inline _bstr_t _OlkListBox::GetItem ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(374)
inline HRESULT _OlkListBox::SetItem ( long Index, _bstr_t Item ) {
    HRESULT _hr = raw_SetItem(Index, Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(375)
inline VARIANT_BOOL _OlkListBox::GetSelected ( long Index ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetSelected(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline HRESULT _OlkListBox::SetSelected ( long Index, VARIANT_BOOL Selected ) {
    HRESULT _hr = raw_SetSelected(Index, Selected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(377)
inline HRESULT _OlkListBox::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(378)
inline HRESULT _OlkListBox::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(379)
inline HRESULT _OlkListBox::AddItem ( _bstr_t ItemText, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(ItemText, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(380)
inline HRESULT _OlkListBox::RemoveItem ( long Index ) {
    HRESULT _hr = raw_RemoveItem(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface OlkListBoxEvents wrapper method implementations
//

#pragma implementation_key(381)
inline HRESULT OlkListBoxEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(382)
inline HRESULT OlkListBoxEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(383)
inline HRESULT OlkListBoxEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(384)
inline HRESULT OlkListBoxEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(385)
inline HRESULT OlkListBoxEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(386)
inline HRESULT OlkListBoxEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(387)
inline HRESULT OlkListBoxEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(388)
inline HRESULT OlkListBoxEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(389)
inline HRESULT OlkListBoxEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(390)
inline HRESULT OlkListBoxEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(391)
inline HRESULT OlkListBoxEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(392)
inline HRESULT OlkListBoxEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(393)
inline HRESULT OlkListBoxEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkInfoBar wrapper method implementations
//

#pragma implementation_key(394)
inline PicturePtr _OlkInfoBar::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(395)
inline void _OlkInfoBar::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline enum OlMousePointer _OlkInfoBar::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void _OlkInfoBar::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkInfoBarEvents wrapper method implementations
//

#pragma implementation_key(398)
inline HRESULT OlkInfoBarEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(399)
inline HRESULT OlkInfoBarEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(400)
inline HRESULT OlkInfoBarEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(401)
inline HRESULT OlkInfoBarEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(402)
inline HRESULT OlkInfoBarEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

//
// interface _OlkContactPhoto wrapper method implementations
//

#pragma implementation_key(403)
inline VARIANT_BOOL _OlkContactPhoto::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline void _OlkContactPhoto::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline PicturePtr _OlkContactPhoto::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(406)
inline void _OlkContactPhoto::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(407)
inline enum OlMousePointer _OlkContactPhoto::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(408)
inline void _OlkContactPhoto::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkContactPhotoEvents wrapper method implementations
//

#pragma implementation_key(409)
inline HRESULT OlkContactPhotoEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(410)
inline HRESULT OlkContactPhotoEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(411)
inline HRESULT OlkContactPhotoEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(412)
inline HRESULT OlkContactPhotoEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(413)
inline HRESULT OlkContactPhotoEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(414)
inline HRESULT OlkContactPhotoEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(415)
inline HRESULT OlkContactPhotoEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(416)
inline HRESULT OlkContactPhotoEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(417)
inline HRESULT OlkContactPhotoEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(418)
inline HRESULT OlkContactPhotoEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(419)
inline HRESULT OlkContactPhotoEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface _OlkBusinessCardControl wrapper method implementations
//

#pragma implementation_key(420)
inline PicturePtr _OlkBusinessCardControl::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(421)
inline void _OlkBusinessCardControl::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(422)
inline enum OlMousePointer _OlkBusinessCardControl::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(423)
inline void _OlkBusinessCardControl::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkBusinessCardControlEvents wrapper method implementations
//

#pragma implementation_key(424)
inline HRESULT OlkBusinessCardControlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(425)
inline HRESULT OlkBusinessCardControlEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(426)
inline HRESULT OlkBusinessCardControlEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(427)
inline HRESULT OlkBusinessCardControlEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(428)
inline HRESULT OlkBusinessCardControlEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

//
// interface _OlkPageControl wrapper method implementations
//

#pragma implementation_key(429)
inline enum OlPageType _OlkPageControl::GetPage ( ) {
    enum OlPageType _result;
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline void _OlkPageControl::PutPage ( enum OlPageType PageID ) {
    HRESULT _hr = put_Page(PageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _OlkDateControl wrapper method implementations
//

#pragma implementation_key(431)
inline VARIANT_BOOL _OlkDateControl::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline void _OlkDateControl::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(433)
inline VARIANT_BOOL _OlkDateControl::GetAutoWordSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoWordSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline void _OlkDateControl::PutAutoWordSelect ( VARIANT_BOOL AutoWordSelect ) {
    HRESULT _hr = put_AutoWordSelect(AutoWordSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(435)
inline OLE_COLOR _OlkDateControl::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(436)
inline void _OlkDateControl::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(437)
inline enum OlBackStyle _OlkDateControl::GetBackStyle ( ) {
    enum OlBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline void _OlkDateControl::PutBackStyle ( enum OlBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(439)
inline DATE _OlkDateControl::GetDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline void _OlkDateControl::PutDate ( DATE Date ) {
    HRESULT _hr = put_Date(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(441)
inline VARIANT_BOOL _OlkDateControl::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline void _OlkDateControl::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(443)
inline enum OlEnterFieldBehavior _OlkDateControl::GetEnterFieldBehavior ( ) {
    enum OlEnterFieldBehavior _result;
    HRESULT _hr = get_EnterFieldBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline void _OlkDateControl::PutEnterFieldBehavior ( enum OlEnterFieldBehavior EnterFieldBehavior ) {
    HRESULT _hr = put_EnterFieldBehavior(EnterFieldBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(445)
inline FontPtr _OlkDateControl::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(446)
inline OLE_COLOR _OlkDateControl::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline void _OlkDateControl::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(448)
inline VARIANT_BOOL _OlkDateControl::GetHideSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline void _OlkDateControl::PutHideSelection ( VARIANT_BOOL HideSelection ) {
    HRESULT _hr = put_HideSelection(HideSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline VARIANT_BOOL _OlkDateControl::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void _OlkDateControl::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline PicturePtr _OlkDateControl::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(453)
inline void _OlkDateControl::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline enum OlMousePointer _OlkDateControl::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline void _OlkDateControl::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(456)
inline VARIANT_BOOL _OlkDateControl::GetShowNoneButton ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNoneButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline void _OlkDateControl::PutShowNoneButton ( VARIANT_BOOL ShowNoneButton ) {
    HRESULT _hr = put_ShowNoneButton(ShowNoneButton);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline _bstr_t _OlkDateControl::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(459)
inline void _OlkDateControl::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline enum OlTextAlign _OlkDateControl::GetTextAlign ( ) {
    enum OlTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void _OlkDateControl::PutTextAlign ( enum OlTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline _variant_t _OlkDateControl::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(463)
inline void _OlkDateControl::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline HRESULT _OlkDateControl::DropDown ( ) {
    HRESULT _hr = raw_DropDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface OlkDateControlEvents wrapper method implementations
//

#pragma implementation_key(465)
inline HRESULT OlkDateControlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(466)
inline HRESULT OlkDateControlEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(467)
inline HRESULT OlkDateControlEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(468)
inline HRESULT OlkDateControlEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(469)
inline HRESULT OlkDateControlEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(470)
inline HRESULT OlkDateControlEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(471)
inline HRESULT OlkDateControlEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(472)
inline HRESULT OlkDateControlEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(473)
inline HRESULT OlkDateControlEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(474)
inline HRESULT OlkDateControlEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(475)
inline HRESULT OlkDateControlEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(476)
inline HRESULT OlkDateControlEvents::DropButtonClick ( ) {
    return _com_dispatch_method(this, 0x7d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(477)
inline HRESULT OlkDateControlEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(478)
inline HRESULT OlkDateControlEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkTimeControl wrapper method implementations
//

#pragma implementation_key(479)
inline VARIANT_BOOL _OlkTimeControl::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(480)
inline void _OlkTimeControl::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline VARIANT_BOOL _OlkTimeControl::GetAutoWordSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoWordSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void _OlkTimeControl::PutAutoWordSelect ( VARIANT_BOOL AutoWordSelect ) {
    HRESULT _hr = put_AutoWordSelect(AutoWordSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline OLE_COLOR _OlkTimeControl::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline void _OlkTimeControl::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline enum OlBackStyle _OlkTimeControl::GetBackStyle ( ) {
    enum OlBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline void _OlkTimeControl::PutBackStyle ( enum OlBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(487)
inline VARIANT_BOOL _OlkTimeControl::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(488)
inline void _OlkTimeControl::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(489)
inline enum OlEnterFieldBehavior _OlkTimeControl::GetEnterFieldBehavior ( ) {
    enum OlEnterFieldBehavior _result;
    HRESULT _hr = get_EnterFieldBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline void _OlkTimeControl::PutEnterFieldBehavior ( enum OlEnterFieldBehavior EnterFieldBehavior ) {
    HRESULT _hr = put_EnterFieldBehavior(EnterFieldBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(491)
inline FontPtr _OlkTimeControl::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(492)
inline OLE_COLOR _OlkTimeControl::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline void _OlkTimeControl::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(494)
inline VARIANT_BOOL _OlkTimeControl::GetHideSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline void _OlkTimeControl::PutHideSelection ( VARIANT_BOOL HideSelection ) {
    HRESULT _hr = put_HideSelection(HideSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline VARIANT_BOOL _OlkTimeControl::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline void _OlkTimeControl::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(498)
inline PicturePtr _OlkTimeControl::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(499)
inline void _OlkTimeControl::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline enum OlMousePointer _OlkTimeControl::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(501)
inline void _OlkTimeControl::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(502)
inline DATE _OlkTimeControl::GetReferenceTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReferenceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline void _OlkTimeControl::PutReferenceTime ( DATE ReferenceTime ) {
    HRESULT _hr = put_ReferenceTime(ReferenceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(504)
inline enum OlTimeStyle _OlkTimeControl::GetStyle ( ) {
    enum OlTimeStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(505)
inline void _OlkTimeControl::PutStyle ( enum OlTimeStyle TimeStyle ) {
    HRESULT _hr = put_Style(TimeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(506)
inline DATE _OlkTimeControl::GetTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(507)
inline void _OlkTimeControl::PutTime ( DATE Time ) {
    HRESULT _hr = put_Time(Time);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(508)
inline _bstr_t _OlkTimeControl::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(509)
inline void _OlkTimeControl::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(510)
inline enum OlTextAlign _OlkTimeControl::GetTextAlign ( ) {
    enum OlTextAlign _result;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(511)
inline void _OlkTimeControl::PutTextAlign ( enum OlTextAlign TextAlign ) {
    HRESULT _hr = put_TextAlign(TextAlign);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline _variant_t _OlkTimeControl::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(513)
inline void _OlkTimeControl::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline DATE _OlkTimeControl::GetIntervalTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_IntervalTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(515)
inline void _OlkTimeControl::PutIntervalTime ( DATE IntervalTime ) {
    HRESULT _hr = put_IntervalTime(IntervalTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(516)
inline HRESULT _OlkTimeControl::DropDown ( ) {
    HRESULT _hr = raw_DropDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface OlkTimeControlEvents wrapper method implementations
//

#pragma implementation_key(517)
inline HRESULT OlkTimeControlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(518)
inline HRESULT OlkTimeControlEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(519)
inline HRESULT OlkTimeControlEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(520)
inline HRESULT OlkTimeControlEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(521)
inline HRESULT OlkTimeControlEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(522)
inline HRESULT OlkTimeControlEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(523)
inline HRESULT OlkTimeControlEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(524)
inline HRESULT OlkTimeControlEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(525)
inline HRESULT OlkTimeControlEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(526)
inline HRESULT OlkTimeControlEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(527)
inline HRESULT OlkTimeControlEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(528)
inline HRESULT OlkTimeControlEvents::DropButtonClick ( ) {
    return _com_dispatch_method(this, 0x7d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(529)
inline HRESULT OlkTimeControlEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(530)
inline HRESULT OlkTimeControlEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// interface _OlkCategory wrapper method implementations
//

#pragma implementation_key(531)
inline VARIANT_BOOL _OlkCategory::GetAutoSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline void _OlkCategory::PutAutoSize ( VARIANT_BOOL AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(533)
inline OLE_COLOR _OlkCategory::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline void _OlkCategory::PutBackColor ( OLE_COLOR BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(535)
inline enum OlBackStyle _OlkCategory::GetBackStyle ( ) {
    enum OlBackStyle _result;
    HRESULT _hr = get_BackStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(536)
inline void _OlkCategory::PutBackStyle ( enum OlBackStyle BackStyle ) {
    HRESULT _hr = put_BackStyle(BackStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline VARIANT_BOOL _OlkCategory::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void _OlkCategory::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline OLE_COLOR _OlkCategory::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(540)
inline void _OlkCategory::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(541)
inline PicturePtr _OlkCategory::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(542)
inline void _OlkCategory::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(543)
inline enum OlMousePointer _OlkCategory::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline void _OlkCategory::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface OlkCategoryEvents wrapper method implementations
//

#pragma implementation_key(545)
inline HRESULT OlkCategoryEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(546)
inline HRESULT OlkCategoryEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(547)
inline HRESULT OlkCategoryEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(548)
inline HRESULT OlkCategoryEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(549)
inline HRESULT OlkCategoryEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(550)
inline HRESULT OlkCategoryEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(551)
inline HRESULT OlkCategoryEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(552)
inline HRESULT OlkCategoryEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(553)
inline HRESULT OlkCategoryEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(554)
inline HRESULT OlkCategoryEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(555)
inline HRESULT OlkCategoryEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface _OlkFrameHeader wrapper method implementations
//

#pragma implementation_key(556)
inline enum OlAlignment _OlkFrameHeader::GetAlignment ( ) {
    enum OlAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline void _OlkFrameHeader::PutAlignment ( enum OlAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline _bstr_t _OlkFrameHeader::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(559)
inline void _OlkFrameHeader::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline FontPtr _OlkFrameHeader::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(561)
inline OLE_COLOR _OlkFrameHeader::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void _OlkFrameHeader::PutForeColor ( OLE_COLOR ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline VARIANT_BOOL _OlkFrameHeader::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(564)
inline void _OlkFrameHeader::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(565)
inline PicturePtr _OlkFrameHeader::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(566)
inline void _OlkFrameHeader::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(567)
inline enum OlMousePointer _OlkFrameHeader::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(568)
inline void _OlkFrameHeader::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _OlkSenderPhoto wrapper method implementations
//

#pragma implementation_key(569)
inline VARIANT_BOOL _OlkSenderPhoto::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(570)
inline void _OlkSenderPhoto::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(571)
inline PicturePtr _OlkSenderPhoto::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(572)
inline void _OlkSenderPhoto::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(573)
inline enum OlMousePointer _OlkSenderPhoto::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline void _OlkSenderPhoto::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(575)
inline long _OlkSenderPhoto::GetPreferredWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_PreferredWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline long _OlkSenderPhoto::GetPreferredHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_PreferredHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface OlkSenderPhotoEvents wrapper method implementations
//

#pragma implementation_key(577)
inline HRESULT OlkSenderPhotoEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(578)
inline HRESULT OlkSenderPhotoEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(579)
inline HRESULT OlkSenderPhotoEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(580)
inline HRESULT OlkSenderPhotoEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(581)
inline HRESULT OlkSenderPhotoEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(582)
inline HRESULT OlkSenderPhotoEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ItemEvents wrapper method implementations
//

#pragma implementation_key(583)
inline HRESULT ItemEvents::Open ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(584)
inline HRESULT ItemEvents::CustomAction ( IDispatch * Action, IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Action, Response, Cancel);
}

#pragma implementation_key(585)
inline HRESULT ItemEvents::CustomPropertyChange ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

#pragma implementation_key(586)
inline HRESULT ItemEvents::Forward ( IDispatch * Forward, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf468, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Forward, Cancel);
}

#pragma implementation_key(587)
inline HRESULT ItemEvents::Close ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(588)
inline HRESULT ItemEvents::PropertyChange ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xf009, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

#pragma implementation_key(589)
inline HRESULT ItemEvents::Read ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(590)
inline HRESULT ItemEvents::Reply ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf466, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Response, Cancel);
}

#pragma implementation_key(591)
inline HRESULT ItemEvents::ReplyAll ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf467, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Response, Cancel);
}

#pragma implementation_key(592)
inline HRESULT ItemEvents::Send ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(593)
inline HRESULT ItemEvents::Write ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(594)
inline HRESULT ItemEvents::BeforeCheckNames ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf00a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(595)
inline HRESULT ItemEvents::AttachmentAdd ( struct Attachment * Attachment ) {
    return _com_dispatch_method(this, 0xf00b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Attachment);
}

#pragma implementation_key(596)
inline HRESULT ItemEvents::AttachmentRead ( struct Attachment * Attachment ) {
    return _com_dispatch_method(this, 0xf00c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Attachment);
}

#pragma implementation_key(597)
inline HRESULT ItemEvents::BeforeAttachmentSave ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf00d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Attachment, Cancel);
}

//
// dispinterface ItemEvents_10 wrapper method implementations
//

#pragma implementation_key(598)
inline HRESULT ItemEvents_10::Open ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(599)
inline HRESULT ItemEvents_10::CustomAction ( IDispatch * Action, IDispatch * Response, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x400b", Action, Response, Cancel);
    return _result;
}

#pragma implementation_key(600)
inline HRESULT ItemEvents_10::CustomPropertyChange ( _bstr_t Name ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)Name);
    return _result;
}

#pragma implementation_key(601)
inline HRESULT ItemEvents_10::Forward ( IDispatch * Forward, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf468, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x400b", Forward, Cancel);
    return _result;
}

#pragma implementation_key(602)
inline HRESULT ItemEvents_10::Close ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(603)
inline HRESULT ItemEvents_10::PropertyChange ( _bstr_t Name ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf009, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)Name);
    return _result;
}

#pragma implementation_key(604)
inline HRESULT ItemEvents_10::Read ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(605)
inline HRESULT ItemEvents_10::Reply ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf466, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x400b", Response, Cancel);
    return _result;
}

#pragma implementation_key(606)
inline HRESULT ItemEvents_10::ReplyAll ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf467, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x400b", Response, Cancel);
    return _result;
}

#pragma implementation_key(607)
inline HRESULT ItemEvents_10::Send ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(608)
inline HRESULT ItemEvents_10::Write ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(609)
inline HRESULT ItemEvents_10::BeforeCheckNames ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf00a, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(610)
inline HRESULT ItemEvents_10::AttachmentAdd ( struct Attachment * Attachment ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf00b, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Attachment);
    return _result;
}

#pragma implementation_key(611)
inline HRESULT ItemEvents_10::AttachmentRead ( struct Attachment * Attachment ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf00c, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Attachment);
    return _result;
}

#pragma implementation_key(612)
inline HRESULT ItemEvents_10::BeforeAttachmentSave ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf00d, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x400b", Attachment, Cancel);
    return _result;
}

#pragma implementation_key(613)
inline HRESULT ItemEvents_10::BeforeDelete ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa75, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Item, Cancel);
}

#pragma implementation_key(614)
inline HRESULT ItemEvents_10::AttachmentRemove ( struct Attachment * Attachment ) {
    return _com_dispatch_method(this, 0xfbae, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Attachment);
}

#pragma implementation_key(615)
inline HRESULT ItemEvents_10::BeforeAttachmentAdd ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfbb0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Attachment, Cancel);
}

#pragma implementation_key(616)
inline HRESULT ItemEvents_10::BeforeAttachmentPreview ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfbaf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Attachment, Cancel);
}

#pragma implementation_key(617)
inline HRESULT ItemEvents_10::BeforeAttachmentRead ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfbab, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Attachment, Cancel);
}

#pragma implementation_key(618)
inline HRESULT ItemEvents_10::BeforeAttachmentWriteToTempFile ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfbb2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Attachment, Cancel);
}

#pragma implementation_key(619)
inline HRESULT ItemEvents_10::Unload ( ) {
    return _com_dispatch_method(this, 0xfbad, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(620)
inline HRESULT ItemEvents_10::BeforeAutoSave ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfc02, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(621)
inline HRESULT ItemEvents_10::BeforeRead ( ) {
    return _com_dispatch_method(this, 0xfc8c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(622)
inline HRESULT ItemEvents_10::AfterWrite ( ) {
    return _com_dispatch_method(this, 0xfc8d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(623)
inline HRESULT ItemEvents_10::ReadComplete ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfc8f, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

//
// dispinterface SyncObjectEvents wrapper method implementations
//

#pragma implementation_key(624)
inline HRESULT SyncObjectEvents::SyncStart ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(625)
inline HRESULT SyncObjectEvents::Progress ( enum OlSyncState State, _bstr_t Description, long Value, long Max ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008\x0003\x0003", State, (BSTR)Description, Value, Max);
}

#pragma implementation_key(626)
inline HRESULT SyncObjectEvents::OnError ( long Code, _bstr_t Description ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", Code, (BSTR)Description);
}

#pragma implementation_key(627)
inline HRESULT SyncObjectEvents::SyncEnd ( ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface AccountsEvents wrapper method implementations
//

#pragma implementation_key(628)
inline HRESULT AccountsEvents::AutoDiscoverComplete ( struct _Account * Account ) {
    return _com_dispatch_method(this, 0xfc6c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Account);
}

//
// dispinterface StoresEvents_12 wrapper method implementations
//

#pragma implementation_key(629)
inline HRESULT StoresEvents_12::BeforeStoreRemove ( struct _Store * Store, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfbb1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Store, Cancel);
}

#pragma implementation_key(630)
inline HRESULT StoresEvents_12::StoreAdd ( struct _Store * Store ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Store);
}

//
// dispinterface ExplorerEvents wrapper method implementations
//

#pragma implementation_key(631)
inline HRESULT ExplorerEvents::Activate ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(632)
inline HRESULT ExplorerEvents::FolderSwitch ( ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(633)
inline HRESULT ExplorerEvents::BeforeFolderSwitch ( IDispatch * NewFolder, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", NewFolder, Cancel);
}

#pragma implementation_key(634)
inline HRESULT ExplorerEvents::ViewSwitch ( ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(635)
inline HRESULT ExplorerEvents::BeforeViewSwitch ( const _variant_t & NewView, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x400b", &NewView, Cancel);
}

#pragma implementation_key(636)
inline HRESULT ExplorerEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(637)
inline HRESULT ExplorerEvents::SelectionChange ( ) {
    return _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(638)
inline HRESULT ExplorerEvents::Close ( ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ExplorerEvents_10 wrapper method implementations
//

#pragma implementation_key(639)
inline HRESULT ExplorerEvents_10::Activate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(640)
inline HRESULT ExplorerEvents_10::FolderSwitch ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(641)
inline HRESULT ExplorerEvents_10::BeforeFolderSwitch ( IDispatch * NewFolder, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x400b", NewFolder, Cancel);
    return _result;
}

#pragma implementation_key(642)
inline HRESULT ExplorerEvents_10::ViewSwitch ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(643)
inline HRESULT ExplorerEvents_10::BeforeViewSwitch ( const _variant_t & NewView, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000c\x400b", &NewView, Cancel);
    return _result;
}

#pragma implementation_key(644)
inline HRESULT ExplorerEvents_10::Deactivate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(645)
inline HRESULT ExplorerEvents_10::SelectionChange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(646)
inline HRESULT ExplorerEvents_10::Close ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(647)
inline HRESULT ExplorerEvents_10::BeforeMaximize ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa11, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(648)
inline HRESULT ExplorerEvents_10::BeforeMinimize ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa12, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(649)
inline HRESULT ExplorerEvents_10::BeforeMove ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa13, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(650)
inline HRESULT ExplorerEvents_10::BeforeSize ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa14, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(651)
inline HRESULT ExplorerEvents_10::BeforeItemCopy ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa0e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(652)
inline HRESULT ExplorerEvents_10::BeforeItemCut ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa0f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(653)
inline HRESULT ExplorerEvents_10::BeforeItemPaste ( VARIANT * ClipboardContent, struct MAPIFolder * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa10, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400c\x0009\x400b", ClipboardContent, Target, Cancel);
}

#pragma implementation_key(654)
inline HRESULT ExplorerEvents_10::AttachmentSelectionChange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfc79, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(655)
inline HRESULT ExplorerEvents_10::InlineResponse ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xfc92, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(656)
inline HRESULT ExplorerEvents_10::InlineResponseClose ( ) {
    return _com_dispatch_method(this, 0xfc96, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(657)
inline HRESULT ExplorerEvents_10::DisplayModeChange ( enum OlDisplayMode DisplayMode ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfc98, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", DisplayMode);
    return _result;
}

//
// dispinterface InspectorEvents wrapper method implementations
//

#pragma implementation_key(658)
inline HRESULT InspectorEvents::Activate ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(659)
inline HRESULT InspectorEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(660)
inline HRESULT InspectorEvents::Close ( ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface InspectorEvents_10 wrapper method implementations
//

#pragma implementation_key(661)
inline HRESULT InspectorEvents_10::Activate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(662)
inline HRESULT InspectorEvents_10::Deactivate ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(663)
inline HRESULT InspectorEvents_10::Close ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(664)
inline HRESULT InspectorEvents_10::BeforeMaximize ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa11, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(665)
inline HRESULT InspectorEvents_10::BeforeMinimize ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa12, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(666)
inline HRESULT InspectorEvents_10::BeforeMove ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa13, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(667)
inline HRESULT InspectorEvents_10::BeforeSize ( VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa14, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x400b", Cancel);
    return _result;
}

#pragma implementation_key(668)
inline HRESULT InspectorEvents_10::PageChange ( BSTR * ActivePageName ) {
    return _com_dispatch_method(this, 0xfbf4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4008", ActivePageName);
}

#pragma implementation_key(669)
inline HRESULT InspectorEvents_10::AttachmentSelectionChange ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfc79, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface _OlkTimeZoneControl wrapper method implementations
//

#pragma implementation_key(670)
inline enum OlAppointmentTimeField _OlkTimeZoneControl::GetAppointmentTimeField ( ) {
    enum OlAppointmentTimeField _result;
    HRESULT _hr = get_AppointmentTimeField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void _OlkTimeZoneControl::PutAppointmentTimeField ( enum OlAppointmentTimeField AppointmentTimeField ) {
    HRESULT _hr = put_AppointmentTimeField(AppointmentTimeField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline enum OlBorderStyle _OlkTimeZoneControl::GetBorderStyle ( ) {
    enum OlBorderStyle _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void _OlkTimeZoneControl::PutBorderStyle ( enum OlBorderStyle BorderStyle ) {
    HRESULT _hr = put_BorderStyle(BorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline VARIANT_BOOL _OlkTimeZoneControl::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline void _OlkTimeZoneControl::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline VARIANT_BOOL _OlkTimeZoneControl::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void _OlkTimeZoneControl::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline PicturePtr _OlkTimeZoneControl::GetMouseIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = get_MouseIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(679)
inline void _OlkTimeZoneControl::PutMouseIcon ( struct Picture * MouseIcon ) {
    HRESULT _hr = put_MouseIcon(MouseIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline enum OlMousePointer _OlkTimeZoneControl::GetMousePointer ( ) {
    enum OlMousePointer _result;
    HRESULT _hr = get_MousePointer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline void _OlkTimeZoneControl::PutMousePointer ( enum OlMousePointer MousePointer ) {
    HRESULT _hr = put_MousePointer(MousePointer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline long _OlkTimeZoneControl::GetSelectedTimeZoneIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectedTimeZoneIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline void _OlkTimeZoneControl::PutSelectedTimeZoneIndex ( long SelectedTimeZoneIndex ) {
    HRESULT _hr = put_SelectedTimeZoneIndex(SelectedTimeZoneIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline _variant_t _OlkTimeZoneControl::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(685)
inline void _OlkTimeZoneControl::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline HRESULT _OlkTimeZoneControl::DropDown ( ) {
    HRESULT _hr = raw_DropDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface OlkTimeZoneControlEvents wrapper method implementations
//

#pragma implementation_key(687)
inline HRESULT OlkTimeZoneControlEvents::Click ( ) {
    return _com_dispatch_method(this, DISPID_CLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(688)
inline HRESULT OlkTimeZoneControlEvents::DoubleClick ( ) {
    return _com_dispatch_method(this, DISPID_DBLCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(689)
inline HRESULT OlkTimeZoneControlEvents::MouseDown ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(690)
inline HRESULT OlkTimeZoneControlEvents::MouseMove ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEMOVE, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(691)
inline HRESULT OlkTimeZoneControlEvents::MouseUp ( enum OlMouseButton Button, enum OlShiftState Shift, OLE_XPOS_CONTAINER X, OLE_YPOS_CONTAINER Y ) {
    return _com_dispatch_method(this, DISPID_MOUSEUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0004\x0004", Button, Shift, X, Y);
}

#pragma implementation_key(692)
inline HRESULT OlkTimeZoneControlEvents::Enter ( ) {
    return _com_dispatch_method(this, 0x80018202, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(693)
inline HRESULT OlkTimeZoneControlEvents::Exit ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018203, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(694)
inline HRESULT OlkTimeZoneControlEvents::KeyDown ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYDOWN, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(695)
inline HRESULT OlkTimeZoneControlEvents::KeyPress ( long * KeyAscii ) {
    return _com_dispatch_method(this, DISPID_KEYPRESS, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003", KeyAscii);
}

#pragma implementation_key(696)
inline HRESULT OlkTimeZoneControlEvents::KeyUp ( long * KeyCode, enum OlShiftState Shift ) {
    return _com_dispatch_method(this, DISPID_KEYUP, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x0003", KeyCode, Shift);
}

#pragma implementation_key(697)
inline HRESULT OlkTimeZoneControlEvents::Change ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(698)
inline HRESULT OlkTimeZoneControlEvents::DropButtonClick ( ) {
    return _com_dispatch_method(this, 0x7d2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(699)
inline HRESULT OlkTimeZoneControlEvents::AfterUpdate ( ) {
    return _com_dispatch_method(this, 0x80018200, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(700)
inline HRESULT OlkTimeZoneControlEvents::BeforeUpdate ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x80018201, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// dispinterface ApplicationEvents wrapper method implementations
//

#pragma implementation_key(701)
inline HRESULT ApplicationEvents::ItemSend ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Item, Cancel);
}

#pragma implementation_key(702)
inline HRESULT ApplicationEvents::NewMail ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(703)
inline HRESULT ApplicationEvents::Reminder ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(704)
inline HRESULT ApplicationEvents::OptionsPagesAdd ( struct PropertyPages * Pages ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Pages);
}

#pragma implementation_key(705)
inline HRESULT ApplicationEvents::Startup ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(706)
inline HRESULT ApplicationEvents::Quit ( ) {
    return _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ExplorersEvents wrapper method implementations
//

#pragma implementation_key(707)
inline HRESULT ExplorersEvents::NewExplorer ( struct _Explorer * Explorer ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Explorer);
}

//
// dispinterface FoldersEvents wrapper method implementations
//

#pragma implementation_key(708)
inline HRESULT FoldersEvents::FolderAdd ( struct MAPIFolder * Folder ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Folder);
}

#pragma implementation_key(709)
inline HRESULT FoldersEvents::FolderChange ( struct MAPIFolder * Folder ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Folder);
}

#pragma implementation_key(710)
inline HRESULT FoldersEvents::FolderRemove ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface InspectorsEvents wrapper method implementations
//

#pragma implementation_key(711)
inline HRESULT InspectorsEvents::NewInspector ( struct _Inspector * Inspector ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Inspector);
}

//
// dispinterface ItemsEvents wrapper method implementations
//

#pragma implementation_key(712)
inline HRESULT ItemsEvents::ItemAdd ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(713)
inline HRESULT ItemsEvents::ItemChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(714)
inline HRESULT ItemsEvents::ItemRemove ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface NameSpaceEvents wrapper method implementations
//

#pragma implementation_key(715)
inline HRESULT NameSpaceEvents::OptionsPagesAdd ( struct PropertyPages * Pages, struct MAPIFolder * Folder ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Pages, Folder);
}

#pragma implementation_key(716)
inline HRESULT NameSpaceEvents::AutoDiscoverComplete ( ) {
    return _com_dispatch_method(this, 0xfc2d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface OutlookBarGroupsEvents wrapper method implementations
//

#pragma implementation_key(717)
inline HRESULT OutlookBarGroupsEvents::GroupAdd ( struct OutlookBarGroup * NewGroup ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NewGroup);
}

#pragma implementation_key(718)
inline HRESULT OutlookBarGroupsEvents::BeforeGroupAdd ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(719)
inline HRESULT OutlookBarGroupsEvents::BeforeGroupRemove ( struct OutlookBarGroup * Group, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Group, Cancel);
}

//
// dispinterface OutlookBarPaneEvents wrapper method implementations
//

#pragma implementation_key(720)
inline HRESULT OutlookBarPaneEvents::BeforeNavigate ( struct OutlookBarShortcut * Shortcut, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Shortcut, Cancel);
}

#pragma implementation_key(721)
inline HRESULT OutlookBarPaneEvents::BeforeGroupSwitch ( struct OutlookBarGroup * ToGroup, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", ToGroup, Cancel);
}

//
// dispinterface OutlookBarShortcutsEvents wrapper method implementations
//

#pragma implementation_key(722)
inline HRESULT OutlookBarShortcutsEvents::ShortcutAdd ( struct OutlookBarShortcut * NewShortcut ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NewShortcut);
}

#pragma implementation_key(723)
inline HRESULT OutlookBarShortcutsEvents::BeforeShortcutAdd ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(724)
inline HRESULT OutlookBarShortcutsEvents::BeforeShortcutRemove ( struct OutlookBarShortcut * Shortcut, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Shortcut, Cancel);
}

//
// interface PropertyPage wrapper method implementations
//

#pragma implementation_key(725)
inline HRESULT PropertyPage::GetPageInfo ( BSTR * HelpFile, long * HelpContext ) {
    HRESULT _hr = raw_GetPageInfo(HelpFile, HelpContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(726)
inline VARIANT_BOOL PropertyPage::GetDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(727)
inline HRESULT PropertyPage::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface ApplicationEvents_10 wrapper method implementations
//

#pragma implementation_key(728)
inline HRESULT ApplicationEvents_10::ItemSend ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x400b", Item, Cancel);
    return _result;
}

#pragma implementation_key(729)
inline HRESULT ApplicationEvents_10::NewMail ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(730)
inline HRESULT ApplicationEvents_10::Reminder ( IDispatch * Item ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Item);
    return _result;
}

#pragma implementation_key(731)
inline HRESULT ApplicationEvents_10::OptionsPagesAdd ( struct PropertyPages * Pages ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Pages);
    return _result;
}

#pragma implementation_key(732)
inline HRESULT ApplicationEvents_10::Startup ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(733)
inline HRESULT ApplicationEvents_10::Quit ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(734)
inline HRESULT ApplicationEvents_10::AdvancedSearchComplete ( struct Search * SearchObject ) {
    return _com_dispatch_method(this, 0xfa6a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", SearchObject);
}

#pragma implementation_key(735)
inline HRESULT ApplicationEvents_10::AdvancedSearchStopped ( struct Search * SearchObject ) {
    return _com_dispatch_method(this, 0xfa6b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", SearchObject);
}

#pragma implementation_key(736)
inline HRESULT ApplicationEvents_10::MAPILogonComplete ( ) {
    return _com_dispatch_method(this, 0xfa90, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ApplicationEvents_11 wrapper method implementations
//

#pragma implementation_key(737)
inline HRESULT ApplicationEvents_11::ItemSend ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x400b", Item, Cancel);
    return _result;
}

#pragma implementation_key(738)
inline HRESULT ApplicationEvents_11::NewMail ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(739)
inline HRESULT ApplicationEvents_11::Reminder ( IDispatch * Item ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Item);
    return _result;
}

#pragma implementation_key(740)
inline HRESULT ApplicationEvents_11::OptionsPagesAdd ( struct PropertyPages * Pages ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", Pages);
    return _result;
}

#pragma implementation_key(741)
inline HRESULT ApplicationEvents_11::Startup ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(742)
inline HRESULT ApplicationEvents_11::Quit ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(743)
inline HRESULT ApplicationEvents_11::AdvancedSearchComplete ( struct Search * SearchObject ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa6a, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", SearchObject);
    return _result;
}

#pragma implementation_key(744)
inline HRESULT ApplicationEvents_11::AdvancedSearchStopped ( struct Search * SearchObject ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa6b, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", SearchObject);
    return _result;
}

#pragma implementation_key(745)
inline HRESULT ApplicationEvents_11::MAPILogonComplete ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfa90, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(746)
inline HRESULT ApplicationEvents_11::NewMailEx ( _bstr_t EntryIDCollection ) {
    return _com_dispatch_method(this, 0xfab5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)EntryIDCollection);
}

#pragma implementation_key(747)
inline HRESULT ApplicationEvents_11::AttachmentContextMenuDisplay ( struct CommandBar * CommandBar, struct _AttachmentSelection * Attachments ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xfb3e, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", CommandBar, Attachments);
    return _result;
}

#pragma implementation_key(748)
inline HRESULT ApplicationEvents_11::FolderContextMenuDisplay ( struct CommandBar * CommandBar, struct MAPIFolder * Folder ) {
    return _com_dispatch_method(this, 0xfb42, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", CommandBar, Folder);
}

#pragma implementation_key(749)
inline HRESULT ApplicationEvents_11::StoreContextMenuDisplay ( struct CommandBar * CommandBar, struct _Store * Store ) {
    return _com_dispatch_method(this, 0xfb43, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", CommandBar, Store);
}

#pragma implementation_key(750)
inline HRESULT ApplicationEvents_11::ShortcutContextMenuDisplay ( struct CommandBar * CommandBar, struct OutlookBarShortcut * Shortcut ) {
    return _com_dispatch_method(this, 0xfb44, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", CommandBar, Shortcut);
}

#pragma implementation_key(751)
inline HRESULT ApplicationEvents_11::ViewContextMenuDisplay ( struct CommandBar * CommandBar, struct View * View ) {
    return _com_dispatch_method(this, 0xfb40, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", CommandBar, View);
}

#pragma implementation_key(752)
inline HRESULT ApplicationEvents_11::ItemContextMenuDisplay ( struct CommandBar * CommandBar, struct Selection * Selection ) {
    return _com_dispatch_method(this, 0xfb41, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", CommandBar, Selection);
}

#pragma implementation_key(753)
inline HRESULT ApplicationEvents_11::ContextMenuClose ( enum OlContextMenu ContextMenu ) {
    return _com_dispatch_method(this, 0xfba6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", ContextMenu);
}

#pragma implementation_key(754)
inline HRESULT ApplicationEvents_11::ItemLoad ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xfba7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(755)
inline HRESULT ApplicationEvents_11::BeforeFolderSharingDialog ( struct MAPIFolder * FolderToShare, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfc01, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", FolderToShare, Cancel);
}

//
// dispinterface MAPIFolderEvents_12 wrapper method implementations
//

#pragma implementation_key(756)
inline HRESULT MAPIFolderEvents_12::BeforeFolderMove ( struct MAPIFolder * MoveTo, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfba8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", MoveTo, Cancel);
}

#pragma implementation_key(757)
inline HRESULT MAPIFolderEvents_12::BeforeItemMove ( IDispatch * Item, struct MAPIFolder * MoveTo, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfba9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Item, MoveTo, Cancel);
}

//
// dispinterface ResultsEvents wrapper method implementations
//

#pragma implementation_key(758)
inline HRESULT ResultsEvents::ItemAdd ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(759)
inline HRESULT ResultsEvents::ItemChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(760)
inline HRESULT ResultsEvents::ItemRemove ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _ViewsEvents wrapper method implementations
//

#pragma implementation_key(761)
inline HRESULT _ViewsEvents::ViewAdd ( struct View * View ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", View);
}

#pragma implementation_key(762)
inline HRESULT _ViewsEvents::ViewRemove ( struct View * View ) {
    return _com_dispatch_method(this, 0xfa47, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", View);
}

//
// dispinterface ReminderCollectionEvents wrapper method implementations
//

#pragma implementation_key(763)
inline HRESULT ReminderCollectionEvents::BeforeReminderShow ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa93, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(764)
inline HRESULT ReminderCollectionEvents::ReminderAdd ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa94, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

#pragma implementation_key(765)
inline HRESULT ReminderCollectionEvents::ReminderChange ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa95, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

#pragma implementation_key(766)
inline HRESULT ReminderCollectionEvents::ReminderFire ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa96, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

#pragma implementation_key(767)
inline HRESULT ReminderCollectionEvents::ReminderRemove ( ) {
    return _com_dispatch_method(this, 0xfa97, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(768)
inline HRESULT ReminderCollectionEvents::Snooze ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa98, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

//
// dispinterface FormRegionEvents wrapper method implementations
//

#pragma implementation_key(769)
inline HRESULT FormRegionEvents::Expanded ( VARIANT_BOOL Expand ) {
    return _com_dispatch_method(this, 0xfb38, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", Expand);
}

#pragma implementation_key(770)
inline HRESULT FormRegionEvents::Close ( ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface NavigationPaneEvents_12 wrapper method implementations
//

#pragma implementation_key(771)
inline HRESULT NavigationPaneEvents_12::ModuleSwitch ( struct _NavigationModule * CurrentModule ) {
    return _com_dispatch_method(this, 0xfbc9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", CurrentModule);
}

//
// dispinterface NavigationGroupsEvents_12 wrapper method implementations
//

#pragma implementation_key(772)
inline HRESULT NavigationGroupsEvents_12::SelectedChange ( struct _NavigationFolder * NavigationFolder ) {
    return _com_dispatch_method(this, 0xfbca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NavigationFolder);
}

#pragma implementation_key(773)
inline HRESULT NavigationGroupsEvents_12::NavigationFolderAdd ( struct _NavigationFolder * NavigationFolder ) {
    return _com_dispatch_method(this, 0xfbcb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NavigationFolder);
}

#pragma implementation_key(774)
inline HRESULT NavigationGroupsEvents_12::NavigationFolderRemove ( ) {
    return _com_dispatch_method(this, 0xfbcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface _FormRegionStartup wrapper method implementations
//

#pragma implementation_key(775)
inline _variant_t _FormRegionStartup::GetFormRegionStorage ( _bstr_t FormRegionName, IDispatch * Item, long LCID, enum OlFormRegionMode FormRegionMode, enum OlFormRegionSize FormRegionSize ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFormRegionStorage(FormRegionName, Item, LCID, FormRegionMode, FormRegionSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(776)
inline HRESULT _FormRegionStartup::BeforeFormRegionShow ( struct _FormRegion * FormRegion ) {
    HRESULT _hr = raw_BeforeFormRegionShow(FormRegion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(777)
inline _variant_t _FormRegionStartup::GetFormRegionManifest ( _bstr_t FormRegionName, long LCID ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFormRegionManifest(FormRegionName, LCID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(778)
inline _variant_t _FormRegionStartup::GetFormRegionIcon ( _bstr_t FormRegionName, long LCID, enum OlFormRegionIcon Icon ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFormRegionIcon(FormRegionName, LCID, Icon, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// dispinterface AccountSelectorEvents wrapper method implementations
//

#pragma implementation_key(779)
inline HRESULT AccountSelectorEvents::SelectedAccountChange ( struct _Account * SelectedAccount ) {
    return _com_dispatch_method(this, 0xfc73, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", SelectedAccount);
}

//
// interface _TimeZone wrapper method implementations
//

#pragma implementation_key(780)
inline _ApplicationPtr _TimeZone::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(781)
inline enum OlObjectClass _TimeZone::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline _NameSpacePtr _TimeZone::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(783)
inline IDispatchPtr _TimeZone::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(784)
inline _bstr_t _TimeZone::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(785)
inline _bstr_t _TimeZone::GetDaylightDesignation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DaylightDesignation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(786)
inline _bstr_t _TimeZone::GetStandardDesignation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StandardDesignation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(787)
inline long _TimeZone::GetBias ( ) {
    long _result = 0;
    HRESULT _hr = get_Bias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline long _TimeZone::GetStandardBias ( ) {
    long _result = 0;
    HRESULT _hr = get_StandardBias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline long _TimeZone::GetDaylightBias ( ) {
    long _result = 0;
    HRESULT _hr = get_DaylightBias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline DATE _TimeZone::GetStandardDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StandardDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline DATE _TimeZone::GetDaylightDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DaylightDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline _bstr_t _TimeZone::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _Application wrapper method implementations
//

#pragma implementation_key(793)
inline _ApplicationPtr _Application::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(794)
inline enum OlObjectClass _Application::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline _NameSpacePtr _Application::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(796)
inline IDispatchPtr _Application::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(797)
inline AssistantPtr _Application::GetAssistant ( ) {
    struct Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AssistantPtr(_result, false);
}

#pragma implementation_key(798)
inline _bstr_t _Application::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(799)
inline _bstr_t _Application::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(800)
inline _ExplorerPtr _Application::ActiveExplorer ( ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_ActiveExplorer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

#pragma implementation_key(801)
inline _InspectorPtr _Application::ActiveInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = raw_ActiveInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(802)
inline IDispatchPtr _Application::CreateItem ( enum OlItemType ItemType ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateItem(ItemType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(803)
inline IDispatchPtr _Application::CreateItemFromTemplate ( _bstr_t TemplatePath, const _variant_t & InFolder ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateItemFromTemplate(TemplatePath, InFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(804)
inline IDispatchPtr _Application::CreateObject ( _bstr_t ObjectName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateObject(ObjectName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(805)
inline _NameSpacePtr _Application::GetNamespace ( _bstr_t Type ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = raw_GetNamespace(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(806)
inline HRESULT _Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(807)
inline COMAddInsPtr _Application::GetCOMAddIns ( ) {
    struct COMAddIns * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return COMAddInsPtr(_result, false);
}

#pragma implementation_key(808)
inline _ExplorersPtr _Application::GetExplorers ( ) {
    struct _Explorers * _result = 0;
    HRESULT _hr = get_Explorers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorersPtr(_result, false);
}

#pragma implementation_key(809)
inline _InspectorsPtr _Application::GetInspectors ( ) {
    struct _Inspectors * _result = 0;
    HRESULT _hr = get_Inspectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorsPtr(_result, false);
}

#pragma implementation_key(810)
inline LanguageSettingsPtr _Application::GetLanguageSettings ( ) {
    struct LanguageSettings * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LanguageSettingsPtr(_result, false);
}

#pragma implementation_key(811)
inline _bstr_t _Application::GetProductCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(812)
inline AnswerWizardPtr _Application::GetAnswerWizard ( ) {
    struct AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnswerWizardPtr(_result, false);
}

#pragma implementation_key(813)
inline enum MsoFeatureInstall _Application::GetFeatureInstall ( ) {
    enum MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline void _Application::PutFeatureInstall ( enum MsoFeatureInstall FeatureInstall ) {
    HRESULT _hr = put_FeatureInstall(FeatureInstall);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline IDispatchPtr _Application::ActiveWindow ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(816)
inline IDispatchPtr _Application::CopyFile ( _bstr_t FilePath, _bstr_t DestFolderPath ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CopyFile(FilePath, DestFolderPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(817)
inline SearchPtr _Application::AdvancedSearch ( _bstr_t Scope, const _variant_t & Filter, const _variant_t & SearchSubFolders, const _variant_t & Tag ) {
    struct Search * _result = 0;
    HRESULT _hr = raw_AdvancedSearch(Scope, Filter, SearchSubFolders, Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchPtr(_result, false);
}

#pragma implementation_key(818)
inline VARIANT_BOOL _Application::IsSearchSynchronous ( _bstr_t LookInFolders ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSearchSynchronous(LookInFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(819)
inline HRESULT _Application::GetNewNickNames ( VARIANT * pvar ) {
    HRESULT _hr = raw_GetNewNickNames(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(820)
inline _RemindersPtr _Application::GetReminders ( ) {
    struct _Reminders * _result = 0;
    HRESULT _hr = get_Reminders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RemindersPtr(_result, false);
}

#pragma implementation_key(821)
inline _bstr_t _Application::GetDefaultProfileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultProfileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(822)
inline VARIANT_BOOL _Application::GetIsTrusted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTrusted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline IDispatchPtr _Application::GetObjectReference ( IDispatch * Item, enum OlReferenceType ReferenceType ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetObjectReference(Item, ReferenceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(824)
inline IAssistancePtr _Application::GetAssistance ( ) {
    struct IAssistance * _result = 0;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAssistancePtr(_result, false);
}

#pragma implementation_key(825)
inline _TimeZonesPtr _Application::GetTimeZones ( ) {
    struct _TimeZones * _result = 0;
    HRESULT _hr = get_TimeZones(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TimeZonesPtr(_result, false);
}

#pragma implementation_key(826)
inline PickerDialogPtr _Application::GetPickerDialog ( ) {
    struct PickerDialog * _result = 0;
    HRESULT _hr = get_PickerDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerDialogPtr(_result, false);
}

#pragma implementation_key(827)
inline HRESULT _Application::RefreshFormRegionDefinition ( _bstr_t RegionName ) {
    HRESULT _hr = raw_RefreshFormRegionDefinition(RegionName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _NameSpace wrapper method implementations
//

#pragma implementation_key(828)
inline _ApplicationPtr _NameSpace::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(829)
inline enum OlObjectClass _NameSpace::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline _NameSpacePtr _NameSpace::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(831)
inline IDispatchPtr _NameSpace::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(832)
inline RecipientPtr _NameSpace::GetCurrentUser ( ) {
    struct Recipient * _result = 0;
    HRESULT _hr = get_CurrentUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(833)
inline _FoldersPtr _NameSpace::GetFolders ( ) {
    struct _Folders * _result = 0;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FoldersPtr(_result, false);
}

#pragma implementation_key(834)
inline _bstr_t _NameSpace::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(835)
inline AddressListsPtr _NameSpace::GetAddressLists ( ) {
    struct AddressLists * _result = 0;
    HRESULT _hr = get_AddressLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressListsPtr(_result, false);
}

#pragma implementation_key(836)
inline RecipientPtr _NameSpace::CreateRecipient ( _bstr_t RecipientName ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_CreateRecipient(RecipientName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(837)
inline MAPIFolderPtr _NameSpace::GetDefaultFolder ( enum OlDefaultFolders FolderType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetDefaultFolder(FolderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(838)
inline MAPIFolderPtr _NameSpace::GetFolderFromID ( _bstr_t EntryIDFolder, const _variant_t & EntryIDStore ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetFolderFromID(EntryIDFolder, EntryIDStore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(839)
inline IDispatchPtr _NameSpace::GetItemFromID ( _bstr_t EntryIDItem, const _variant_t & EntryIDStore ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetItemFromID(EntryIDItem, EntryIDStore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(840)
inline RecipientPtr _NameSpace::GetRecipientFromID ( _bstr_t EntryID ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_GetRecipientFromID(EntryID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(841)
inline MAPIFolderPtr _NameSpace::GetSharedDefaultFolder ( struct Recipient * Recipient, enum OlDefaultFolders FolderType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetSharedDefaultFolder(Recipient, FolderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(842)
inline HRESULT _NameSpace::Logoff ( ) {
    HRESULT _hr = raw_Logoff();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(843)
inline HRESULT _NameSpace::Logon ( const _variant_t & Profile, const _variant_t & Password, const _variant_t & ShowDialog, const _variant_t & NewSession ) {
    HRESULT _hr = raw_Logon(Profile, Password, ShowDialog, NewSession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(844)
inline MAPIFolderPtr _NameSpace::PickFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_PickFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(845)
inline HRESULT _NameSpace::RefreshRemoteHeaders ( ) {
    HRESULT _hr = raw_RefreshRemoteHeaders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(846)
inline SyncObjectsPtr _NameSpace::GetSyncObjects ( ) {
    struct SyncObjects * _result = 0;
    HRESULT _hr = get_SyncObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SyncObjectsPtr(_result, false);
}

#pragma implementation_key(847)
inline HRESULT _NameSpace::AddStore ( const _variant_t & Store ) {
    HRESULT _hr = raw_AddStore(Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(848)
inline HRESULT _NameSpace::RemoveStore ( struct MAPIFolder * Folder ) {
    HRESULT _hr = raw_RemoveStore(Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(849)
inline VARIANT_BOOL _NameSpace::GetOffline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Offline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline HRESULT _NameSpace::Dial ( const _variant_t & ContactItem ) {
    HRESULT _hr = raw_Dial(ContactItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(851)
inline IUnknownPtr _NameSpace::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(852)
inline enum OlExchangeConnectionMode _NameSpace::GetExchangeConnectionMode ( ) {
    enum OlExchangeConnectionMode _result;
    HRESULT _hr = get_ExchangeConnectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline HRESULT _NameSpace::AddStoreEx ( const _variant_t & Store, enum OlStoreType Type ) {
    HRESULT _hr = raw_AddStoreEx(Store, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(854)
inline _AccountsPtr _NameSpace::GetAccounts ( ) {
    struct _Accounts * _result = 0;
    HRESULT _hr = get_Accounts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountsPtr(_result, false);
}

#pragma implementation_key(855)
inline _bstr_t _NameSpace::GetCurrentProfileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentProfileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(856)
inline _StoresPtr _NameSpace::GetStores ( ) {
    struct _Stores * _result = 0;
    HRESULT _hr = get_Stores(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StoresPtr(_result, false);
}

#pragma implementation_key(857)
inline _SelectNamesDialogPtr _NameSpace::GetSelectNamesDialog ( ) {
    struct _SelectNamesDialog * _result = 0;
    HRESULT _hr = raw_GetSelectNamesDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SelectNamesDialogPtr(_result, false);
}

#pragma implementation_key(858)
inline HRESULT _NameSpace::SendAndReceive ( VARIANT_BOOL showProgressDialog ) {
    HRESULT _hr = raw_SendAndReceive(showProgressDialog);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(859)
inline _StorePtr _NameSpace::GetDefaultStore ( ) {
    struct _Store * _result = 0;
    HRESULT _hr = get_DefaultStore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StorePtr(_result, false);
}

#pragma implementation_key(860)
inline AddressEntryPtr _NameSpace::GetAddressEntryFromID ( _bstr_t ID ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetAddressEntryFromID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(861)
inline AddressListPtr _NameSpace::GetGlobalAddressList ( ) {
    struct AddressList * _result = 0;
    HRESULT _hr = raw_GetGlobalAddressList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressListPtr(_result, false);
}

#pragma implementation_key(862)
inline _StorePtr _NameSpace::GetStoreFromID ( _bstr_t ID ) {
    struct _Store * _result = 0;
    HRESULT _hr = raw_GetStoreFromID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StorePtr(_result, false);
}

#pragma implementation_key(863)
inline _CategoriesPtr _NameSpace::GetCategories ( ) {
    struct _Categories * _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CategoriesPtr(_result, false);
}

#pragma implementation_key(864)
inline MAPIFolderPtr _NameSpace::OpenSharedFolder ( _bstr_t Path, const _variant_t & Name, const _variant_t & DownloadAttachments, const _variant_t & UseTTL ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_OpenSharedFolder(Path, Name, DownloadAttachments, UseTTL, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(865)
inline IDispatchPtr _NameSpace::OpenSharedItem ( _bstr_t Path ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OpenSharedItem(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(866)
inline _SharingItemPtr _NameSpace::CreateSharingItem ( const _variant_t & Context, const _variant_t & Provider ) {
    struct _SharingItem * _result = 0;
    HRESULT _hr = raw_CreateSharingItem(Context, Provider, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SharingItemPtr(_result, false);
}

#pragma implementation_key(867)
inline _bstr_t _NameSpace::GetExchangeMailboxServerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExchangeMailboxServerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(868)
inline _bstr_t _NameSpace::GetExchangeMailboxServerVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExchangeMailboxServerVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(869)
inline VARIANT_BOOL _NameSpace::CompareEntryIDs ( _bstr_t FirstEntryID, _bstr_t SecondEntryID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CompareEntryIDs(FirstEntryID, SecondEntryID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline _bstr_t _NameSpace::GetAutoDiscoverXml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoDiscoverXml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(871)
inline enum OlAutoDiscoverConnectionMode _NameSpace::GetAutoDiscoverConnectionMode ( ) {
    enum OlAutoDiscoverConnectionMode _result;
    HRESULT _hr = get_AutoDiscoverConnectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(872)
inline ContactCardPtr _NameSpace::CreateContactCard ( struct AddressEntry * AddressEntry ) {
    struct ContactCard * _result = 0;
    HRESULT _hr = raw_CreateContactCard(AddressEntry, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ContactCardPtr(_result, false);
}

//
// interface Action wrapper method implementations
//

#pragma implementation_key(873)
inline _ApplicationPtr Action::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(874)
inline enum OlObjectClass Action::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline _NameSpacePtr Action::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(876)
inline IDispatchPtr Action::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(877)
inline enum OlActionCopyLike Action::GetCopyLike ( ) {
    enum OlActionCopyLike _result;
    HRESULT _hr = get_CopyLike(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline void Action::PutCopyLike ( enum OlActionCopyLike CopyLike ) {
    HRESULT _hr = put_CopyLike(CopyLike);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline VARIANT_BOOL Action::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void Action::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline _bstr_t Action::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(882)
inline void Action::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline _bstr_t Action::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(884)
inline void Action::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline _bstr_t Action::GetPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(886)
inline void Action::PutPrefix ( _bstr_t Prefix ) {
    HRESULT _hr = put_Prefix(Prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(887)
inline enum OlActionReplyStyle Action::GetReplyStyle ( ) {
    enum OlActionReplyStyle _result;
    HRESULT _hr = get_ReplyStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline void Action::PutReplyStyle ( enum OlActionReplyStyle ReplyStyle ) {
    HRESULT _hr = put_ReplyStyle(ReplyStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline enum OlActionResponseStyle Action::GetResponseStyle ( ) {
    enum OlActionResponseStyle _result;
    HRESULT _hr = get_ResponseStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline void Action::PutResponseStyle ( enum OlActionResponseStyle ResponseStyle ) {
    HRESULT _hr = put_ResponseStyle(ResponseStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(891)
inline enum OlActionShowOn Action::GetShowOn ( ) {
    enum OlActionShowOn _result;
    HRESULT _hr = get_ShowOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(892)
inline void Action::PutShowOn ( enum OlActionShowOn ShowOn ) {
    HRESULT _hr = put_ShowOn(ShowOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(893)
inline HRESULT Action::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(894)
inline IDispatchPtr Action::Execute ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Execute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface Actions wrapper method implementations
//

#pragma implementation_key(895)
inline _ApplicationPtr Actions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(896)
inline enum OlObjectClass Actions::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline _NameSpacePtr Actions::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(898)
inline IDispatchPtr Actions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(899)
inline long Actions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(900)
inline ActionPtr Actions::Item ( const _variant_t & Index ) {
    struct Action * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionPtr(_result, false);
}

#pragma implementation_key(901)
inline ActionPtr Actions::Add ( ) {
    struct Action * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionPtr(_result, false);
}

#pragma implementation_key(902)
inline HRESULT Actions::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Attachment wrapper method implementations
//

#pragma implementation_key(903)
inline _ApplicationPtr Attachment::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(904)
inline enum OlObjectClass Attachment::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline _NameSpacePtr Attachment::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(906)
inline IDispatchPtr Attachment::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(907)
inline _bstr_t Attachment::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(908)
inline void Attachment::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline _bstr_t Attachment::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(910)
inline long Attachment::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline IUnknownPtr Attachment::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(912)
inline _bstr_t Attachment::GetPathName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(913)
inline long Attachment::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void Attachment::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline enum OlAttachmentType Attachment::GetType ( ) {
    enum OlAttachmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline HRESULT Attachment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(917)
inline HRESULT Attachment::SaveAsFile ( _bstr_t Path ) {
    HRESULT _hr = raw_SaveAsFile(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(918)
inline _PropertyAccessorPtr Attachment::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(919)
inline long Attachment::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline enum OlAttachmentBlockLevel Attachment::GetBlockLevel ( ) {
    enum OlAttachmentBlockLevel _result;
    HRESULT _hr = get_BlockLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline _bstr_t Attachment::GetTemporaryFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetTemporaryFilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Attachments wrapper method implementations
//

#pragma implementation_key(922)
inline _ApplicationPtr Attachments::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(923)
inline enum OlObjectClass Attachments::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(924)
inline _NameSpacePtr Attachments::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(925)
inline IDispatchPtr Attachments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(926)
inline long Attachments::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(927)
inline AttachmentPtr Attachments::Item ( const _variant_t & Index ) {
    struct Attachment * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentPtr(_result, false);
}

#pragma implementation_key(928)
inline AttachmentPtr Attachments::Add ( const _variant_t & Source, const _variant_t & Type, const _variant_t & Position, const _variant_t & DisplayName ) {
    struct Attachment * _result = 0;
    HRESULT _hr = raw_Add(Source, Type, Position, DisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentPtr(_result, false);
}

#pragma implementation_key(929)
inline HRESULT Attachments::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _PropertyAccessor wrapper method implementations
//

#pragma implementation_key(930)
inline _ApplicationPtr _PropertyAccessor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(931)
inline enum OlObjectClass _PropertyAccessor::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline _NameSpacePtr _PropertyAccessor::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(933)
inline IDispatchPtr _PropertyAccessor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(934)
inline _variant_t _PropertyAccessor::GetProperty ( _bstr_t SchemaName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(SchemaName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(935)
inline HRESULT _PropertyAccessor::SetProperty ( _bstr_t SchemaName, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(SchemaName, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(936)
inline _variant_t _PropertyAccessor::GetProperties ( const _variant_t & SchemaNames ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperties(SchemaNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(937)
inline _variant_t _PropertyAccessor::SetProperties ( const _variant_t & SchemaNames, const _variant_t & Values ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_SetProperties(SchemaNames, Values, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(938)
inline DATE _PropertyAccessor::UTCToLocalTime ( DATE Value ) {
    DATE _result = 0;
    HRESULT _hr = raw_UTCToLocalTime(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline DATE _PropertyAccessor::LocalTimeToUTC ( DATE Value ) {
    DATE _result = 0;
    HRESULT _hr = raw_LocalTimeToUTC(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(940)
inline _variant_t _PropertyAccessor::StringToBinary ( _bstr_t Value ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_StringToBinary(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(941)
inline _bstr_t _PropertyAccessor::BinaryToString ( const _variant_t & Value ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BinaryToString(Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(942)
inline HRESULT _PropertyAccessor::DeleteProperty ( _bstr_t SchemaName ) {
    HRESULT _hr = raw_DeleteProperty(SchemaName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(943)
inline _variant_t _PropertyAccessor::DeleteProperties ( VARIANT * SchemaNames ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_DeleteProperties(SchemaNames, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface FormDescription wrapper method implementations
//

#pragma implementation_key(944)
inline _ApplicationPtr FormDescription::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(945)
inline enum OlObjectClass FormDescription::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline _NameSpacePtr FormDescription::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(947)
inline IDispatchPtr FormDescription::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(948)
inline _bstr_t FormDescription::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(949)
inline void FormDescription::PutCategory ( _bstr_t Category ) {
    HRESULT _hr = put_Category(Category);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline _bstr_t FormDescription::GetCategorySub ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CategorySub(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(951)
inline void FormDescription::PutCategorySub ( _bstr_t CategorySub ) {
    HRESULT _hr = put_CategorySub(CategorySub);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline _bstr_t FormDescription::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(953)
inline void FormDescription::PutComment ( _bstr_t Comment ) {
    HRESULT _hr = put_Comment(Comment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline _bstr_t FormDescription::GetContactName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContactName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(955)
inline void FormDescription::PutContactName ( _bstr_t ContactName ) {
    HRESULT _hr = put_ContactName(ContactName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline _bstr_t FormDescription::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(957)
inline void FormDescription::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline VARIANT_BOOL FormDescription::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline void FormDescription::PutHidden ( VARIANT_BOOL Hidden ) {
    HRESULT _hr = put_Hidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(960)
inline _bstr_t FormDescription::GetIcon ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(961)
inline void FormDescription::PutIcon ( _bstr_t Icon ) {
    HRESULT _hr = put_Icon(Icon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(962)
inline VARIANT_BOOL FormDescription::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline void FormDescription::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(964)
inline _bstr_t FormDescription::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(965)
inline _bstr_t FormDescription::GetMiniIcon ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(966)
inline void FormDescription::PutMiniIcon ( _bstr_t MiniIcon ) {
    HRESULT _hr = put_MiniIcon(MiniIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(967)
inline _bstr_t FormDescription::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(968)
inline void FormDescription::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(969)
inline _bstr_t FormDescription::GetNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(970)
inline void FormDescription::PutNumber ( _bstr_t Number ) {
    HRESULT _hr = put_Number(Number);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(971)
inline VARIANT_BOOL FormDescription::GetOneOff ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OneOff(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline void FormDescription::PutOneOff ( VARIANT_BOOL OneOff ) {
    HRESULT _hr = put_OneOff(OneOff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline _bstr_t FormDescription::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(974)
inline void FormDescription::PutPassword ( _bstr_t Password ) {
    HRESULT _hr = put_Password(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(975)
inline _bstr_t FormDescription::GetScriptText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScriptText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(976)
inline _bstr_t FormDescription::GetTemplate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Template(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(977)
inline void FormDescription::PutTemplate ( _bstr_t Template ) {
    HRESULT _hr = put_Template(Template);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(978)
inline VARIANT_BOOL FormDescription::GetUseWordMail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseWordMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline void FormDescription::PutUseWordMail ( VARIANT_BOOL UseWordMail ) {
    HRESULT _hr = put_UseWordMail(UseWordMail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(980)
inline _bstr_t FormDescription::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(981)
inline void FormDescription::PutVersion ( _bstr_t Version ) {
    HRESULT _hr = put_Version(Version);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline HRESULT FormDescription::PublishForm ( enum OlFormRegistry Registry, const _variant_t & Folder ) {
    HRESULT _hr = raw_PublishForm(Registry, Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Selection wrapper method implementations
//

#pragma implementation_key(983)
inline _ApplicationPtr Selection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(984)
inline enum OlObjectClass Selection::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(985)
inline _NameSpacePtr Selection::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(986)
inline IDispatchPtr Selection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(987)
inline long Selection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(988)
inline IDispatchPtr Selection::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(989)
inline enum OlSelectionLocation Selection::GetLocation ( ) {
    enum OlSelectionLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline SelectionPtr Selection::GetSelection ( enum OlSelectionContents SelectionContents ) {
    struct Selection * _result = 0;
    HRESULT _hr = raw_GetSelection(SelectionContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

//
// interface _AttachmentSelection wrapper method implementations
//

#pragma implementation_key(991)
inline _ApplicationPtr _AttachmentSelection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(992)
inline enum OlObjectClass _AttachmentSelection::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline _NameSpacePtr _AttachmentSelection::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(994)
inline IDispatchPtr _AttachmentSelection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(995)
inline long _AttachmentSelection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline AttachmentPtr _AttachmentSelection::Item ( const _variant_t & Index ) {
    struct Attachment * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentPtr(_result, false);
}

#pragma implementation_key(997)
inline enum OlSelectionLocation _AttachmentSelection::GetLocation ( ) {
    enum OlSelectionLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline SelectionPtr _AttachmentSelection::GetSelection ( enum OlSelectionContents SelectionContents ) {
    struct Selection * _result = 0;
    HRESULT _hr = raw_GetSelection(SelectionContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

//
// interface _Inspector wrapper method implementations
//

#pragma implementation_key(999)
inline _ApplicationPtr _Inspector::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1000)
inline enum OlObjectClass _Inspector::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline _NameSpacePtr _Inspector::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1002)
inline IDispatchPtr _Inspector::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1003)
inline _CommandBarsPtr _Inspector::GetCommandBars ( ) {
    struct _CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CommandBarsPtr(_result, false);
}

#pragma implementation_key(1004)
inline IDispatchPtr _Inspector::GetCurrentItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CurrentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1005)
inline enum OlEditorType _Inspector::GetEditorType ( ) {
    enum OlEditorType _result;
    HRESULT _hr = get_EditorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline IDispatchPtr _Inspector::GetModifiedFormPages ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ModifiedFormPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1007)
inline HRESULT _Inspector::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1008)
inline HRESULT _Inspector::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1009)
inline HRESULT _Inspector::HideFormPage ( _bstr_t PageName ) {
    HRESULT _hr = raw_HideFormPage(PageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1010)
inline VARIANT_BOOL _Inspector::IsWordMail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsWordMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1011)
inline HRESULT _Inspector::SetCurrentFormPage ( _bstr_t PageName ) {
    HRESULT _hr = raw_SetCurrentFormPage(PageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1012)
inline HRESULT _Inspector::ShowFormPage ( _bstr_t PageName ) {
    HRESULT _hr = raw_ShowFormPage(PageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1013)
inline IDispatchPtr _Inspector::GetHTMLEditor ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_HTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1014)
inline IDispatchPtr _Inspector::GetWordEditor ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_WordEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1015)
inline _bstr_t _Inspector::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1016)
inline long _Inspector::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1017)
inline void _Inspector::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1018)
inline long _Inspector::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline void _Inspector::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1020)
inline long _Inspector::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1021)
inline void _Inspector::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1022)
inline long _Inspector::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1023)
inline void _Inspector::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1024)
inline enum OlWindowState _Inspector::GetWindowState ( ) {
    enum OlWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1025)
inline void _Inspector::PutWindowState ( enum OlWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1026)
inline HRESULT _Inspector::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1027)
inline HRESULT _Inspector::SetControlItemProperty ( IDispatch * Control, _bstr_t PropertyName ) {
    HRESULT _hr = raw_SetControlItemProperty(Control, PropertyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1028)
inline IDispatchPtr _Inspector::NewFormRegion ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_NewFormRegion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1029)
inline IDispatchPtr _Inspector::OpenFormRegion ( _bstr_t Path ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OpenFormRegion(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1030)
inline HRESULT _Inspector::SaveFormRegion ( IDispatch * Page, _bstr_t FileName ) {
    HRESULT _hr = raw_SaveFormRegion(Page, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1031)
inline _AttachmentSelectionPtr _Inspector::GetAttachmentSelection ( ) {
    struct _AttachmentSelection * _result = 0;
    HRESULT _hr = get_AttachmentSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AttachmentSelectionPtr(_result, false);
}

#pragma implementation_key(1032)
inline HRESULT _Inspector::SetSchedulingStartTime ( DATE Start ) {
    HRESULT _hr = raw_SetSchedulingStartTime(Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface UserProperty wrapper method implementations
//

#pragma implementation_key(1033)
inline _ApplicationPtr UserProperty::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1034)
inline enum OlObjectClass UserProperty::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1035)
inline _NameSpacePtr UserProperty::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1036)
inline IDispatchPtr UserProperty::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1037)
inline _bstr_t UserProperty::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1038)
inline void UserProperty::PutFormula ( _bstr_t Formula ) {
    HRESULT _hr = put_Formula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline _bstr_t UserProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1040)
inline enum OlUserPropertyType UserProperty::GetType ( ) {
    enum OlUserPropertyType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline _bstr_t UserProperty::GetValidationFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1042)
inline void UserProperty::PutValidationFormula ( _bstr_t ValidationFormula ) {
    HRESULT _hr = put_ValidationFormula(ValidationFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline _bstr_t UserProperty::GetValidationText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1044)
inline void UserProperty::PutValidationText ( _bstr_t ValidationText ) {
    HRESULT _hr = put_ValidationText(ValidationText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline _variant_t UserProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1046)
inline void UserProperty::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline HRESULT UserProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1048)
inline VARIANT_BOOL UserProperty::GetIsUserProperty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface UserProperties wrapper method implementations
//

#pragma implementation_key(1049)
inline _ApplicationPtr UserProperties::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1050)
inline enum OlObjectClass UserProperties::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1051)
inline _NameSpacePtr UserProperties::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1052)
inline IDispatchPtr UserProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1053)
inline long UserProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline UserPropertyPtr UserProperties::Item ( const _variant_t & Index ) {
    struct UserProperty * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertyPtr(_result, false);
}

#pragma implementation_key(1055)
inline UserPropertyPtr UserProperties::Add ( _bstr_t Name, enum OlUserPropertyType Type, const _variant_t & AddToFolderFields, const _variant_t & DisplayFormat ) {
    struct UserProperty * _result = 0;
    HRESULT _hr = raw_Add(Name, Type, AddToFolderFields, DisplayFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertyPtr(_result, false);
}

#pragma implementation_key(1056)
inline UserPropertyPtr UserProperties::Find ( _bstr_t Name, const _variant_t & Custom ) {
    struct UserProperty * _result = 0;
    HRESULT _hr = raw_Find(Name, Custom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertyPtr(_result, false);
}

#pragma implementation_key(1057)
inline HRESULT UserProperties::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Items wrapper method implementations
//

#pragma implementation_key(1058)
inline _ApplicationPtr _Items::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1059)
inline enum OlObjectClass _Items::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline _NameSpacePtr _Items::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1061)
inline IDispatchPtr _Items::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1062)
inline long _Items::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1063)
inline IDispatchPtr _Items::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1064)
inline IUnknownPtr _Items::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1065)
inline VARIANT_BOOL _Items::GetIncludeRecurrences ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeRecurrences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline void _Items::PutIncludeRecurrences ( VARIANT_BOOL IncludeRecurrences ) {
    HRESULT _hr = put_IncludeRecurrences(IncludeRecurrences);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline IDispatchPtr _Items::Add ( const _variant_t & Type ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1068)
inline IDispatchPtr _Items::Find ( _bstr_t Filter ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Find(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1069)
inline IDispatchPtr _Items::FindNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FindNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1070)
inline IDispatchPtr _Items::GetFirst ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1071)
inline IDispatchPtr _Items::GetLast ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1072)
inline IDispatchPtr _Items::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1073)
inline IDispatchPtr _Items::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1074)
inline HRESULT _Items::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1075)
inline HRESULT _Items::ResetColumns ( ) {
    HRESULT _hr = raw_ResetColumns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline _ItemsPtr _Items::Restrict ( _bstr_t Filter ) {
    struct _Items * _result = 0;
    HRESULT _hr = raw_Restrict(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ItemsPtr(_result, false);
}

#pragma implementation_key(1077)
inline HRESULT _Items::SetColumns ( _bstr_t Columns ) {
    HRESULT _hr = raw_SetColumns(Columns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1078)
inline HRESULT _Items::Sort ( _bstr_t Property, const _variant_t & Descending ) {
    HRESULT _hr = raw_Sort(Property, Descending);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Panes wrapper method implementations
//

#pragma implementation_key(1079)
inline _ApplicationPtr Panes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1080)
inline enum OlObjectClass Panes::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1081)
inline _NameSpacePtr Panes::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1082)
inline IDispatchPtr Panes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1083)
inline long Panes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1084)
inline IDispatchPtr Panes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _NavigationPane wrapper method implementations
//

#pragma implementation_key(1085)
inline _ApplicationPtr _NavigationPane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1086)
inline enum OlObjectClass _NavigationPane::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1087)
inline _NameSpacePtr _NavigationPane::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1088)
inline IDispatchPtr _NavigationPane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1089)
inline VARIANT_BOOL _NavigationPane::GetIsCollapsed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCollapsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1090)
inline void _NavigationPane::PutIsCollapsed ( VARIANT_BOOL IsCollapsed ) {
    HRESULT _hr = put_IsCollapsed(IsCollapsed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1091)
inline _NavigationModulePtr _NavigationPane::GetCurrentModule ( ) {
    struct _NavigationModule * _result = 0;
    HRESULT _hr = get_CurrentModule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationModulePtr(_result, false);
}

#pragma implementation_key(1092)
inline void _NavigationPane::PutRefCurrentModule ( struct _NavigationModule * CurrentModule ) {
    HRESULT _hr = putref_CurrentModule(CurrentModule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline long _NavigationPane::GetDisplayedModuleCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DisplayedModuleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline void _NavigationPane::PutDisplayedModuleCount ( long DisplayedModuleCount ) {
    HRESULT _hr = put_DisplayedModuleCount(DisplayedModuleCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline _NavigationModulesPtr _NavigationPane::GetModules ( ) {
    struct _NavigationModules * _result = 0;
    HRESULT _hr = get_Modules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationModulesPtr(_result, false);
}

//
// interface _NavigationModule wrapper method implementations
//

#pragma implementation_key(1096)
inline _ApplicationPtr _NavigationModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1097)
inline enum OlObjectClass _NavigationModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline _NameSpacePtr _NavigationModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1099)
inline IDispatchPtr _NavigationModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1100)
inline enum OlNavigationModuleType _NavigationModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline _bstr_t _NavigationModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1102)
inline long _NavigationModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1103)
inline void _NavigationModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1104)
inline VARIANT_BOOL _NavigationModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1105)
inline void _NavigationModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _NavigationModules wrapper method implementations
//

#pragma implementation_key(1106)
inline _ApplicationPtr _NavigationModules::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1107)
inline enum OlObjectClass _NavigationModules::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline _NameSpacePtr _NavigationModules::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1109)
inline IDispatchPtr _NavigationModules::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1110)
inline long _NavigationModules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1111)
inline _NavigationModulePtr _NavigationModules::Item ( const _variant_t & Index ) {
    struct _NavigationModule * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationModulePtr(_result, false);
}

#pragma implementation_key(1112)
inline _NavigationModulePtr _NavigationModules::GetNavigationModule ( enum OlNavigationModuleType ModuleType ) {
    struct _NavigationModule * _result = 0;
    HRESULT _hr = raw_GetNavigationModule(ModuleType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationModulePtr(_result, false);
}

//
// interface _Rule wrapper method implementations
//

#pragma implementation_key(1113)
inline _ApplicationPtr _Rule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1114)
inline enum OlObjectClass _Rule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1115)
inline _NameSpacePtr _Rule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1116)
inline IDispatchPtr _Rule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1117)
inline _bstr_t _Rule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1118)
inline void _Rule::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1119)
inline long _Rule::GetExecutionOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ExecutionOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline void _Rule::PutExecutionOrder ( long ExecutionOrder ) {
    HRESULT _hr = put_ExecutionOrder(ExecutionOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1121)
inline enum OlRuleType _Rule::GetRuleType ( ) {
    enum OlRuleType _result;
    HRESULT _hr = get_RuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline VARIANT_BOOL _Rule::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline void _Rule::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline VARIANT_BOOL _Rule::GetIsLocalRule ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLocalRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline HRESULT _Rule::Execute ( const _variant_t & ShowProgress, const _variant_t & Folder, const _variant_t & IncludeSubfolders, const _variant_t & RuleExecuteOption ) {
    HRESULT _hr = raw_Execute(ShowProgress, Folder, IncludeSubfolders, RuleExecuteOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1126)
inline _RuleActionsPtr _Rule::GetActions ( ) {
    struct _RuleActions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionsPtr(_result, false);
}

#pragma implementation_key(1127)
inline _RuleConditionsPtr _Rule::GetConditions ( ) {
    struct _RuleConditions * _result = 0;
    HRESULT _hr = get_Conditions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionsPtr(_result, false);
}

#pragma implementation_key(1128)
inline _RuleConditionsPtr _Rule::GetExceptions ( ) {
    struct _RuleConditions * _result = 0;
    HRESULT _hr = get_Exceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionsPtr(_result, false);
}

//
// interface _Rules wrapper method implementations
//

#pragma implementation_key(1129)
inline _ApplicationPtr _Rules::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1130)
inline enum OlObjectClass _Rules::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1131)
inline _NameSpacePtr _Rules::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1132)
inline IDispatchPtr _Rules::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1133)
inline long _Rules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline _RulePtr _Rules::Item ( const _variant_t & Index ) {
    struct _Rule * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RulePtr(_result, false);
}

#pragma implementation_key(1135)
inline _RulePtr _Rules::Create ( _bstr_t Name, enum OlRuleType RuleType ) {
    struct _Rule * _result = 0;
    HRESULT _hr = raw_Create(Name, RuleType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RulePtr(_result, false);
}

#pragma implementation_key(1136)
inline HRESULT _Rules::Save ( const _variant_t & ShowProgress ) {
    HRESULT _hr = raw_Save(ShowProgress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1137)
inline HRESULT _Rules::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1138)
inline VARIANT_BOOL _Rules::GetIsRssRulesProcessingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRssRulesProcessingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1139)
inline void _Rules::PutIsRssRulesProcessingEnabled ( VARIANT_BOOL IsRssRulesProcessingEnabled ) {
    HRESULT _hr = put_IsRssRulesProcessingEnabled(IsRssRulesProcessingEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _RuleAction wrapper method implementations
//

#pragma implementation_key(1140)
inline _ApplicationPtr _RuleAction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1141)
inline enum OlObjectClass _RuleAction::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline _NameSpacePtr _RuleAction::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1143)
inline IDispatchPtr _RuleAction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1144)
inline VARIANT_BOOL _RuleAction::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1145)
inline void _RuleAction::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1146)
inline enum OlRuleActionType _RuleAction::GetActionType ( ) {
    enum OlRuleActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _RuleActions wrapper method implementations
//

#pragma implementation_key(1147)
inline _ApplicationPtr _RuleActions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1148)
inline enum OlObjectClass _RuleActions::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1149)
inline _NameSpacePtr _RuleActions::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1150)
inline IDispatchPtr _RuleActions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1151)
inline long _RuleActions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline _RuleActionPtr _RuleActions::Item ( long Index ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

#pragma implementation_key(1153)
inline _MoveOrCopyRuleActionPtr _RuleActions::GetCopyToFolder ( ) {
    struct _MoveOrCopyRuleAction * _result = 0;
    HRESULT _hr = get_CopyToFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MoveOrCopyRuleActionPtr(_result, false);
}

#pragma implementation_key(1154)
inline _RuleActionPtr _RuleActions::GetDeletePermanently ( ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = get_DeletePermanently(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

#pragma implementation_key(1155)
inline _RuleActionPtr _RuleActions::GetDelete ( ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = get_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

#pragma implementation_key(1156)
inline _RuleActionPtr _RuleActions::GetDesktopAlert ( ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = get_DesktopAlert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

#pragma implementation_key(1157)
inline _RuleActionPtr _RuleActions::GetNotifyDelivery ( ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = get_NotifyDelivery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

#pragma implementation_key(1158)
inline _RuleActionPtr _RuleActions::GetNotifyRead ( ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = get_NotifyRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

#pragma implementation_key(1159)
inline _RuleActionPtr _RuleActions::GetStop ( ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = get_Stop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

#pragma implementation_key(1160)
inline _MoveOrCopyRuleActionPtr _RuleActions::GetMoveToFolder ( ) {
    struct _MoveOrCopyRuleAction * _result = 0;
    HRESULT _hr = get_MoveToFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MoveOrCopyRuleActionPtr(_result, false);
}

#pragma implementation_key(1161)
inline _SendRuleActionPtr _RuleActions::GetCC ( ) {
    struct _SendRuleAction * _result = 0;
    HRESULT _hr = get_CC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SendRuleActionPtr(_result, false);
}

#pragma implementation_key(1162)
inline _SendRuleActionPtr _RuleActions::GetForward ( ) {
    struct _SendRuleAction * _result = 0;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SendRuleActionPtr(_result, false);
}

#pragma implementation_key(1163)
inline _SendRuleActionPtr _RuleActions::GetForwardAsAttachment ( ) {
    struct _SendRuleAction * _result = 0;
    HRESULT _hr = get_ForwardAsAttachment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SendRuleActionPtr(_result, false);
}

#pragma implementation_key(1164)
inline _SendRuleActionPtr _RuleActions::GetRedirect ( ) {
    struct _SendRuleAction * _result = 0;
    HRESULT _hr = get_Redirect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SendRuleActionPtr(_result, false);
}

#pragma implementation_key(1165)
inline _AssignToCategoryRuleActionPtr _RuleActions::GetAssignToCategory ( ) {
    struct _AssignToCategoryRuleAction * _result = 0;
    HRESULT _hr = get_AssignToCategory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AssignToCategoryRuleActionPtr(_result, false);
}

#pragma implementation_key(1166)
inline _PlaySoundRuleActionPtr _RuleActions::GetPlaySound ( ) {
    struct _PlaySoundRuleAction * _result = 0;
    HRESULT _hr = get_PlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PlaySoundRuleActionPtr(_result, false);
}

#pragma implementation_key(1167)
inline _MarkAsTaskRuleActionPtr _RuleActions::GetMarkAsTask ( ) {
    struct _MarkAsTaskRuleAction * _result = 0;
    HRESULT _hr = get_MarkAsTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MarkAsTaskRuleActionPtr(_result, false);
}

#pragma implementation_key(1168)
inline _NewItemAlertRuleActionPtr _RuleActions::GetNewItemAlert ( ) {
    struct _NewItemAlertRuleAction * _result = 0;
    HRESULT _hr = get_NewItemAlert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NewItemAlertRuleActionPtr(_result, false);
}

#pragma implementation_key(1169)
inline _RuleActionPtr _RuleActions::GetClearCategories ( ) {
    struct _RuleAction * _result = 0;
    HRESULT _hr = get_ClearCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleActionPtr(_result, false);
}

//
// interface _AssignToCategoryRuleAction wrapper method implementations
//

#pragma implementation_key(1170)
inline _ApplicationPtr _AssignToCategoryRuleAction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1171)
inline enum OlObjectClass _AssignToCategoryRuleAction::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline _NameSpacePtr _AssignToCategoryRuleAction::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1173)
inline IDispatchPtr _AssignToCategoryRuleAction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1174)
inline VARIANT_BOOL _AssignToCategoryRuleAction::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1175)
inline void _AssignToCategoryRuleAction::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1176)
inline enum OlRuleActionType _AssignToCategoryRuleAction::GetActionType ( ) {
    enum OlRuleActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1177)
inline _variant_t _AssignToCategoryRuleAction::GetCategories ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1178)
inline void _AssignToCategoryRuleAction::PutCategories ( const _variant_t & Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _PlaySoundRuleAction wrapper method implementations
//

#pragma implementation_key(1179)
inline _ApplicationPtr _PlaySoundRuleAction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1180)
inline enum OlObjectClass _PlaySoundRuleAction::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1181)
inline _NameSpacePtr _PlaySoundRuleAction::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1182)
inline IDispatchPtr _PlaySoundRuleAction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1183)
inline VARIANT_BOOL _PlaySoundRuleAction::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1184)
inline void _PlaySoundRuleAction::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1185)
inline enum OlRuleActionType _PlaySoundRuleAction::GetActionType ( ) {
    enum OlRuleActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline _bstr_t _PlaySoundRuleAction::GetFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1187)
inline void _PlaySoundRuleAction::PutFilePath ( _bstr_t FilePath ) {
    HRESULT _hr = put_FilePath(FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _MarkAsTaskRuleAction wrapper method implementations
//

#pragma implementation_key(1188)
inline _ApplicationPtr _MarkAsTaskRuleAction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1189)
inline enum OlObjectClass _MarkAsTaskRuleAction::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline _NameSpacePtr _MarkAsTaskRuleAction::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1191)
inline IDispatchPtr _MarkAsTaskRuleAction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1192)
inline VARIANT_BOOL _MarkAsTaskRuleAction::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1193)
inline void _MarkAsTaskRuleAction::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1194)
inline enum OlRuleActionType _MarkAsTaskRuleAction::GetActionType ( ) {
    enum OlRuleActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1195)
inline _bstr_t _MarkAsTaskRuleAction::GetFlagTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlagTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1196)
inline void _MarkAsTaskRuleAction::PutFlagTo ( _bstr_t FlagTo ) {
    HRESULT _hr = put_FlagTo(FlagTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1197)
inline enum OlMarkInterval _MarkAsTaskRuleAction::GetMarkInterval ( ) {
    enum OlMarkInterval _result;
    HRESULT _hr = get_MarkInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline void _MarkAsTaskRuleAction::PutMarkInterval ( enum OlMarkInterval MarkInterval ) {
    HRESULT _hr = put_MarkInterval(MarkInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _NewItemAlertRuleAction wrapper method implementations
//

#pragma implementation_key(1199)
inline _ApplicationPtr _NewItemAlertRuleAction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1200)
inline enum OlObjectClass _NewItemAlertRuleAction::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1201)
inline _NameSpacePtr _NewItemAlertRuleAction::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1202)
inline IDispatchPtr _NewItemAlertRuleAction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1203)
inline VARIANT_BOOL _NewItemAlertRuleAction::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline void _NewItemAlertRuleAction::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1205)
inline enum OlRuleActionType _NewItemAlertRuleAction::GetActionType ( ) {
    enum OlRuleActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline _bstr_t _NewItemAlertRuleAction::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1207)
inline void _NewItemAlertRuleAction::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _RuleCondition wrapper method implementations
//

#pragma implementation_key(1208)
inline _ApplicationPtr _RuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1209)
inline enum OlObjectClass _RuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1210)
inline _NameSpacePtr _RuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1211)
inline IDispatchPtr _RuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1212)
inline VARIANT_BOOL _RuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1213)
inline void _RuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1214)
inline enum OlRuleConditionType _RuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _RuleConditions wrapper method implementations
//

#pragma implementation_key(1215)
inline _ApplicationPtr _RuleConditions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1216)
inline enum OlObjectClass _RuleConditions::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1217)
inline _NameSpacePtr _RuleConditions::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1218)
inline IDispatchPtr _RuleConditions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1219)
inline long _RuleConditions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1220)
inline _RuleConditionPtr _RuleConditions::Item ( long Index ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1221)
inline _RuleConditionPtr _RuleConditions::GetCC ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_CC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1222)
inline _RuleConditionPtr _RuleConditions::GetHasAttachment ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_HasAttachment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1223)
inline _ImportanceRuleConditionPtr _RuleConditions::GetImportance ( ) {
    struct _ImportanceRuleCondition * _result = 0;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ImportanceRuleConditionPtr(_result, false);
}

#pragma implementation_key(1224)
inline _RuleConditionPtr _RuleConditions::GetMeetingInviteOrUpdate ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_MeetingInviteOrUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1225)
inline _RuleConditionPtr _RuleConditions::GetNotTo ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_NotTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1226)
inline _RuleConditionPtr _RuleConditions::GetOnlyToMe ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_OnlyToMe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1227)
inline _RuleConditionPtr _RuleConditions::GetToMe ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_ToMe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1228)
inline _RuleConditionPtr _RuleConditions::GetToOrCc ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_ToOrCc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1229)
inline _AccountRuleConditionPtr _RuleConditions::GetAccount ( ) {
    struct _AccountRuleCondition * _result = 0;
    HRESULT _hr = get_Account(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountRuleConditionPtr(_result, false);
}

#pragma implementation_key(1230)
inline _TextRuleConditionPtr _RuleConditions::GetBody ( ) {
    struct _TextRuleCondition * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TextRuleConditionPtr(_result, false);
}

#pragma implementation_key(1231)
inline _TextRuleConditionPtr _RuleConditions::GetBodyOrSubject ( ) {
    struct _TextRuleCondition * _result = 0;
    HRESULT _hr = get_BodyOrSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TextRuleConditionPtr(_result, false);
}

#pragma implementation_key(1232)
inline _CategoryRuleConditionPtr _RuleConditions::GetCategory ( ) {
    struct _CategoryRuleCondition * _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CategoryRuleConditionPtr(_result, false);
}

#pragma implementation_key(1233)
inline _FormNameRuleConditionPtr _RuleConditions::GetFormName ( ) {
    struct _FormNameRuleCondition * _result = 0;
    HRESULT _hr = get_FormName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FormNameRuleConditionPtr(_result, false);
}

#pragma implementation_key(1234)
inline _ToOrFromRuleConditionPtr _RuleConditions::GetFrom ( ) {
    struct _ToOrFromRuleCondition * _result = 0;
    HRESULT _hr = get_From(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ToOrFromRuleConditionPtr(_result, false);
}

#pragma implementation_key(1235)
inline _TextRuleConditionPtr _RuleConditions::GetMessageHeader ( ) {
    struct _TextRuleCondition * _result = 0;
    HRESULT _hr = get_MessageHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TextRuleConditionPtr(_result, false);
}

#pragma implementation_key(1236)
inline _AddressRuleConditionPtr _RuleConditions::GetRecipientAddress ( ) {
    struct _AddressRuleCondition * _result = 0;
    HRESULT _hr = get_RecipientAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AddressRuleConditionPtr(_result, false);
}

#pragma implementation_key(1237)
inline _AddressRuleConditionPtr _RuleConditions::GetSenderAddress ( ) {
    struct _AddressRuleCondition * _result = 0;
    HRESULT _hr = get_SenderAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AddressRuleConditionPtr(_result, false);
}

#pragma implementation_key(1238)
inline _SenderInAddressListRuleConditionPtr _RuleConditions::GetSenderInAddressList ( ) {
    struct _SenderInAddressListRuleCondition * _result = 0;
    HRESULT _hr = get_SenderInAddressList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SenderInAddressListRuleConditionPtr(_result, false);
}

#pragma implementation_key(1239)
inline _TextRuleConditionPtr _RuleConditions::GetSubject ( ) {
    struct _TextRuleCondition * _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TextRuleConditionPtr(_result, false);
}

#pragma implementation_key(1240)
inline _ToOrFromRuleConditionPtr _RuleConditions::GetSentTo ( ) {
    struct _ToOrFromRuleCondition * _result = 0;
    HRESULT _hr = get_SentTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ToOrFromRuleConditionPtr(_result, false);
}

#pragma implementation_key(1241)
inline _RuleConditionPtr _RuleConditions::GetOnLocalMachine ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_OnLocalMachine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1242)
inline _RuleConditionPtr _RuleConditions::GetOnOtherMachine ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_OnOtherMachine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1243)
inline _RuleConditionPtr _RuleConditions::GetAnyCategory ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_AnyCategory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1244)
inline _RuleConditionPtr _RuleConditions::GetFromAnyRSSFeed ( ) {
    struct _RuleCondition * _result = 0;
    HRESULT _hr = get_FromAnyRSSFeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RuleConditionPtr(_result, false);
}

#pragma implementation_key(1245)
inline _FromRssFeedRuleConditionPtr _RuleConditions::GetFromRssFeed ( ) {
    struct _FromRssFeedRuleCondition * _result = 0;
    HRESULT _hr = get_FromRssFeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FromRssFeedRuleConditionPtr(_result, false);
}

//
// interface _ImportanceRuleCondition wrapper method implementations
//

#pragma implementation_key(1246)
inline _ApplicationPtr _ImportanceRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1247)
inline enum OlObjectClass _ImportanceRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1248)
inline _NameSpacePtr _ImportanceRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1249)
inline IDispatchPtr _ImportanceRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1250)
inline VARIANT_BOOL _ImportanceRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1251)
inline void _ImportanceRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1252)
inline enum OlRuleConditionType _ImportanceRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1253)
inline enum OlImportance _ImportanceRuleCondition::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1254)
inline void _ImportanceRuleCondition::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _AccountRuleCondition wrapper method implementations
//

#pragma implementation_key(1255)
inline _ApplicationPtr _AccountRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1256)
inline enum OlObjectClass _AccountRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1257)
inline _NameSpacePtr _AccountRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1258)
inline IDispatchPtr _AccountRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1259)
inline VARIANT_BOOL _AccountRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1260)
inline void _AccountRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1261)
inline enum OlRuleConditionType _AccountRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1262)
inline _AccountPtr _AccountRuleCondition::GetAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_Account(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

#pragma implementation_key(1263)
inline void _AccountRuleCondition::PutAccount ( struct _Account * Account ) {
    HRESULT _hr = put_Account(Account);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _TextRuleCondition wrapper method implementations
//

#pragma implementation_key(1264)
inline _ApplicationPtr _TextRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1265)
inline enum OlObjectClass _TextRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1266)
inline _NameSpacePtr _TextRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1267)
inline IDispatchPtr _TextRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1268)
inline VARIANT_BOOL _TextRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline void _TextRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline enum OlRuleConditionType _TextRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline _variant_t _TextRuleCondition::GetText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1272)
inline void _TextRuleCondition::PutText ( const _variant_t & Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _CategoryRuleCondition wrapper method implementations
//

#pragma implementation_key(1273)
inline _ApplicationPtr _CategoryRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1274)
inline enum OlObjectClass _CategoryRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1275)
inline _NameSpacePtr _CategoryRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1276)
inline IDispatchPtr _CategoryRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1277)
inline VARIANT_BOOL _CategoryRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1278)
inline void _CategoryRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1279)
inline enum OlRuleConditionType _CategoryRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1280)
inline _variant_t _CategoryRuleCondition::GetCategories ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1281)
inline void _CategoryRuleCondition::PutCategories ( const _variant_t & Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _FormNameRuleCondition wrapper method implementations
//

#pragma implementation_key(1282)
inline _ApplicationPtr _FormNameRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1283)
inline enum OlObjectClass _FormNameRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline _NameSpacePtr _FormNameRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1285)
inline IDispatchPtr _FormNameRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1286)
inline VARIANT_BOOL _FormNameRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline void _FormNameRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline enum OlRuleConditionType _FormNameRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1289)
inline _variant_t _FormNameRuleCondition::GetFormName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FormName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1290)
inline void _FormNameRuleCondition::PutFormName ( const _variant_t & FormName ) {
    HRESULT _hr = put_FormName(FormName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _AddressRuleCondition wrapper method implementations
//

#pragma implementation_key(1291)
inline _ApplicationPtr _AddressRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1292)
inline enum OlObjectClass _AddressRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1293)
inline _NameSpacePtr _AddressRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1294)
inline IDispatchPtr _AddressRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1295)
inline VARIANT_BOOL _AddressRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline void _AddressRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1297)
inline enum OlRuleConditionType _AddressRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1298)
inline _variant_t _AddressRuleCondition::GetAddress ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1299)
inline void _AddressRuleCondition::PutAddress ( const _variant_t & Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _FromRssFeedRuleCondition wrapper method implementations
//

#pragma implementation_key(1300)
inline _ApplicationPtr _FromRssFeedRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1301)
inline enum OlObjectClass _FromRssFeedRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline _NameSpacePtr _FromRssFeedRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1303)
inline IDispatchPtr _FromRssFeedRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1304)
inline VARIANT_BOOL _FromRssFeedRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1305)
inline void _FromRssFeedRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1306)
inline enum OlRuleConditionType _FromRssFeedRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1307)
inline _variant_t _FromRssFeedRuleCondition::GetFromRssFeed ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FromRssFeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1308)
inline void _FromRssFeedRuleCondition::PutFromRssFeed ( const _variant_t & FromRssFeed ) {
    HRESULT _hr = put_FromRssFeed(FromRssFeed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Category wrapper method implementations
//

#pragma implementation_key(1309)
inline _ApplicationPtr _Category::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1310)
inline enum OlObjectClass _Category::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1311)
inline _NameSpacePtr _Category::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1312)
inline IDispatchPtr _Category::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1313)
inline _bstr_t _Category::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1314)
inline void _Category::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1315)
inline enum OlCategoryColor _Category::GetColor ( ) {
    enum OlCategoryColor _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1316)
inline void _Category::PutColor ( enum OlCategoryColor Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1317)
inline enum OlCategoryShortcutKey _Category::GetShortcutKey ( ) {
    enum OlCategoryShortcutKey _result;
    HRESULT _hr = get_ShortcutKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1318)
inline void _Category::PutShortcutKey ( enum OlCategoryShortcutKey ShortcutKey ) {
    HRESULT _hr = put_ShortcutKey(ShortcutKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1319)
inline _bstr_t _Category::GetCategoryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CategoryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1320)
inline OLE_COLOR _Category::GetCategoryBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CategoryBorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1321)
inline OLE_COLOR _Category::GetCategoryGradientTopColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CategoryGradientTopColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1322)
inline OLE_COLOR _Category::GetCategoryGradientBottomColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_CategoryGradientBottomColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Categories wrapper method implementations
//

#pragma implementation_key(1323)
inline _ApplicationPtr _Categories::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1324)
inline enum OlObjectClass _Categories::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1325)
inline _NameSpacePtr _Categories::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1326)
inline IDispatchPtr _Categories::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1327)
inline long _Categories::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1328)
inline _CategoryPtr _Categories::Item ( const _variant_t & Index ) {
    struct _Category * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CategoryPtr(_result, false);
}

#pragma implementation_key(1329)
inline _CategoryPtr _Categories::Add ( _bstr_t Name, const _variant_t & Color, const _variant_t & ShortcutKey ) {
    struct _Category * _result = 0;
    HRESULT _hr = raw_Add(Name, Color, ShortcutKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CategoryPtr(_result, false);
}

#pragma implementation_key(1330)
inline HRESULT _Categories::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _PreviewPane wrapper method implementations
//

#pragma implementation_key(1331)
inline _ApplicationPtr _PreviewPane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1332)
inline enum OlObjectClass _PreviewPane::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline _NameSpacePtr _PreviewPane::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1334)
inline IDispatchPtr _PreviewPane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1335)
inline IDispatchPtr _PreviewPane::GetWordEditor ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_WordEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface View wrapper method implementations
//

#pragma implementation_key(1336)
inline _ApplicationPtr View::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1337)
inline enum OlObjectClass View::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline _NameSpacePtr View::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1339)
inline IDispatchPtr View::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1340)
inline HRESULT View::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1341)
inline ViewPtr View::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1342)
inline HRESULT View::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1343)
inline HRESULT View::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1344)
inline HRESULT View::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1345)
inline _bstr_t View::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline void View::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1347)
inline VARIANT_BOOL View::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1348)
inline void View::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1349)
inline _bstr_t View::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1350)
inline void View::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1351)
inline enum OlViewSaveOption View::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1352)
inline VARIANT_BOOL View::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1353)
inline enum OlViewType View::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1354)
inline _bstr_t View::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1355)
inline void View::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1356)
inline HRESULT View::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1357)
inline _bstr_t View::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1358)
inline void View::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Views wrapper method implementations
//

#pragma implementation_key(1359)
inline _ApplicationPtr _Views::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1360)
inline enum OlObjectClass _Views::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1361)
inline _NameSpacePtr _Views::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1362)
inline IDispatchPtr _Views::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1363)
inline long _Views::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1364)
inline ViewPtr _Views::Item ( const _variant_t & Index ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1365)
inline ViewPtr _Views::Add ( _bstr_t Name, enum OlViewType ViewType, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Add(Name, ViewType, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1366)
inline HRESULT _Views::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1367)
inline IUnknownPtr _Views::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _StorageItem wrapper method implementations
//

#pragma implementation_key(1368)
inline _ApplicationPtr _StorageItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1369)
inline enum OlObjectClass _StorageItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1370)
inline _NameSpacePtr _StorageItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1371)
inline IDispatchPtr _StorageItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1372)
inline DATE _StorageItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline DATE _StorageItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1374)
inline _bstr_t _StorageItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1375)
inline HRESULT _StorageItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1376)
inline HRESULT _StorageItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1377)
inline _bstr_t _StorageItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1378)
inline void _StorageItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1379)
inline AttachmentsPtr _StorageItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1380)
inline long _StorageItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1381)
inline UserPropertiesPtr _StorageItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1382)
inline _PropertyAccessorPtr _StorageItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(1383)
inline _bstr_t _StorageItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1384)
inline void _StorageItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1385)
inline _bstr_t _StorageItem::GetCreator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1386)
inline void _StorageItem::PutCreator ( _bstr_t Creator ) {
    HRESULT _hr = put_Creator(Creator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Table wrapper method implementations
//

#pragma implementation_key(1387)
inline _ApplicationPtr _Table::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1388)
inline enum OlObjectClass _Table::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1389)
inline _NameSpacePtr _Table::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1390)
inline IDispatchPtr _Table::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1391)
inline _RowPtr _Table::FindRow ( _bstr_t Filter ) {
    struct _Row * _result = 0;
    HRESULT _hr = raw_FindRow(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RowPtr(_result, false);
}

#pragma implementation_key(1392)
inline _RowPtr _Table::FindNextRow ( ) {
    struct _Row * _result = 0;
    HRESULT _hr = raw_FindNextRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RowPtr(_result, false);
}

#pragma implementation_key(1393)
inline _variant_t _Table::GetArray ( long MaxRows ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetArray(MaxRows, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1394)
inline _RowPtr _Table::GetNextRow ( ) {
    struct _Row * _result = 0;
    HRESULT _hr = raw_GetNextRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RowPtr(_result, false);
}

#pragma implementation_key(1395)
inline long _Table::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetRowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline HRESULT _Table::MoveToStart ( ) {
    HRESULT _hr = raw_MoveToStart();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1397)
inline _TablePtr _Table::Restrict ( _bstr_t Filter ) {
    struct _Table * _result = 0;
    HRESULT _hr = raw_Restrict(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TablePtr(_result, false);
}

#pragma implementation_key(1398)
inline HRESULT _Table::Sort ( _bstr_t SortProperty, const _variant_t & Descending ) {
    HRESULT _hr = raw_Sort(SortProperty, Descending);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1399)
inline _ColumnsPtr _Table::GetColumns ( ) {
    struct _Columns * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ColumnsPtr(_result, false);
}

#pragma implementation_key(1400)
inline VARIANT_BOOL _Table::GetEndOfTable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EndOfTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Row wrapper method implementations
//

#pragma implementation_key(1401)
inline _ApplicationPtr _Row::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1402)
inline enum OlObjectClass _Row::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1403)
inline _NameSpacePtr _Row::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1404)
inline IDispatchPtr _Row::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1405)
inline _bstr_t _Row::BinaryToString ( const _variant_t & Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BinaryToString(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1406)
inline _variant_t _Row::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1407)
inline _variant_t _Row::Item ( const _variant_t & Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1408)
inline DATE _Row::LocalTimeToUTC ( const _variant_t & Index ) {
    DATE _result = 0;
    HRESULT _hr = raw_LocalTimeToUTC(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1409)
inline DATE _Row::UTCToLocalTime ( const _variant_t & Index ) {
    DATE _result = 0;
    HRESULT _hr = raw_UTCToLocalTime(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Column wrapper method implementations
//

#pragma implementation_key(1410)
inline _ApplicationPtr _Column::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1411)
inline enum OlObjectClass _Column::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1412)
inline _NameSpacePtr _Column::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1413)
inline IDispatchPtr _Column::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1414)
inline _bstr_t _Column::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _Columns wrapper method implementations
//

#pragma implementation_key(1415)
inline _ApplicationPtr _Columns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1416)
inline enum OlObjectClass _Columns::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline _NameSpacePtr _Columns::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1418)
inline IDispatchPtr _Columns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1419)
inline long _Columns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1420)
inline _ColumnPtr _Columns::Item ( const _variant_t & Index ) {
    struct _Column * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ColumnPtr(_result, false);
}

#pragma implementation_key(1421)
inline _ColumnPtr _Columns::Add ( _bstr_t Name ) {
    struct _Column * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ColumnPtr(_result, false);
}

#pragma implementation_key(1422)
inline HRESULT _Columns::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1423)
inline HRESULT _Columns::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Link wrapper method implementations
//

#pragma implementation_key(1424)
inline _ApplicationPtr Link::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1425)
inline enum OlObjectClass Link::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1426)
inline _NameSpacePtr Link::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1427)
inline IDispatchPtr Link::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1428)
inline _bstr_t Link::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1429)
inline enum OlObjectClass Link::GetType ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1430)
inline IDispatchPtr Link::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface Links wrapper method implementations
//

#pragma implementation_key(1431)
inline _ApplicationPtr Links::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1432)
inline enum OlObjectClass Links::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1433)
inline _NameSpacePtr Links::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1434)
inline IDispatchPtr Links::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1435)
inline long Links::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1436)
inline LinkPtr Links::Item ( const _variant_t & Index ) {
    struct Link * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkPtr(_result, false);
}

#pragma implementation_key(1437)
inline LinkPtr Links::Add ( IDispatch * Item ) {
    struct Link * _result = 0;
    HRESULT _hr = raw_Add(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkPtr(_result, false);
}

#pragma implementation_key(1438)
inline HRESULT Links::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ItemProperty wrapper method implementations
//

#pragma implementation_key(1439)
inline _ApplicationPtr ItemProperty::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1440)
inline enum OlObjectClass ItemProperty::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1441)
inline _NameSpacePtr ItemProperty::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1442)
inline IDispatchPtr ItemProperty::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1443)
inline _bstr_t ItemProperty::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1444)
inline void ItemProperty::PutFormula ( _bstr_t Formula ) {
    HRESULT _hr = put_Formula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1445)
inline _bstr_t ItemProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1446)
inline enum OlUserPropertyType ItemProperty::GetType ( ) {
    enum OlUserPropertyType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1447)
inline _bstr_t ItemProperty::GetValidationFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1448)
inline void ItemProperty::PutValidationFormula ( _bstr_t ValidationFormula ) {
    HRESULT _hr = put_ValidationFormula(ValidationFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1449)
inline _bstr_t ItemProperty::GetValidationText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1450)
inline void ItemProperty::PutValidationText ( _bstr_t ValidationText ) {
    HRESULT _hr = put_ValidationText(ValidationText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1451)
inline _variant_t ItemProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1452)
inline void ItemProperty::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1453)
inline HRESULT ItemProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1454)
inline VARIANT_BOOL ItemProperty::GetIsUserProperty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ItemProperties wrapper method implementations
//

#pragma implementation_key(1455)
inline _ApplicationPtr ItemProperties::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1456)
inline enum OlObjectClass ItemProperties::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1457)
inline _NameSpacePtr ItemProperties::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1458)
inline IDispatchPtr ItemProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1459)
inline long ItemProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1460)
inline ItemPropertyPtr ItemProperties::Item ( const _variant_t & Index ) {
    struct ItemProperty * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertyPtr(_result, false);
}

#pragma implementation_key(1461)
inline IUnknownPtr ItemProperties::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1462)
inline ItemPropertyPtr ItemProperties::Add ( _bstr_t Name, enum OlUserPropertyType Type, const _variant_t & AddToFolderFields, const _variant_t & DisplayFormat ) {
    struct ItemProperty * _result = 0;
    HRESULT _hr = raw_Add(Name, Type, AddToFolderFields, DisplayFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertyPtr(_result, false);
}

#pragma implementation_key(1463)
inline HRESULT ItemProperties::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Conflict wrapper method implementations
//

#pragma implementation_key(1464)
inline _ApplicationPtr Conflict::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1465)
inline enum OlObjectClass Conflict::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1466)
inline _NameSpacePtr Conflict::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1467)
inline IDispatchPtr Conflict::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1468)
inline IDispatchPtr Conflict::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1469)
inline _bstr_t Conflict::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1470)
inline enum OlObjectClass Conflict::GetType ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Conflicts wrapper method implementations
//

#pragma implementation_key(1471)
inline _ApplicationPtr Conflicts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1472)
inline enum OlObjectClass Conflicts::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline _NameSpacePtr Conflicts::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1474)
inline IDispatchPtr Conflicts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1475)
inline long Conflicts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1476)
inline ConflictPtr Conflicts::Item ( const _variant_t & Index ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(1477)
inline ConflictPtr Conflicts::GetFirst ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(1478)
inline ConflictPtr Conflicts::GetLast ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(1479)
inline ConflictPtr Conflicts::GetNext ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(1480)
inline ConflictPtr Conflicts::GetPrevious ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

//
// interface _SimpleItems wrapper method implementations
//

#pragma implementation_key(1481)
inline _ApplicationPtr _SimpleItems::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1482)
inline enum OlObjectClass _SimpleItems::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1483)
inline _NameSpacePtr _SimpleItems::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1484)
inline IDispatchPtr _SimpleItems::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1485)
inline long _SimpleItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1486)
inline IDispatchPtr _SimpleItems::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _UserDefinedProperty wrapper method implementations
//

#pragma implementation_key(1487)
inline _ApplicationPtr _UserDefinedProperty::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1488)
inline enum OlObjectClass _UserDefinedProperty::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline _NameSpacePtr _UserDefinedProperty::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1490)
inline IDispatchPtr _UserDefinedProperty::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1491)
inline _bstr_t _UserDefinedProperty::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1492)
inline _bstr_t _UserDefinedProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1493)
inline enum OlUserPropertyType _UserDefinedProperty::GetType ( ) {
    enum OlUserPropertyType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline long _UserDefinedProperty::GetDisplayFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_DisplayFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1495)
inline HRESULT _UserDefinedProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _UserDefinedProperties wrapper method implementations
//

#pragma implementation_key(1496)
inline _ApplicationPtr _UserDefinedProperties::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1497)
inline enum OlObjectClass _UserDefinedProperties::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1498)
inline _NameSpacePtr _UserDefinedProperties::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1499)
inline IDispatchPtr _UserDefinedProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1500)
inline long _UserDefinedProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1501)
inline _UserDefinedPropertyPtr _UserDefinedProperties::Item ( const _variant_t & Index ) {
    struct _UserDefinedProperty * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _UserDefinedPropertyPtr(_result, false);
}

#pragma implementation_key(1502)
inline _UserDefinedPropertyPtr _UserDefinedProperties::Add ( _bstr_t Name, enum OlUserPropertyType Type, const _variant_t & DisplayFormat, const _variant_t & Formula ) {
    struct _UserDefinedProperty * _result = 0;
    HRESULT _hr = raw_Add(Name, Type, DisplayFormat, Formula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _UserDefinedPropertyPtr(_result, false);
}

#pragma implementation_key(1503)
inline _UserDefinedPropertyPtr _UserDefinedProperties::Find ( _bstr_t Name ) {
    struct _UserDefinedProperty * _result = 0;
    HRESULT _hr = raw_Find(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _UserDefinedPropertyPtr(_result, false);
}

#pragma implementation_key(1504)
inline HRESULT _UserDefinedProperties::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1505)
inline HRESULT _UserDefinedProperties::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _SyncObject wrapper method implementations
//

#pragma implementation_key(1506)
inline _ApplicationPtr _SyncObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1507)
inline enum OlObjectClass _SyncObject::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1508)
inline _NameSpacePtr _SyncObject::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1509)
inline IDispatchPtr _SyncObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1510)
inline _bstr_t _SyncObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1511)
inline HRESULT _SyncObject::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1512)
inline HRESULT _SyncObject::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SyncObjects wrapper method implementations
//

#pragma implementation_key(1513)
inline _ApplicationPtr SyncObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1514)
inline enum OlObjectClass SyncObjects::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1515)
inline _NameSpacePtr SyncObjects::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1516)
inline IDispatchPtr SyncObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1517)
inline long SyncObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1518)
inline _SyncObjectPtr SyncObjects::Item ( const _variant_t & Index ) {
    struct _SyncObject * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SyncObjectPtr(_result, false);
}

#pragma implementation_key(1519)
inline _SyncObjectPtr SyncObjects::GetAppFolders ( ) {
    struct _SyncObject * _result = 0;
    HRESULT _hr = get_AppFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SyncObjectPtr(_result, false);
}

//
// interface _Inspectors wrapper method implementations
//

#pragma implementation_key(1520)
inline _ApplicationPtr _Inspectors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1521)
inline enum OlObjectClass _Inspectors::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline _NameSpacePtr _Inspectors::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1523)
inline IDispatchPtr _Inspectors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1524)
inline long _Inspectors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1525)
inline _InspectorPtr _Inspectors::Item ( const _variant_t & Index ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1526)
inline _InspectorPtr _Inspectors::Add ( IDispatch * Item ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = raw_Add(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

//
// interface _Results wrapper method implementations
//

#pragma implementation_key(1527)
inline _ApplicationPtr _Results::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1528)
inline enum OlObjectClass _Results::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1529)
inline _NameSpacePtr _Results::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1530)
inline IDispatchPtr _Results::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1531)
inline long _Results::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1532)
inline IDispatchPtr _Results::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1533)
inline IUnknownPtr _Results::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1534)
inline IDispatchPtr _Results::GetFirst ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1535)
inline IDispatchPtr _Results::GetLast ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1536)
inline IDispatchPtr _Results::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1537)
inline IDispatchPtr _Results::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1538)
inline HRESULT _Results::ResetColumns ( ) {
    HRESULT _hr = raw_ResetColumns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1539)
inline HRESULT _Results::SetColumns ( _bstr_t Columns ) {
    HRESULT _hr = raw_SetColumns(Columns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1540)
inline HRESULT _Results::Sort ( _bstr_t Property, const _variant_t & Descending ) {
    HRESULT _hr = raw_Sort(Property, Descending);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1541)
inline enum OlItemType _Results::GetDefaultItemType ( ) {
    enum OlItemType _result;
    HRESULT _hr = get_DefaultItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1542)
inline void _Results::PutDefaultItemType ( enum OlItemType DefaultItemType ) {
    HRESULT _hr = put_DefaultItemType(DefaultItemType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Reminder wrapper method implementations
//

#pragma implementation_key(1543)
inline _ApplicationPtr _Reminder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1544)
inline enum OlObjectClass _Reminder::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1545)
inline _NameSpacePtr _Reminder::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1546)
inline IDispatchPtr _Reminder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1547)
inline HRESULT _Reminder::Dismiss ( ) {
    HRESULT _hr = raw_Dismiss();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1548)
inline HRESULT _Reminder::Snooze ( const _variant_t & SnoozeTime ) {
    HRESULT _hr = raw_Snooze(SnoozeTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1549)
inline _bstr_t _Reminder::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1550)
inline VARIANT_BOOL _Reminder::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1551)
inline IDispatchPtr _Reminder::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1552)
inline DATE _Reminder::GetNextReminderDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_NextReminderDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1553)
inline DATE _Reminder::GetOriginalReminderDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_OriginalReminderDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Reminders wrapper method implementations
//

#pragma implementation_key(1554)
inline _ApplicationPtr _Reminders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1555)
inline enum OlObjectClass _Reminders::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1556)
inline _NameSpacePtr _Reminders::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1557)
inline IDispatchPtr _Reminders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1558)
inline long _Reminders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1559)
inline _ReminderPtr _Reminders::Item ( const _variant_t & Index ) {
    struct _Reminder * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ReminderPtr(_result, false);
}

#pragma implementation_key(1560)
inline HRESULT _Reminders::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1561)
inline IUnknownPtr _Reminders::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _TimeZones wrapper method implementations
//

#pragma implementation_key(1562)
inline _ApplicationPtr _TimeZones::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1563)
inline enum OlObjectClass _TimeZones::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1564)
inline _NameSpacePtr _TimeZones::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1565)
inline IDispatchPtr _TimeZones::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1566)
inline long _TimeZones::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1567)
inline _TimeZonePtr _TimeZones::Item ( const _variant_t & Index ) {
    struct _TimeZone * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TimeZonePtr(_result, false);
}

#pragma implementation_key(1568)
inline DATE _TimeZones::ConvertTime ( DATE SourceDateTime, struct _TimeZone * SourceTimeZone, struct _TimeZone * DestinationTimeZone ) {
    DATE _result = 0;
    HRESULT _hr = raw_ConvertTime(SourceDateTime, SourceTimeZone, DestinationTimeZone, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1569)
inline _TimeZonePtr _TimeZones::GetCurrentTimeZone ( ) {
    struct _TimeZone * _result = 0;
    HRESULT _hr = get_CurrentTimeZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TimeZonePtr(_result, false);
}

//
// interface PropertyPages wrapper method implementations
//

#pragma implementation_key(1570)
inline _ApplicationPtr PropertyPages::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1571)
inline enum OlObjectClass PropertyPages::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1572)
inline _NameSpacePtr PropertyPages::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1573)
inline IDispatchPtr PropertyPages::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1574)
inline long PropertyPages::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline IDispatchPtr PropertyPages::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1576)
inline HRESULT PropertyPages::Add ( const _variant_t & Page, _bstr_t Title ) {
    HRESULT _hr = raw_Add(Page, Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1577)
inline HRESULT PropertyPages::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Exception wrapper method implementations
//

#pragma implementation_key(1578)
inline _ApplicationPtr Exception::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1579)
inline enum OlObjectClass Exception::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1580)
inline _NameSpacePtr Exception::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1581)
inline IDispatchPtr Exception::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1582)
inline _AppointmentItemPtr Exception::GetAppointmentItem ( ) {
    struct _AppointmentItem * _result = 0;
    HRESULT _hr = get_AppointmentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AppointmentItemPtr(_result, false);
}

#pragma implementation_key(1583)
inline VARIANT_BOOL Exception::GetDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Deleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1584)
inline DATE Exception::GetOriginalDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_OriginalDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline ItemPropertiesPtr Exception::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

//
// interface Exceptions wrapper method implementations
//

#pragma implementation_key(1586)
inline _ApplicationPtr Exceptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1587)
inline enum OlObjectClass Exceptions::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1588)
inline _NameSpacePtr Exceptions::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1589)
inline IDispatchPtr Exceptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1590)
inline long Exceptions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1591)
inline ExceptionPtr Exceptions::Item ( const _variant_t & Index ) {
    struct Exception * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExceptionPtr(_result, false);
}

//
// interface RecurrencePattern wrapper method implementations
//

#pragma implementation_key(1592)
inline _ApplicationPtr RecurrencePattern::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1593)
inline enum OlObjectClass RecurrencePattern::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1594)
inline _NameSpacePtr RecurrencePattern::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1595)
inline IDispatchPtr RecurrencePattern::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1596)
inline long RecurrencePattern::GetDayOfMonth ( ) {
    long _result = 0;
    HRESULT _hr = get_DayOfMonth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1597)
inline void RecurrencePattern::PutDayOfMonth ( long DayOfMonth ) {
    HRESULT _hr = put_DayOfMonth(DayOfMonth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1598)
inline enum OlDaysOfWeek RecurrencePattern::GetDayOfWeekMask ( ) {
    enum OlDaysOfWeek _result;
    HRESULT _hr = get_DayOfWeekMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1599)
inline void RecurrencePattern::PutDayOfWeekMask ( enum OlDaysOfWeek DayOfWeekMask ) {
    HRESULT _hr = put_DayOfWeekMask(DayOfWeekMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1600)
inline long RecurrencePattern::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1601)
inline void RecurrencePattern::PutDuration ( long Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1602)
inline DATE RecurrencePattern::GetEndTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1603)
inline void RecurrencePattern::PutEndTime ( DATE EndTime ) {
    HRESULT _hr = put_EndTime(EndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1604)
inline ExceptionsPtr RecurrencePattern::GetExceptions ( ) {
    struct Exceptions * _result = 0;
    HRESULT _hr = get_Exceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExceptionsPtr(_result, false);
}

#pragma implementation_key(1605)
inline long RecurrencePattern::GetInstance ( ) {
    long _result = 0;
    HRESULT _hr = get_Instance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1606)
inline void RecurrencePattern::PutInstance ( long Instance ) {
    HRESULT _hr = put_Instance(Instance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1607)
inline long RecurrencePattern::GetInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1608)
inline void RecurrencePattern::PutInterval ( long Interval ) {
    HRESULT _hr = put_Interval(Interval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1609)
inline long RecurrencePattern::GetMonthOfYear ( ) {
    long _result = 0;
    HRESULT _hr = get_MonthOfYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline void RecurrencePattern::PutMonthOfYear ( long MonthOfYear ) {
    HRESULT _hr = put_MonthOfYear(MonthOfYear);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1611)
inline VARIANT_BOOL RecurrencePattern::GetNoEndDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoEndDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1612)
inline void RecurrencePattern::PutNoEndDate ( VARIANT_BOOL NoEndDate ) {
    HRESULT _hr = put_NoEndDate(NoEndDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1613)
inline long RecurrencePattern::GetOccurrences ( ) {
    long _result = 0;
    HRESULT _hr = get_Occurrences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1614)
inline void RecurrencePattern::PutOccurrences ( long Occurrences ) {
    HRESULT _hr = put_Occurrences(Occurrences);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1615)
inline DATE RecurrencePattern::GetPatternEndDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_PatternEndDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1616)
inline void RecurrencePattern::PutPatternEndDate ( DATE PatternEndDate ) {
    HRESULT _hr = put_PatternEndDate(PatternEndDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1617)
inline DATE RecurrencePattern::GetPatternStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_PatternStartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1618)
inline void RecurrencePattern::PutPatternStartDate ( DATE PatternStartDate ) {
    HRESULT _hr = put_PatternStartDate(PatternStartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1619)
inline enum OlRecurrenceType RecurrencePattern::GetRecurrenceType ( ) {
    enum OlRecurrenceType _result;
    HRESULT _hr = get_RecurrenceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1620)
inline void RecurrencePattern::PutRecurrenceType ( enum OlRecurrenceType RecurrenceType ) {
    HRESULT _hr = put_RecurrenceType(RecurrenceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1621)
inline VARIANT_BOOL RecurrencePattern::GetRegenerate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Regenerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1622)
inline void RecurrencePattern::PutRegenerate ( VARIANT_BOOL Regenerate ) {
    HRESULT _hr = put_Regenerate(Regenerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1623)
inline DATE RecurrencePattern::GetStartTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1624)
inline void RecurrencePattern::PutStartTime ( DATE StartTime ) {
    HRESULT _hr = put_StartTime(StartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1625)
inline _AppointmentItemPtr RecurrencePattern::GetOccurrence ( DATE StartDate ) {
    struct _AppointmentItem * _result = 0;
    HRESULT _hr = raw_GetOccurrence(StartDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AppointmentItemPtr(_result, false);
}

//
// interface OutlookBarShortcut wrapper method implementations
//

#pragma implementation_key(1626)
inline _ApplicationPtr OutlookBarShortcut::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1627)
inline enum OlObjectClass OutlookBarShortcut::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1628)
inline _NameSpacePtr OutlookBarShortcut::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1629)
inline IDispatchPtr OutlookBarShortcut::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1630)
inline _bstr_t OutlookBarShortcut::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1631)
inline void OutlookBarShortcut::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1632)
inline _variant_t OutlookBarShortcut::GetTarget ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1633)
inline HRESULT OutlookBarShortcut::SetIcon ( const _variant_t & Icon ) {
    HRESULT _hr = raw_SetIcon(Icon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _OutlookBarShortcuts wrapper method implementations
//

#pragma implementation_key(1634)
inline _ApplicationPtr _OutlookBarShortcuts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1635)
inline enum OlObjectClass _OutlookBarShortcuts::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline _NameSpacePtr _OutlookBarShortcuts::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1637)
inline IDispatchPtr _OutlookBarShortcuts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1638)
inline long _OutlookBarShortcuts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1639)
inline OutlookBarShortcutPtr _OutlookBarShortcuts::Item ( const _variant_t & Index ) {
    struct OutlookBarShortcut * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarShortcutPtr(_result, false);
}

#pragma implementation_key(1640)
inline OutlookBarShortcutPtr _OutlookBarShortcuts::Add ( const _variant_t & Target, _bstr_t Name, const _variant_t & Index ) {
    struct OutlookBarShortcut * _result = 0;
    HRESULT _hr = raw_Add(Target, Name, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarShortcutPtr(_result, false);
}

#pragma implementation_key(1641)
inline HRESULT _OutlookBarShortcuts::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OutlookBarGroup wrapper method implementations
//

#pragma implementation_key(1642)
inline _ApplicationPtr OutlookBarGroup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1643)
inline enum OlObjectClass OutlookBarGroup::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1644)
inline _NameSpacePtr OutlookBarGroup::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1645)
inline IDispatchPtr OutlookBarGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1646)
inline _bstr_t OutlookBarGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1647)
inline void OutlookBarGroup::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1648)
inline _OutlookBarShortcutsPtr OutlookBarGroup::GetShortcuts ( ) {
    struct _OutlookBarShortcuts * _result = 0;
    HRESULT _hr = get_Shortcuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OutlookBarShortcutsPtr(_result, false);
}

#pragma implementation_key(1649)
inline enum OlOutlookBarViewType OutlookBarGroup::GetViewType ( ) {
    enum OlOutlookBarViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1650)
inline void OutlookBarGroup::PutViewType ( enum OlOutlookBarViewType ViewType ) {
    HRESULT _hr = put_ViewType(ViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _OutlookBarGroups wrapper method implementations
//

#pragma implementation_key(1651)
inline _ApplicationPtr _OutlookBarGroups::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1652)
inline enum OlObjectClass _OutlookBarGroups::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1653)
inline _NameSpacePtr _OutlookBarGroups::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1654)
inline IDispatchPtr _OutlookBarGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1655)
inline long _OutlookBarGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1656)
inline OutlookBarGroupPtr _OutlookBarGroups::Item ( const _variant_t & Index ) {
    struct OutlookBarGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarGroupPtr(_result, false);
}

#pragma implementation_key(1657)
inline OutlookBarGroupPtr _OutlookBarGroups::Add ( _bstr_t Name, const _variant_t & Index ) {
    struct OutlookBarGroup * _result = 0;
    HRESULT _hr = raw_Add(Name, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarGroupPtr(_result, false);
}

#pragma implementation_key(1658)
inline HRESULT _OutlookBarGroups::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OutlookBarStorage wrapper method implementations
//

#pragma implementation_key(1659)
inline _ApplicationPtr OutlookBarStorage::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1660)
inline enum OlObjectClass OutlookBarStorage::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1661)
inline _NameSpacePtr OutlookBarStorage::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1662)
inline IDispatchPtr OutlookBarStorage::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1663)
inline _OutlookBarGroupsPtr OutlookBarStorage::GetGroups ( ) {
    struct _OutlookBarGroups * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OutlookBarGroupsPtr(_result, false);
}

//
// interface _OutlookBarPane wrapper method implementations
//

#pragma implementation_key(1664)
inline _ApplicationPtr _OutlookBarPane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1665)
inline enum OlObjectClass _OutlookBarPane::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1666)
inline _NameSpacePtr _OutlookBarPane::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1667)
inline IDispatchPtr _OutlookBarPane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1668)
inline OutlookBarStoragePtr _OutlookBarPane::GetContents ( ) {
    struct OutlookBarStorage * _result = 0;
    HRESULT _hr = get_Contents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarStoragePtr(_result, false);
}

#pragma implementation_key(1669)
inline OutlookBarGroupPtr _OutlookBarPane::GetCurrentGroup ( ) {
    struct OutlookBarGroup * _result = 0;
    HRESULT _hr = get_CurrentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarGroupPtr(_result, false);
}

#pragma implementation_key(1670)
inline void _OutlookBarPane::PutRefCurrentGroup ( struct OutlookBarGroup * CurrentGroup ) {
    HRESULT _hr = putref_CurrentGroup(CurrentGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline _bstr_t _OutlookBarPane::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1672)
inline VARIANT_BOOL _OutlookBarPane::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1673)
inline void _OutlookBarPane::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PropertyPageSite wrapper method implementations
//

#pragma implementation_key(1674)
inline _ApplicationPtr PropertyPageSite::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1675)
inline enum OlObjectClass PropertyPageSite::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline _NameSpacePtr PropertyPageSite::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1677)
inline IDispatchPtr PropertyPageSite::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1678)
inline HRESULT PropertyPageSite::OnStatusChange ( ) {
    HRESULT _hr = raw_OnStatusChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Pages wrapper method implementations
//

#pragma implementation_key(1679)
inline _ApplicationPtr Pages::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1680)
inline enum OlObjectClass Pages::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1681)
inline _NameSpacePtr Pages::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1682)
inline IDispatchPtr Pages::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1683)
inline long Pages::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline IDispatchPtr Pages::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1685)
inline IDispatchPtr Pages::Add ( const _variant_t & Name ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1686)
inline HRESULT Pages::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _ViewField wrapper method implementations
//

#pragma implementation_key(1687)
inline _ApplicationPtr _ViewField::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1688)
inline enum OlObjectClass _ViewField::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1689)
inline _NameSpacePtr _ViewField::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1690)
inline IDispatchPtr _ViewField::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1691)
inline _bstr_t _ViewField::GetViewXMLSchemaName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewXMLSchemaName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1692)
inline _ColumnFormatPtr _ViewField::GetColumnFormat ( ) {
    struct _ColumnFormat * _result = 0;
    HRESULT _hr = get_ColumnFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ColumnFormatPtr(_result, false);
}

//
// interface _ColumnFormat wrapper method implementations
//

#pragma implementation_key(1693)
inline _ApplicationPtr _ColumnFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1694)
inline enum OlObjectClass _ColumnFormat::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1695)
inline _NameSpacePtr _ColumnFormat::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1696)
inline IDispatchPtr _ColumnFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1697)
inline _bstr_t _ColumnFormat::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1698)
inline void _ColumnFormat::PutLabel ( _bstr_t Label ) {
    HRESULT _hr = put_Label(Label);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1699)
inline long _ColumnFormat::GetFieldFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_FieldFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1700)
inline void _ColumnFormat::PutFieldFormat ( long FieldFormat ) {
    HRESULT _hr = put_FieldFormat(FieldFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1701)
inline long _ColumnFormat::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1702)
inline void _ColumnFormat::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1703)
inline enum OlAlign _ColumnFormat::GetAlign ( ) {
    enum OlAlign _result;
    HRESULT _hr = get_Align(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1704)
inline void _ColumnFormat::PutAlign ( enum OlAlign Align ) {
    HRESULT _hr = put_Align(Align);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1705)
inline enum OlUserPropertyType _ColumnFormat::GetFieldType ( ) {
    enum OlUserPropertyType _result;
    HRESULT _hr = get_FieldType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _ViewFields wrapper method implementations
//

#pragma implementation_key(1706)
inline _ApplicationPtr _ViewFields::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1707)
inline enum OlObjectClass _ViewFields::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1708)
inline _NameSpacePtr _ViewFields::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1709)
inline IDispatchPtr _ViewFields::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1710)
inline long _ViewFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline _ViewFieldPtr _ViewFields::Item ( const _variant_t & Index ) {
    struct _ViewField * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFieldPtr(_result, false);
}

#pragma implementation_key(1712)
inline _ViewFieldPtr _ViewFields::Add ( _bstr_t PropertyName ) {
    struct _ViewField * _result = 0;
    HRESULT _hr = raw_Add(PropertyName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFieldPtr(_result, false);
}

#pragma implementation_key(1713)
inline _ViewFieldPtr _ViewFields::Insert ( _bstr_t PropertyName, const _variant_t & Index ) {
    struct _ViewField * _result = 0;
    HRESULT _hr = raw_Insert(PropertyName, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFieldPtr(_result, false);
}

#pragma implementation_key(1714)
inline HRESULT _ViewFields::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IconView wrapper method implementations
//

#pragma implementation_key(1715)
inline _ApplicationPtr _IconView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1716)
inline enum OlObjectClass _IconView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1717)
inline _NameSpacePtr _IconView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1718)
inline IDispatchPtr _IconView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1719)
inline HRESULT _IconView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1720)
inline ViewPtr _IconView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1721)
inline HRESULT _IconView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1722)
inline HRESULT _IconView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1723)
inline HRESULT _IconView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1724)
inline _bstr_t _IconView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1725)
inline void _IconView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1726)
inline VARIANT_BOOL _IconView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1727)
inline void _IconView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1728)
inline _bstr_t _IconView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1729)
inline void _IconView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1730)
inline enum OlViewSaveOption _IconView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline VARIANT_BOOL _IconView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1732)
inline enum OlViewType _IconView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline _bstr_t _IconView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1734)
inline void _IconView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1735)
inline HRESULT _IconView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1736)
inline _bstr_t _IconView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1737)
inline void _IconView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1738)
inline _OrderFieldsPtr _IconView::GetSortFields ( ) {
    struct _OrderFields * _result = 0;
    HRESULT _hr = get_SortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldsPtr(_result, false);
}

#pragma implementation_key(1739)
inline enum OlIconViewType _IconView::GetIconViewType ( ) {
    enum OlIconViewType _result;
    HRESULT _hr = get_IconViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1740)
inline void _IconView::PutIconViewType ( enum OlIconViewType IconViewType ) {
    HRESULT _hr = put_IconViewType(IconViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1741)
inline enum OlIconViewPlacement _IconView::GetIconPlacement ( ) {
    enum OlIconViewPlacement _result;
    HRESULT _hr = get_IconPlacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1742)
inline void _IconView::PutIconPlacement ( enum OlIconViewPlacement IconPlacement ) {
    HRESULT _hr = put_IconPlacement(IconPlacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _OrderField wrapper method implementations
//

#pragma implementation_key(1743)
inline _ApplicationPtr _OrderField::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1744)
inline enum OlObjectClass _OrderField::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1745)
inline _NameSpacePtr _OrderField::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1746)
inline IDispatchPtr _OrderField::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1747)
inline _bstr_t _OrderField::GetViewXMLSchemaName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ViewXMLSchemaName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1748)
inline VARIANT_BOOL _OrderField::GetIsDescending ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDescending(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1749)
inline void _OrderField::PutIsDescending ( VARIANT_BOOL IsDescending ) {
    HRESULT _hr = put_IsDescending(IsDescending);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _OrderFields wrapper method implementations
//

#pragma implementation_key(1750)
inline _ApplicationPtr _OrderFields::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1751)
inline enum OlObjectClass _OrderFields::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1752)
inline _NameSpacePtr _OrderFields::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1753)
inline IDispatchPtr _OrderFields::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1754)
inline long _OrderFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1755)
inline _OrderFieldPtr _OrderFields::Item ( const _variant_t & Index ) {
    struct _OrderField * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldPtr(_result, false);
}

#pragma implementation_key(1756)
inline _OrderFieldPtr _OrderFields::Add ( _bstr_t PropertyName, const _variant_t & IsDescending ) {
    struct _OrderField * _result = 0;
    HRESULT _hr = raw_Add(PropertyName, IsDescending, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldPtr(_result, false);
}

#pragma implementation_key(1757)
inline HRESULT _OrderFields::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1758)
inline HRESULT _OrderFields::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1759)
inline _OrderFieldPtr _OrderFields::Insert ( _bstr_t PropertyName, const _variant_t & Index, const _variant_t & IsDescending ) {
    struct _OrderField * _result = 0;
    HRESULT _hr = raw_Insert(PropertyName, Index, IsDescending, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldPtr(_result, false);
}

//
// interface _CardView wrapper method implementations
//

#pragma implementation_key(1760)
inline _ApplicationPtr _CardView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1761)
inline enum OlObjectClass _CardView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1762)
inline _NameSpacePtr _CardView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1763)
inline IDispatchPtr _CardView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1764)
inline HRESULT _CardView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1765)
inline ViewPtr _CardView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1766)
inline HRESULT _CardView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1767)
inline HRESULT _CardView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1768)
inline HRESULT _CardView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1769)
inline _bstr_t _CardView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1770)
inline void _CardView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1771)
inline VARIANT_BOOL _CardView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1772)
inline void _CardView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1773)
inline _bstr_t _CardView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1774)
inline void _CardView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1775)
inline enum OlViewSaveOption _CardView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1776)
inline VARIANT_BOOL _CardView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1777)
inline enum OlViewType _CardView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1778)
inline _bstr_t _CardView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1779)
inline void _CardView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1780)
inline HRESULT _CardView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1781)
inline _bstr_t _CardView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1782)
inline void _CardView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1783)
inline _OrderFieldsPtr _CardView::GetSortFields ( ) {
    struct _OrderFields * _result = 0;
    HRESULT _hr = get_SortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldsPtr(_result, false);
}

#pragma implementation_key(1784)
inline VARIANT_BOOL _CardView::GetAllowInCellEditing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowInCellEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1785)
inline void _CardView::PutAllowInCellEditing ( VARIANT_BOOL AllowInCellEditing ) {
    HRESULT _hr = put_AllowInCellEditing(AllowInCellEditing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1786)
inline VARIANT_BOOL _CardView::GetShowEmptyFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowEmptyFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1787)
inline void _CardView::PutShowEmptyFields ( VARIANT_BOOL ShowEmptyFields ) {
    HRESULT _hr = put_ShowEmptyFields(ShowEmptyFields);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1788)
inline long _CardView::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1789)
inline void _CardView::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1790)
inline long _CardView::GetMultiLineFieldHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_MultiLineFieldHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1791)
inline void _CardView::PutMultiLineFieldHeight ( long MultiLineFieldHeight ) {
    HRESULT _hr = put_MultiLineFieldHeight(MultiLineFieldHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1792)
inline _ViewFieldsPtr _CardView::GetViewFields ( ) {
    struct _ViewFields * _result = 0;
    HRESULT _hr = get_ViewFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFieldsPtr(_result, false);
}

#pragma implementation_key(1793)
inline _ViewFontPtr _CardView::GetHeadingsFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_HeadingsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(1794)
inline _ViewFontPtr _CardView::GetBodyFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_BodyFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(1795)
inline _AutoFormatRulesPtr _CardView::GetAutoFormatRules ( ) {
    struct _AutoFormatRules * _result = 0;
    HRESULT _hr = get_AutoFormatRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AutoFormatRulesPtr(_result, false);
}

//
// interface _ViewFont wrapper method implementations
//

#pragma implementation_key(1796)
inline _ApplicationPtr _ViewFont::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1797)
inline enum OlObjectClass _ViewFont::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1798)
inline _NameSpacePtr _ViewFont::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1799)
inline IDispatchPtr _ViewFont::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1800)
inline VARIANT_BOOL _ViewFont::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1801)
inline void _ViewFont::PutBold ( VARIANT_BOOL Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1802)
inline VARIANT_BOOL _ViewFont::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1803)
inline void _ViewFont::PutItalic ( VARIANT_BOOL Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1804)
inline _bstr_t _ViewFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1805)
inline void _ViewFont::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1806)
inline long _ViewFont::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1807)
inline void _ViewFont::PutSize ( long Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1808)
inline VARIANT_BOOL _ViewFont::GetStrikethrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Strikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline void _ViewFont::PutStrikethrough ( VARIANT_BOOL Strikethrough ) {
    HRESULT _hr = put_Strikethrough(Strikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1810)
inline VARIANT_BOOL _ViewFont::GetUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1811)
inline void _ViewFont::PutUnderline ( VARIANT_BOOL Underline ) {
    HRESULT _hr = put_Underline(Underline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1812)
inline enum OlColor _ViewFont::GetColor ( ) {
    enum OlColor _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1813)
inline void _ViewFont::PutColor ( enum OlColor Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1814)
inline enum OlCategoryColor _ViewFont::GetExtendedColor ( ) {
    enum OlCategoryColor _result;
    HRESULT _hr = get_ExtendedColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1815)
inline void _ViewFont::PutExtendedColor ( enum OlCategoryColor ExtendedColor ) {
    HRESULT _hr = put_ExtendedColor(ExtendedColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _AutoFormatRules wrapper method implementations
//

#pragma implementation_key(1816)
inline _ApplicationPtr _AutoFormatRules::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1817)
inline enum OlObjectClass _AutoFormatRules::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1818)
inline _NameSpacePtr _AutoFormatRules::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1819)
inline IDispatchPtr _AutoFormatRules::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1820)
inline long _AutoFormatRules::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1821)
inline _AutoFormatRulePtr _AutoFormatRules::Item ( const _variant_t & Index ) {
    struct _AutoFormatRule * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AutoFormatRulePtr(_result, false);
}

#pragma implementation_key(1822)
inline _AutoFormatRulePtr _AutoFormatRules::Add ( _bstr_t Name ) {
    struct _AutoFormatRule * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AutoFormatRulePtr(_result, false);
}

#pragma implementation_key(1823)
inline _AutoFormatRulePtr _AutoFormatRules::Insert ( _bstr_t Name, const _variant_t & Index ) {
    struct _AutoFormatRule * _result = 0;
    HRESULT _hr = raw_Insert(Name, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AutoFormatRulePtr(_result, false);
}

#pragma implementation_key(1824)
inline HRESULT _AutoFormatRules::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1825)
inline HRESULT _AutoFormatRules::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1826)
inline HRESULT _AutoFormatRules::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _AutoFormatRule wrapper method implementations
//

#pragma implementation_key(1827)
inline _ApplicationPtr _AutoFormatRule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1828)
inline enum OlObjectClass _AutoFormatRule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline _NameSpacePtr _AutoFormatRule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1830)
inline IDispatchPtr _AutoFormatRule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1831)
inline _bstr_t _AutoFormatRule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1832)
inline void _AutoFormatRule::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1833)
inline _bstr_t _AutoFormatRule::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1834)
inline void _AutoFormatRule::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1835)
inline VARIANT_BOOL _AutoFormatRule::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1836)
inline void _AutoFormatRule::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1837)
inline _ViewFontPtr _AutoFormatRule::GetFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(1838)
inline void _AutoFormatRule::PutFont ( struct _ViewFont * Font ) {
    HRESULT _hr = put_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1839)
inline VARIANT_BOOL _AutoFormatRule::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _TimelineView wrapper method implementations
//

#pragma implementation_key(1840)
inline _ApplicationPtr _TimelineView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1841)
inline enum OlObjectClass _TimelineView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1842)
inline _NameSpacePtr _TimelineView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1843)
inline IDispatchPtr _TimelineView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1844)
inline HRESULT _TimelineView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1845)
inline ViewPtr _TimelineView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1846)
inline HRESULT _TimelineView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1847)
inline HRESULT _TimelineView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1848)
inline HRESULT _TimelineView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1849)
inline _bstr_t _TimelineView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1850)
inline void _TimelineView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1851)
inline VARIANT_BOOL _TimelineView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1852)
inline void _TimelineView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1853)
inline _bstr_t _TimelineView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1854)
inline void _TimelineView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1855)
inline enum OlViewSaveOption _TimelineView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1856)
inline VARIANT_BOOL _TimelineView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1857)
inline enum OlViewType _TimelineView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1858)
inline _bstr_t _TimelineView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1859)
inline void _TimelineView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1860)
inline HRESULT _TimelineView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1861)
inline _bstr_t _TimelineView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1862)
inline void _TimelineView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1863)
inline _bstr_t _TimelineView::GetStartField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1864)
inline void _TimelineView::PutStartField ( _bstr_t StartField ) {
    HRESULT _hr = put_StartField(StartField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1865)
inline _bstr_t _TimelineView::GetEndField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EndField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1866)
inline void _TimelineView::PutEndField ( _bstr_t EndField ) {
    HRESULT _hr = put_EndField(EndField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1867)
inline _OrderFieldsPtr _TimelineView::GetGroupByFields ( ) {
    struct _OrderFields * _result = 0;
    HRESULT _hr = get_GroupByFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldsPtr(_result, false);
}

#pragma implementation_key(1868)
inline enum OlDefaultExpandCollapseSetting _TimelineView::GetDefaultExpandCollapseSetting ( ) {
    enum OlDefaultExpandCollapseSetting _result;
    HRESULT _hr = get_DefaultExpandCollapseSetting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1869)
inline void _TimelineView::PutDefaultExpandCollapseSetting ( enum OlDefaultExpandCollapseSetting DefaultExpandCollapseSetting ) {
    HRESULT _hr = put_DefaultExpandCollapseSetting(DefaultExpandCollapseSetting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1870)
inline VARIANT_BOOL _TimelineView::GetShowWeekNumbers ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowWeekNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1871)
inline void _TimelineView::PutShowWeekNumbers ( VARIANT_BOOL ShowWeekNumbers ) {
    HRESULT _hr = put_ShowWeekNumbers(ShowWeekNumbers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1872)
inline long _TimelineView::GetMaxLabelWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLabelWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1873)
inline void _TimelineView::PutMaxLabelWidth ( long MaxLabelWidth ) {
    HRESULT _hr = put_MaxLabelWidth(MaxLabelWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1874)
inline VARIANT_BOOL _TimelineView::GetShowLabelWhenViewingByMonth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLabelWhenViewingByMonth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1875)
inline void _TimelineView::PutShowLabelWhenViewingByMonth ( VARIANT_BOOL ShowLabelWhenViewingByMonth ) {
    HRESULT _hr = put_ShowLabelWhenViewingByMonth(ShowLabelWhenViewingByMonth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1876)
inline _ViewFontPtr _TimelineView::GetUpperScaleFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_UpperScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(1877)
inline _ViewFontPtr _TimelineView::GetLowerScaleFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_LowerScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(1878)
inline _ViewFontPtr _TimelineView::GetItemFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_ItemFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(1879)
inline enum OlTimelineViewMode _TimelineView::GetTimelineViewMode ( ) {
    enum OlTimelineViewMode _result;
    HRESULT _hr = get_TimelineViewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1880)
inline void _TimelineView::PutTimelineViewMode ( enum OlTimelineViewMode TimelineViewMode ) {
    HRESULT _hr = put_TimelineViewMode(TimelineViewMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _NavigationGroup wrapper method implementations
//

#pragma implementation_key(1881)
inline _ApplicationPtr _NavigationGroup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1882)
inline enum OlObjectClass _NavigationGroup::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1883)
inline _NameSpacePtr _NavigationGroup::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1884)
inline IDispatchPtr _NavigationGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1885)
inline enum OlGroupType _NavigationGroup::GetGroupType ( ) {
    enum OlGroupType _result;
    HRESULT _hr = get_GroupType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1886)
inline _NavigationFoldersPtr _NavigationGroup::GetNavigationFolders ( ) {
    struct _NavigationFolders * _result = 0;
    HRESULT _hr = get_NavigationFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationFoldersPtr(_result, false);
}

#pragma implementation_key(1887)
inline _bstr_t _NavigationGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1888)
inline void _NavigationGroup::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1889)
inline long _NavigationGroup::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1890)
inline void _NavigationGroup::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _NavigationGroups wrapper method implementations
//

#pragma implementation_key(1891)
inline _ApplicationPtr _NavigationGroups::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1892)
inline enum OlObjectClass _NavigationGroups::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1893)
inline _NameSpacePtr _NavigationGroups::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1894)
inline IDispatchPtr _NavigationGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1895)
inline long _NavigationGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1896)
inline _NavigationGroupPtr _NavigationGroups::Item ( const _variant_t & Index ) {
    struct _NavigationGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupPtr(_result, false);
}

#pragma implementation_key(1897)
inline _NavigationGroupPtr _NavigationGroups::Create ( _bstr_t GroupDisplayName ) {
    struct _NavigationGroup * _result = 0;
    HRESULT _hr = raw_Create(GroupDisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupPtr(_result, false);
}

#pragma implementation_key(1898)
inline HRESULT _NavigationGroups::Delete ( struct _NavigationGroup * Group ) {
    HRESULT _hr = raw_Delete(Group);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1899)
inline _NavigationGroupPtr _NavigationGroups::GetDefaultNavigationGroup ( enum OlGroupType DefaultFolderGroup ) {
    struct _NavigationGroup * _result = 0;
    HRESULT _hr = raw_GetDefaultNavigationGroup(DefaultFolderGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupPtr(_result, false);
}

//
// interface _MailModule wrapper method implementations
//

#pragma implementation_key(1900)
inline _ApplicationPtr _MailModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1901)
inline enum OlObjectClass _MailModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1902)
inline _NameSpacePtr _MailModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1903)
inline IDispatchPtr _MailModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1904)
inline enum OlNavigationModuleType _MailModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1905)
inline _bstr_t _MailModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1906)
inline long _MailModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1907)
inline void _MailModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1908)
inline VARIANT_BOOL _MailModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline void _MailModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1910)
inline _NavigationGroupsPtr _MailModule::GetNavigationGroups ( ) {
    struct _NavigationGroups * _result = 0;
    HRESULT _hr = get_NavigationGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupsPtr(_result, false);
}

//
// interface _CalendarModule wrapper method implementations
//

#pragma implementation_key(1911)
inline _ApplicationPtr _CalendarModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1912)
inline enum OlObjectClass _CalendarModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1913)
inline _NameSpacePtr _CalendarModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1914)
inline IDispatchPtr _CalendarModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1915)
inline enum OlNavigationModuleType _CalendarModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1916)
inline _bstr_t _CalendarModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1917)
inline long _CalendarModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1918)
inline void _CalendarModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1919)
inline VARIANT_BOOL _CalendarModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1920)
inline void _CalendarModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1921)
inline _NavigationGroupsPtr _CalendarModule::GetNavigationGroups ( ) {
    struct _NavigationGroups * _result = 0;
    HRESULT _hr = get_NavigationGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupsPtr(_result, false);
}

//
// interface _ContactsModule wrapper method implementations
//

#pragma implementation_key(1922)
inline _ApplicationPtr _ContactsModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1923)
inline enum OlObjectClass _ContactsModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1924)
inline _NameSpacePtr _ContactsModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1925)
inline IDispatchPtr _ContactsModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1926)
inline enum OlNavigationModuleType _ContactsModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1927)
inline _bstr_t _ContactsModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1928)
inline long _ContactsModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1929)
inline void _ContactsModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1930)
inline VARIANT_BOOL _ContactsModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline void _ContactsModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1932)
inline _NavigationGroupsPtr _ContactsModule::GetNavigationGroups ( ) {
    struct _NavigationGroups * _result = 0;
    HRESULT _hr = get_NavigationGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupsPtr(_result, false);
}

//
// interface _TasksModule wrapper method implementations
//

#pragma implementation_key(1933)
inline _ApplicationPtr _TasksModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1934)
inline enum OlObjectClass _TasksModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1935)
inline _NameSpacePtr _TasksModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1936)
inline IDispatchPtr _TasksModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1937)
inline enum OlNavigationModuleType _TasksModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1938)
inline _bstr_t _TasksModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1939)
inline long _TasksModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1940)
inline void _TasksModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1941)
inline VARIANT_BOOL _TasksModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1942)
inline void _TasksModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1943)
inline _NavigationGroupsPtr _TasksModule::GetNavigationGroups ( ) {
    struct _NavigationGroups * _result = 0;
    HRESULT _hr = get_NavigationGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupsPtr(_result, false);
}

//
// interface _JournalModule wrapper method implementations
//

#pragma implementation_key(1944)
inline _ApplicationPtr _JournalModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1945)
inline enum OlObjectClass _JournalModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1946)
inline _NameSpacePtr _JournalModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1947)
inline IDispatchPtr _JournalModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1948)
inline enum OlNavigationModuleType _JournalModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1949)
inline _bstr_t _JournalModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1950)
inline long _JournalModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1951)
inline void _JournalModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1952)
inline VARIANT_BOOL _JournalModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline void _JournalModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1954)
inline _NavigationGroupsPtr _JournalModule::GetNavigationGroups ( ) {
    struct _NavigationGroups * _result = 0;
    HRESULT _hr = get_NavigationGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupsPtr(_result, false);
}

//
// interface _NotesModule wrapper method implementations
//

#pragma implementation_key(1955)
inline _ApplicationPtr _NotesModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1956)
inline enum OlObjectClass _NotesModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1957)
inline _NameSpacePtr _NotesModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1958)
inline IDispatchPtr _NotesModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1959)
inline enum OlNavigationModuleType _NotesModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1960)
inline _bstr_t _NotesModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1961)
inline long _NotesModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1962)
inline void _NotesModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1963)
inline VARIANT_BOOL _NotesModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1964)
inline void _NotesModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1965)
inline _NavigationGroupsPtr _NotesModule::GetNavigationGroups ( ) {
    struct _NavigationGroups * _result = 0;
    HRESULT _hr = get_NavigationGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationGroupsPtr(_result, false);
}

//
// interface _BusinessCardView wrapper method implementations
//

#pragma implementation_key(1966)
inline _ApplicationPtr _BusinessCardView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1967)
inline enum OlObjectClass _BusinessCardView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1968)
inline _NameSpacePtr _BusinessCardView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1969)
inline IDispatchPtr _BusinessCardView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1970)
inline HRESULT _BusinessCardView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1971)
inline ViewPtr _BusinessCardView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1972)
inline HRESULT _BusinessCardView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1973)
inline HRESULT _BusinessCardView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1974)
inline HRESULT _BusinessCardView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1975)
inline _bstr_t _BusinessCardView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1976)
inline void _BusinessCardView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1977)
inline VARIANT_BOOL _BusinessCardView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1978)
inline void _BusinessCardView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1979)
inline _bstr_t _BusinessCardView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1980)
inline void _BusinessCardView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1981)
inline enum OlViewSaveOption _BusinessCardView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1982)
inline VARIANT_BOOL _BusinessCardView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline enum OlViewType _BusinessCardView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1984)
inline _bstr_t _BusinessCardView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1985)
inline void _BusinessCardView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1986)
inline HRESULT _BusinessCardView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1987)
inline _bstr_t _BusinessCardView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1988)
inline void _BusinessCardView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1989)
inline _ViewFontPtr _BusinessCardView::GetHeadingsFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_HeadingsFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(1990)
inline _OrderFieldsPtr _BusinessCardView::GetSortFields ( ) {
    struct _OrderFields * _result = 0;
    HRESULT _hr = get_SortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldsPtr(_result, false);
}

#pragma implementation_key(1991)
inline long _BusinessCardView::GetCardSize ( ) {
    long _result = 0;
    HRESULT _hr = get_CardSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1992)
inline void _BusinessCardView::PutCardSize ( long CardSize ) {
    HRESULT _hr = put_CardSize(CardSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _FormRegion wrapper method implementations
//

#pragma implementation_key(1993)
inline _ApplicationPtr _FormRegion::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1994)
inline enum OlObjectClass _FormRegion::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1995)
inline _NameSpacePtr _FormRegion::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1996)
inline IDispatchPtr _FormRegion::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1997)
inline VARIANT_BOOL _FormRegion::GetIsExpanded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsExpanded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1998)
inline IDispatchPtr _FormRegion::GetForm ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Form(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1999)
inline _bstr_t _FormRegion::GetDetail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Detail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2000)
inline void _FormRegion::PutDetail ( _bstr_t Detail ) {
    HRESULT _hr = put_Detail(Detail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2001)
inline IDispatchPtr _FormRegion::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2002)
inline _InspectorPtr _FormRegion::GetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_Inspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(2003)
inline enum OlFormRegionMode _FormRegion::GetFormRegionMode ( ) {
    enum OlFormRegionMode _result;
    HRESULT _hr = get_FormRegionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2004)
inline long _FormRegion::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2005)
inline HRESULT _FormRegion::Reflow ( ) {
    HRESULT _hr = raw_Reflow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2006)
inline _bstr_t _FormRegion::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2007)
inline _bstr_t _FormRegion::GetInternalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InternalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2008)
inline HRESULT _FormRegion::SetControlItemProperty ( IDispatch * Control, _bstr_t PropertyName ) {
    HRESULT _hr = raw_SetControlItemProperty(Control, PropertyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2009)
inline VARIANT_BOOL _FormRegion::GetSuppressControlReplacement ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SuppressControlReplacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2010)
inline void _FormRegion::PutSuppressControlReplacement ( VARIANT_BOOL SuppressControlReplacement ) {
    HRESULT _hr = put_SuppressControlReplacement(SuppressControlReplacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2011)
inline HRESULT _FormRegion::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2012)
inline VARIANT_BOOL _FormRegion::GetEnableAutoLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2013)
inline void _FormRegion::PutEnableAutoLayout ( VARIANT_BOOL EnableAutoLayout ) {
    HRESULT _hr = put_EnableAutoLayout(EnableAutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2014)
inline VARIANT_BOOL _FormRegion::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2015)
inline void _FormRegion::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _CalendarView wrapper method implementations
//

#pragma implementation_key(2016)
inline _ApplicationPtr _CalendarView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2017)
inline enum OlObjectClass _CalendarView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2018)
inline _NameSpacePtr _CalendarView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2019)
inline IDispatchPtr _CalendarView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2020)
inline HRESULT _CalendarView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2021)
inline ViewPtr _CalendarView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(2022)
inline HRESULT _CalendarView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2023)
inline HRESULT _CalendarView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2024)
inline HRESULT _CalendarView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2025)
inline _bstr_t _CalendarView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2026)
inline void _CalendarView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2027)
inline VARIANT_BOOL _CalendarView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2028)
inline void _CalendarView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2029)
inline _bstr_t _CalendarView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2030)
inline void _CalendarView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2031)
inline enum OlViewSaveOption _CalendarView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2032)
inline VARIANT_BOOL _CalendarView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2033)
inline enum OlViewType _CalendarView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2034)
inline _bstr_t _CalendarView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2035)
inline void _CalendarView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2036)
inline HRESULT _CalendarView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2037)
inline _bstr_t _CalendarView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2038)
inline void _CalendarView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2039)
inline _bstr_t _CalendarView::GetStartField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2040)
inline void _CalendarView::PutStartField ( _bstr_t StartField ) {
    HRESULT _hr = put_StartField(StartField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2041)
inline _bstr_t _CalendarView::GetEndField ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EndField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2042)
inline void _CalendarView::PutEndField ( _bstr_t EndField ) {
    HRESULT _hr = put_EndField(EndField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2043)
inline enum OlCalendarViewMode _CalendarView::GetCalendarViewMode ( ) {
    enum OlCalendarViewMode _result;
    HRESULT _hr = get_CalendarViewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2044)
inline void _CalendarView::PutCalendarViewMode ( enum OlCalendarViewMode CalendarViewMode ) {
    HRESULT _hr = put_CalendarViewMode(CalendarViewMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2045)
inline enum OlDayWeekTimeScale _CalendarView::GetDayWeekTimeScale ( ) {
    enum OlDayWeekTimeScale _result;
    HRESULT _hr = get_DayWeekTimeScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2046)
inline void _CalendarView::PutDayWeekTimeScale ( enum OlDayWeekTimeScale DayWeekTimeScale ) {
    HRESULT _hr = put_DayWeekTimeScale(DayWeekTimeScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2047)
inline VARIANT_BOOL _CalendarView::GetMonthShowEndTime ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MonthShowEndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2048)
inline void _CalendarView::PutMonthShowEndTime ( VARIANT_BOOL MonthShowEndTime ) {
    HRESULT _hr = put_MonthShowEndTime(MonthShowEndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2049)
inline VARIANT_BOOL _CalendarView::GetBoldDatesWithItems ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoldDatesWithItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2050)
inline void _CalendarView::PutBoldDatesWithItems ( VARIANT_BOOL BoldDatesWithItems ) {
    HRESULT _hr = put_BoldDatesWithItems(BoldDatesWithItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2051)
inline _ViewFontPtr _CalendarView::GetDayWeekTimeFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_DayWeekTimeFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(2052)
inline _ViewFontPtr _CalendarView::GetDayWeekFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_DayWeekFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(2053)
inline _ViewFontPtr _CalendarView::GetMonthFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_MonthFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(2054)
inline _AutoFormatRulesPtr _CalendarView::GetAutoFormatRules ( ) {
    struct _AutoFormatRules * _result = 0;
    HRESULT _hr = get_AutoFormatRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AutoFormatRulesPtr(_result, false);
}

#pragma implementation_key(2055)
inline long _CalendarView::GetDaysInMultiDayMode ( ) {
    long _result = 0;
    HRESULT _hr = get_DaysInMultiDayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2056)
inline void _CalendarView::PutDaysInMultiDayMode ( long DaysInMultiDayMode ) {
    HRESULT _hr = put_DaysInMultiDayMode(DaysInMultiDayMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2057)
inline _variant_t _CalendarView::GetDisplayedDates ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DisplayedDates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2058)
inline VARIANT_BOOL _CalendarView::GetBoldSubjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BoldSubjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2059)
inline void _CalendarView::PutBoldSubjects ( VARIANT_BOOL BoldSubjects ) {
    HRESULT _hr = put_BoldSubjects(BoldSubjects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2060)
inline DATE _CalendarView::GetSelectedStartTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SelectedStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2061)
inline DATE _CalendarView::GetSelectedEndTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SelectedEndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _TableView wrapper method implementations
//

#pragma implementation_key(2062)
inline _ApplicationPtr _TableView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2063)
inline enum OlObjectClass _TableView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2064)
inline _NameSpacePtr _TableView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2065)
inline IDispatchPtr _TableView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2066)
inline HRESULT _TableView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2067)
inline ViewPtr _TableView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(2068)
inline HRESULT _TableView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2069)
inline HRESULT _TableView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2070)
inline HRESULT _TableView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2071)
inline _bstr_t _TableView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2072)
inline void _TableView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2073)
inline VARIANT_BOOL _TableView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2074)
inline void _TableView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2075)
inline _bstr_t _TableView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2076)
inline void _TableView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2077)
inline enum OlViewSaveOption _TableView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2078)
inline VARIANT_BOOL _TableView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2079)
inline enum OlViewType _TableView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2080)
inline _bstr_t _TableView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2081)
inline void _TableView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2082)
inline HRESULT _TableView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2083)
inline _bstr_t _TableView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2084)
inline void _TableView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2085)
inline _ViewFieldsPtr _TableView::GetViewFields ( ) {
    struct _ViewFields * _result = 0;
    HRESULT _hr = get_ViewFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFieldsPtr(_result, false);
}

#pragma implementation_key(2086)
inline _OrderFieldsPtr _TableView::GetGroupByFields ( ) {
    struct _OrderFields * _result = 0;
    HRESULT _hr = get_GroupByFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldsPtr(_result, false);
}

#pragma implementation_key(2087)
inline _OrderFieldsPtr _TableView::GetSortFields ( ) {
    struct _OrderFields * _result = 0;
    HRESULT _hr = get_SortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldsPtr(_result, false);
}

#pragma implementation_key(2088)
inline long _TableView::GetMaxLinesInMultiLineView ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxLinesInMultiLineView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2089)
inline void _TableView::PutMaxLinesInMultiLineView ( long MaxLinesInMultiLineView ) {
    HRESULT _hr = put_MaxLinesInMultiLineView(MaxLinesInMultiLineView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2090)
inline VARIANT_BOOL _TableView::GetAutomaticGrouping ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticGrouping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2091)
inline void _TableView::PutAutomaticGrouping ( VARIANT_BOOL AutomaticGrouping ) {
    HRESULT _hr = put_AutomaticGrouping(AutomaticGrouping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2092)
inline enum OlDefaultExpandCollapseSetting _TableView::GetDefaultExpandCollapseSetting ( ) {
    enum OlDefaultExpandCollapseSetting _result;
    HRESULT _hr = get_DefaultExpandCollapseSetting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2093)
inline void _TableView::PutDefaultExpandCollapseSetting ( enum OlDefaultExpandCollapseSetting DefaultExpandCollapseSetting ) {
    HRESULT _hr = put_DefaultExpandCollapseSetting(DefaultExpandCollapseSetting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2094)
inline VARIANT_BOOL _TableView::GetAutomaticColumnSizing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutomaticColumnSizing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2095)
inline void _TableView::PutAutomaticColumnSizing ( VARIANT_BOOL AutomaticColumnSizing ) {
    HRESULT _hr = put_AutomaticColumnSizing(AutomaticColumnSizing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2096)
inline enum OlMultiLine _TableView::GetMultiLine ( ) {
    enum OlMultiLine _result;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2097)
inline void _TableView::PutMultiLine ( enum OlMultiLine MultiLine ) {
    HRESULT _hr = put_MultiLine(MultiLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2098)
inline long _TableView::GetMultiLineWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_MultiLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2099)
inline void _TableView::PutMultiLineWidth ( long MultiLineWidth ) {
    HRESULT _hr = put_MultiLineWidth(MultiLineWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2100)
inline VARIANT_BOOL _TableView::GetAllowInCellEditing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowInCellEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2101)
inline void _TableView::PutAllowInCellEditing ( VARIANT_BOOL AllowInCellEditing ) {
    HRESULT _hr = put_AllowInCellEditing(AllowInCellEditing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2102)
inline VARIANT_BOOL _TableView::GetShowNewItemRow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNewItemRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2103)
inline void _TableView::PutShowNewItemRow ( VARIANT_BOOL ShowNewItemRow ) {
    HRESULT _hr = put_ShowNewItemRow(ShowNewItemRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2104)
inline enum OlGridLineStyle _TableView::GetGridLineStyle ( ) {
    enum OlGridLineStyle _result;
    HRESULT _hr = get_GridLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2105)
inline void _TableView::PutGridLineStyle ( enum OlGridLineStyle GridLineStyle ) {
    HRESULT _hr = put_GridLineStyle(GridLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2106)
inline VARIANT_BOOL _TableView::GetShowItemsInGroups ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowItemsInGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2107)
inline void _TableView::PutShowItemsInGroups ( VARIANT_BOOL ShowItemsInGroups ) {
    HRESULT _hr = put_ShowItemsInGroups(ShowItemsInGroups);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2108)
inline VARIANT_BOOL _TableView::GetShowReadingPane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowReadingPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2109)
inline void _TableView::PutShowReadingPane ( VARIANT_BOOL ShowReadingPane ) {
    HRESULT _hr = put_ShowReadingPane(ShowReadingPane);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2110)
inline VARIANT_BOOL _TableView::GetHideReadingPaneHeaderInfo ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HideReadingPaneHeaderInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2111)
inline void _TableView::PutHideReadingPaneHeaderInfo ( VARIANT_BOOL HideReadingPaneHeaderInfo ) {
    HRESULT _hr = put_HideReadingPaneHeaderInfo(HideReadingPaneHeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2112)
inline VARIANT_BOOL _TableView::GetShowUnreadAndFlaggedMessages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowUnreadAndFlaggedMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2113)
inline void _TableView::PutShowUnreadAndFlaggedMessages ( VARIANT_BOOL ShowUnreadAndFlaggedMessages ) {
    HRESULT _hr = put_ShowUnreadAndFlaggedMessages(ShowUnreadAndFlaggedMessages);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2114)
inline _ViewFontPtr _TableView::GetRowFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_RowFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(2115)
inline _ViewFontPtr _TableView::GetColumnFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_ColumnFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(2116)
inline _ViewFontPtr _TableView::GetAutoPreviewFont ( ) {
    struct _ViewFont * _result = 0;
    HRESULT _hr = get_AutoPreviewFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewFontPtr(_result, false);
}

#pragma implementation_key(2117)
inline enum OlAutoPreview _TableView::GetAutoPreview ( ) {
    enum OlAutoPreview _result;
    HRESULT _hr = get_AutoPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2118)
inline void _TableView::PutAutoPreview ( enum OlAutoPreview AutoPreview ) {
    HRESULT _hr = put_AutoPreview(AutoPreview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2119)
inline _AutoFormatRulesPtr _TableView::GetAutoFormatRules ( ) {
    struct _AutoFormatRules * _result = 0;
    HRESULT _hr = get_AutoFormatRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AutoFormatRulesPtr(_result, false);
}

#pragma implementation_key(2120)
inline _TablePtr _TableView::GetTable ( ) {
    struct _Table * _result = 0;
    HRESULT _hr = raw_GetTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TablePtr(_result, false);
}

#pragma implementation_key(2121)
inline VARIANT_BOOL _TableView::GetShowConversationByDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowConversationByDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2122)
inline void _TableView::PutShowConversationByDate ( VARIANT_BOOL ShowConversationByDate ) {
    HRESULT _hr = put_ShowConversationByDate(ShowConversationByDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2123)
inline VARIANT_BOOL _TableView::GetShowFullConversations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFullConversations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2124)
inline void _TableView::PutShowFullConversations ( VARIANT_BOOL ShowFullConversations ) {
    HRESULT _hr = put_ShowFullConversations(ShowFullConversations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2125)
inline VARIANT_BOOL _TableView::GetAlwaysExpandConversation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlwaysExpandConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2126)
inline void _TableView::PutAlwaysExpandConversation ( VARIANT_BOOL AlwaysExpandConversation ) {
    HRESULT _hr = put_AlwaysExpandConversation(AlwaysExpandConversation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2127)
inline VARIANT_BOOL _TableView::GetShowConversationSendersAboveSubject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowConversationSendersAboveSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2128)
inline void _TableView::PutShowConversationSendersAboveSubject ( VARIANT_BOOL ShowConversationSendersAboveSubject ) {
    HRESULT _hr = put_ShowConversationSendersAboveSubject(ShowConversationSendersAboveSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _PeopleView wrapper method implementations
//

#pragma implementation_key(2129)
inline _ApplicationPtr _PeopleView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2130)
inline enum OlObjectClass _PeopleView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2131)
inline _NameSpacePtr _PeopleView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2132)
inline IDispatchPtr _PeopleView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2133)
inline HRESULT _PeopleView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2134)
inline ViewPtr _PeopleView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(2135)
inline HRESULT _PeopleView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2136)
inline HRESULT _PeopleView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2137)
inline HRESULT _PeopleView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2138)
inline _bstr_t _PeopleView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2139)
inline void _PeopleView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2140)
inline VARIANT_BOOL _PeopleView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2141)
inline void _PeopleView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2142)
inline _bstr_t _PeopleView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2143)
inline void _PeopleView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2144)
inline enum OlViewSaveOption _PeopleView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2145)
inline VARIANT_BOOL _PeopleView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2146)
inline enum OlViewType _PeopleView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2147)
inline _bstr_t _PeopleView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2148)
inline void _PeopleView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2149)
inline HRESULT _PeopleView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2150)
inline _bstr_t _PeopleView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2151)
inline void _PeopleView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2152)
inline _OrderFieldsPtr _PeopleView::GetSortFields ( ) {
    struct _OrderFields * _result = 0;
    HRESULT _hr = get_SortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OrderFieldsPtr(_result, false);
}

//
// interface _ThreadView wrapper method implementations
//

#pragma implementation_key(2153)
inline _ApplicationPtr _ThreadView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2154)
inline enum OlObjectClass _ThreadView::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2155)
inline _NameSpacePtr _ThreadView::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2156)
inline IDispatchPtr _ThreadView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2157)
inline HRESULT _ThreadView::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2158)
inline ViewPtr _ThreadView::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(2159)
inline HRESULT _ThreadView::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2160)
inline HRESULT _ThreadView::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2161)
inline HRESULT _ThreadView::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2162)
inline _bstr_t _ThreadView::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2163)
inline void _ThreadView::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2164)
inline VARIANT_BOOL _ThreadView::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2165)
inline void _ThreadView::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2166)
inline _bstr_t _ThreadView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2167)
inline void _ThreadView::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2168)
inline enum OlViewSaveOption _ThreadView::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2169)
inline VARIANT_BOOL _ThreadView::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2170)
inline enum OlViewType _ThreadView::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2171)
inline _bstr_t _ThreadView::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2172)
inline void _ThreadView::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2173)
inline HRESULT _ThreadView::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2174)
inline _bstr_t _ThreadView::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2175)
inline void _ThreadView::PutFilter ( _bstr_t Filter ) {
    HRESULT _hr = put_Filter(Filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Recipient wrapper method implementations
//

#pragma implementation_key(2176)
inline _ApplicationPtr Recipient::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2177)
inline enum OlObjectClass Recipient::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2178)
inline _NameSpacePtr Recipient::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2179)
inline IDispatchPtr Recipient::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2180)
inline _bstr_t Recipient::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2181)
inline AddressEntryPtr Recipient::GetAddressEntry ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = get_AddressEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2182)
inline void Recipient::PutRefAddressEntry ( struct AddressEntry * AddressEntry ) {
    HRESULT _hr = putref_AddressEntry(AddressEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2183)
inline _bstr_t Recipient::GetAutoResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2184)
inline void Recipient::PutAutoResponse ( _bstr_t AutoResponse ) {
    HRESULT _hr = put_AutoResponse(AutoResponse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2185)
inline enum OlDisplayType Recipient::GetDisplayType ( ) {
    enum OlDisplayType _result;
    HRESULT _hr = get_DisplayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2186)
inline _bstr_t Recipient::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2187)
inline long Recipient::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2188)
inline enum OlResponseStatus Recipient::GetMeetingResponseStatus ( ) {
    enum OlResponseStatus _result;
    HRESULT _hr = get_MeetingResponseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2189)
inline _bstr_t Recipient::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2190)
inline VARIANT_BOOL Recipient::GetResolved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Resolved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline enum OlTrackingStatus Recipient::GetTrackingStatus ( ) {
    enum OlTrackingStatus _result;
    HRESULT _hr = get_TrackingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2192)
inline void Recipient::PutTrackingStatus ( enum OlTrackingStatus TrackingStatus ) {
    HRESULT _hr = put_TrackingStatus(TrackingStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2193)
inline DATE Recipient::GetTrackingStatusTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TrackingStatusTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2194)
inline void Recipient::PutTrackingStatusTime ( DATE TrackingStatusTime ) {
    HRESULT _hr = put_TrackingStatusTime(TrackingStatusTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2195)
inline long Recipient::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2196)
inline void Recipient::PutType ( long Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2197)
inline HRESULT Recipient::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2198)
inline _bstr_t Recipient::FreeBusy ( DATE Start, long MinPerChar, const _variant_t & CompleteFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FreeBusy(Start, MinPerChar, CompleteFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2199)
inline VARIANT_BOOL Recipient::Resolve ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Resolve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2200)
inline _PropertyAccessorPtr Recipient::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(2201)
inline VARIANT_BOOL Recipient::GetSendable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sendable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2202)
inline void Recipient::PutSendable ( VARIANT_BOOL Sendable ) {
    HRESULT _hr = put_Sendable(Sendable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Recipients wrapper method implementations
//

#pragma implementation_key(2203)
inline _ApplicationPtr Recipients::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2204)
inline enum OlObjectClass Recipients::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2205)
inline _NameSpacePtr Recipients::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2206)
inline IDispatchPtr Recipients::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2207)
inline long Recipients::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2208)
inline RecipientPtr Recipients::Item ( const _variant_t & Index ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(2209)
inline RecipientPtr Recipients::Add ( _bstr_t Name ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(2210)
inline HRESULT Recipients::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2211)
inline VARIANT_BOOL Recipients::ResolveAll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ResolveAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _SendRuleAction wrapper method implementations
//

#pragma implementation_key(2212)
inline _ApplicationPtr _SendRuleAction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2213)
inline enum OlObjectClass _SendRuleAction::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2214)
inline _NameSpacePtr _SendRuleAction::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2215)
inline IDispatchPtr _SendRuleAction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2216)
inline VARIANT_BOOL _SendRuleAction::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2217)
inline void _SendRuleAction::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2218)
inline enum OlRuleActionType _SendRuleAction::GetActionType ( ) {
    enum OlRuleActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2219)
inline RecipientsPtr _SendRuleAction::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

//
// interface _ToOrFromRuleCondition wrapper method implementations
//

#pragma implementation_key(2220)
inline _ApplicationPtr _ToOrFromRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2221)
inline enum OlObjectClass _ToOrFromRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2222)
inline _NameSpacePtr _ToOrFromRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2223)
inline IDispatchPtr _ToOrFromRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2224)
inline VARIANT_BOOL _ToOrFromRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2225)
inline void _ToOrFromRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2226)
inline enum OlRuleConditionType _ToOrFromRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2227)
inline RecipientsPtr _ToOrFromRuleCondition::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

//
// interface AddressEntry wrapper method implementations
//

#pragma implementation_key(2228)
inline _ApplicationPtr AddressEntry::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2229)
inline enum OlObjectClass AddressEntry::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2230)
inline _NameSpacePtr AddressEntry::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2231)
inline IDispatchPtr AddressEntry::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2232)
inline _bstr_t AddressEntry::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2233)
inline void AddressEntry::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2234)
inline enum OlDisplayType AddressEntry::GetDisplayType ( ) {
    enum OlDisplayType _result;
    HRESULT _hr = get_DisplayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2235)
inline _bstr_t AddressEntry::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2236)
inline AddressEntryPtr AddressEntry::GetManager ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = get_Manager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2237)
inline IUnknownPtr AddressEntry::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2238)
inline void AddressEntry::PutMAPIOBJECT ( IUnknown * MAPIOBJECT ) {
    HRESULT _hr = put_MAPIOBJECT(MAPIOBJECT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2239)
inline AddressEntriesPtr AddressEntry::GetMembers ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(2240)
inline _bstr_t AddressEntry::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2241)
inline void AddressEntry::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2242)
inline _bstr_t AddressEntry::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2243)
inline void AddressEntry::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2244)
inline HRESULT AddressEntry::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2245)
inline HRESULT AddressEntry::Details ( const _variant_t & HWnd ) {
    HRESULT _hr = raw_Details(HWnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2246)
inline _bstr_t AddressEntry::GetFreeBusy ( DATE Start, long MinPerChar, const _variant_t & CompleteFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFreeBusy(Start, MinPerChar, CompleteFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2247)
inline HRESULT AddressEntry::Update ( const _variant_t & MakePermanent, const _variant_t & Refresh ) {
    HRESULT _hr = raw_Update(MakePermanent, Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2248)
inline HRESULT AddressEntry::UpdateFreeBusy ( ) {
    HRESULT _hr = raw_UpdateFreeBusy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2249)
inline _ContactItemPtr AddressEntry::GetContact ( ) {
    struct _ContactItem * _result = 0;
    HRESULT _hr = raw_GetContact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ContactItemPtr(_result, false);
}

#pragma implementation_key(2250)
inline _ExchangeUserPtr AddressEntry::GetExchangeUser ( ) {
    struct _ExchangeUser * _result = 0;
    HRESULT _hr = raw_GetExchangeUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExchangeUserPtr(_result, false);
}

#pragma implementation_key(2251)
inline enum OlAddressEntryUserType AddressEntry::GetAddressEntryUserType ( ) {
    enum OlAddressEntryUserType _result;
    HRESULT _hr = get_AddressEntryUserType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2252)
inline _ExchangeDistributionListPtr AddressEntry::GetExchangeDistributionList ( ) {
    struct _ExchangeDistributionList * _result = 0;
    HRESULT _hr = raw_GetExchangeDistributionList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExchangeDistributionListPtr(_result, false);
}

#pragma implementation_key(2253)
inline _PropertyAccessorPtr AddressEntry::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

//
// interface AddressEntries wrapper method implementations
//

#pragma implementation_key(2254)
inline _ApplicationPtr AddressEntries::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2255)
inline enum OlObjectClass AddressEntries::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2256)
inline _NameSpacePtr AddressEntries::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2257)
inline IDispatchPtr AddressEntries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2258)
inline long AddressEntries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2259)
inline AddressEntryPtr AddressEntries::Item ( const _variant_t & Index ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2260)
inline IUnknownPtr AddressEntries::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2261)
inline AddressEntryPtr AddressEntries::Add ( _bstr_t Type, const _variant_t & Name, const _variant_t & Address ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_Add(Type, Name, Address, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2262)
inline AddressEntryPtr AddressEntries::GetFirst ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2263)
inline AddressEntryPtr AddressEntries::GetLast ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2264)
inline AddressEntryPtr AddressEntries::GetNext ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2265)
inline AddressEntryPtr AddressEntries::GetPrevious ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2266)
inline HRESULT AddressEntries::Sort ( const _variant_t & Property, const _variant_t & Order ) {
    HRESULT _hr = raw_Sort(Property, Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Account wrapper method implementations
//

#pragma implementation_key(2267)
inline _ApplicationPtr _Account::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2268)
inline enum OlObjectClass _Account::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2269)
inline _NameSpacePtr _Account::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2270)
inline IDispatchPtr _Account::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2271)
inline enum OlAccountType _Account::GetAccountType ( ) {
    enum OlAccountType _result;
    HRESULT _hr = get_AccountType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2272)
inline _bstr_t _Account::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2273)
inline _bstr_t _Account::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2274)
inline _bstr_t _Account::GetSmtpAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmtpAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2275)
inline enum OlAutoDiscoverConnectionMode _Account::GetAutoDiscoverConnectionMode ( ) {
    enum OlAutoDiscoverConnectionMode _result;
    HRESULT _hr = get_AutoDiscoverConnectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2276)
inline RecipientPtr _Account::GetCurrentUser ( ) {
    struct Recipient * _result = 0;
    HRESULT _hr = get_CurrentUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(2277)
inline _bstr_t _Account::GetAutoDiscoverXml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoDiscoverXml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2278)
inline _StorePtr _Account::GetDeliveryStore ( ) {
    struct _Store * _result = 0;
    HRESULT _hr = get_DeliveryStore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StorePtr(_result, false);
}

#pragma implementation_key(2279)
inline enum OlExchangeConnectionMode _Account::GetExchangeConnectionMode ( ) {
    enum OlExchangeConnectionMode _result;
    HRESULT _hr = get_ExchangeConnectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2280)
inline _bstr_t _Account::GetExchangeMailboxServerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExchangeMailboxServerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2281)
inline _bstr_t _Account::GetExchangeMailboxServerVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExchangeMailboxServerVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2282)
inline AddressEntryPtr _Account::GetAddressEntryFromID ( _bstr_t ID ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetAddressEntryFromID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2283)
inline RecipientPtr _Account::GetRecipientFromID ( _bstr_t EntryID ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_GetRecipientFromID(EntryID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(2284)
inline IUnknownPtr _Account::GetIOlkAccount ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_IOlkAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _AccountSelector wrapper method implementations
//

#pragma implementation_key(2285)
inline _ApplicationPtr _AccountSelector::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2286)
inline enum OlObjectClass _AccountSelector::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2287)
inline _NameSpacePtr _AccountSelector::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2288)
inline IDispatchPtr _AccountSelector::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2289)
inline _AccountPtr _AccountSelector::GetSelectedAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_SelectedAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

//
// interface _Accounts wrapper method implementations
//

#pragma implementation_key(2290)
inline _ApplicationPtr _Accounts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2291)
inline enum OlObjectClass _Accounts::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2292)
inline _NameSpacePtr _Accounts::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2293)
inline IDispatchPtr _Accounts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2294)
inline long _Accounts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2295)
inline _AccountPtr _Accounts::Item ( const _variant_t & Index ) {
    struct _Account * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

//
// interface _ContactItem wrapper method implementations
//

#pragma implementation_key(2296)
inline _ApplicationPtr _ContactItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2297)
inline enum OlObjectClass _ContactItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2298)
inline _NameSpacePtr _ContactItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2299)
inline IDispatchPtr _ContactItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2300)
inline ActionsPtr _ContactItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(2301)
inline AttachmentsPtr _ContactItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(2302)
inline _bstr_t _ContactItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2303)
inline void _ContactItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2304)
inline _bstr_t _ContactItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2305)
inline void _ContactItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2306)
inline _bstr_t _ContactItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2307)
inline void _ContactItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2308)
inline _bstr_t _ContactItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2309)
inline void _ContactItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2310)
inline _bstr_t _ContactItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2311)
inline _bstr_t _ContactItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2312)
inline DATE _ContactItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2313)
inline _bstr_t _ContactItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2314)
inline FormDescriptionPtr _ContactItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(2315)
inline _InspectorPtr _ContactItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(2316)
inline enum OlImportance _ContactItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2317)
inline void _ContactItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2318)
inline DATE _ContactItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2319)
inline IUnknownPtr _ContactItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2320)
inline _bstr_t _ContactItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2321)
inline void _ContactItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2322)
inline _bstr_t _ContactItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2323)
inline void _ContactItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2324)
inline VARIANT_BOOL _ContactItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2325)
inline void _ContactItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2326)
inline long _ContactItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2327)
inline _bstr_t _ContactItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2328)
inline VARIANT_BOOL _ContactItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2329)
inline enum OlSensitivity _ContactItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2330)
inline void _ContactItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2331)
inline long _ContactItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2332)
inline _bstr_t _ContactItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2333)
inline void _ContactItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2334)
inline VARIANT_BOOL _ContactItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2335)
inline void _ContactItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2336)
inline UserPropertiesPtr _ContactItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(2337)
inline HRESULT _ContactItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2338)
inline IDispatchPtr _ContactItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2339)
inline HRESULT _ContactItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2340)
inline HRESULT _ContactItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2341)
inline IDispatchPtr _ContactItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2342)
inline HRESULT _ContactItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2343)
inline HRESULT _ContactItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2344)
inline HRESULT _ContactItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2345)
inline _bstr_t _ContactItem::GetAccount ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Account(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2346)
inline void _ContactItem::PutAccount ( _bstr_t Account ) {
    HRESULT _hr = put_Account(Account);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2347)
inline DATE _ContactItem::GetAnniversary ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Anniversary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2348)
inline void _ContactItem::PutAnniversary ( DATE Anniversary ) {
    HRESULT _hr = put_Anniversary(Anniversary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2349)
inline _bstr_t _ContactItem::GetAssistantName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2350)
inline void _ContactItem::PutAssistantName ( _bstr_t AssistantName ) {
    HRESULT _hr = put_AssistantName(AssistantName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2351)
inline _bstr_t _ContactItem::GetAssistantTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2352)
inline void _ContactItem::PutAssistantTelephoneNumber ( _bstr_t AssistantTelephoneNumber ) {
    HRESULT _hr = put_AssistantTelephoneNumber(AssistantTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2353)
inline DATE _ContactItem::GetBirthday ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Birthday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2354)
inline void _ContactItem::PutBirthday ( DATE Birthday ) {
    HRESULT _hr = put_Birthday(Birthday);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2355)
inline _bstr_t _ContactItem::GetBusiness2TelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Business2TelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2356)
inline void _ContactItem::PutBusiness2TelephoneNumber ( _bstr_t Business2TelephoneNumber ) {
    HRESULT _hr = put_Business2TelephoneNumber(Business2TelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2357)
inline _bstr_t _ContactItem::GetBusinessAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2358)
inline void _ContactItem::PutBusinessAddress ( _bstr_t BusinessAddress ) {
    HRESULT _hr = put_BusinessAddress(BusinessAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2359)
inline _bstr_t _ContactItem::GetBusinessAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2360)
inline void _ContactItem::PutBusinessAddressCity ( _bstr_t BusinessAddressCity ) {
    HRESULT _hr = put_BusinessAddressCity(BusinessAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2361)
inline _bstr_t _ContactItem::GetBusinessAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2362)
inline void _ContactItem::PutBusinessAddressCountry ( _bstr_t BusinessAddressCountry ) {
    HRESULT _hr = put_BusinessAddressCountry(BusinessAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2363)
inline _bstr_t _ContactItem::GetBusinessAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2364)
inline void _ContactItem::PutBusinessAddressPostalCode ( _bstr_t BusinessAddressPostalCode ) {
    HRESULT _hr = put_BusinessAddressPostalCode(BusinessAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2365)
inline _bstr_t _ContactItem::GetBusinessAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2366)
inline void _ContactItem::PutBusinessAddressPostOfficeBox ( _bstr_t BusinessAddressPostOfficeBox ) {
    HRESULT _hr = put_BusinessAddressPostOfficeBox(BusinessAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2367)
inline _bstr_t _ContactItem::GetBusinessAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2368)
inline void _ContactItem::PutBusinessAddressState ( _bstr_t BusinessAddressState ) {
    HRESULT _hr = put_BusinessAddressState(BusinessAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2369)
inline _bstr_t _ContactItem::GetBusinessAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2370)
inline void _ContactItem::PutBusinessAddressStreet ( _bstr_t BusinessAddressStreet ) {
    HRESULT _hr = put_BusinessAddressStreet(BusinessAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2371)
inline _bstr_t _ContactItem::GetBusinessFaxNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessFaxNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2372)
inline void _ContactItem::PutBusinessFaxNumber ( _bstr_t BusinessFaxNumber ) {
    HRESULT _hr = put_BusinessFaxNumber(BusinessFaxNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2373)
inline _bstr_t _ContactItem::GetBusinessHomePage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessHomePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2374)
inline void _ContactItem::PutBusinessHomePage ( _bstr_t BusinessHomePage ) {
    HRESULT _hr = put_BusinessHomePage(BusinessHomePage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2375)
inline _bstr_t _ContactItem::GetBusinessTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2376)
inline void _ContactItem::PutBusinessTelephoneNumber ( _bstr_t BusinessTelephoneNumber ) {
    HRESULT _hr = put_BusinessTelephoneNumber(BusinessTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2377)
inline _bstr_t _ContactItem::GetCallbackTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallbackTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2378)
inline void _ContactItem::PutCallbackTelephoneNumber ( _bstr_t CallbackTelephoneNumber ) {
    HRESULT _hr = put_CallbackTelephoneNumber(CallbackTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2379)
inline _bstr_t _ContactItem::GetCarTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CarTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2380)
inline void _ContactItem::PutCarTelephoneNumber ( _bstr_t CarTelephoneNumber ) {
    HRESULT _hr = put_CarTelephoneNumber(CarTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2381)
inline _bstr_t _ContactItem::GetChildren ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2382)
inline void _ContactItem::PutChildren ( _bstr_t Children ) {
    HRESULT _hr = put_Children(Children);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2383)
inline _bstr_t _ContactItem::GetCompanyAndFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyAndFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2384)
inline _bstr_t _ContactItem::GetCompanyLastFirstNoSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyLastFirstNoSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2385)
inline _bstr_t _ContactItem::GetCompanyLastFirstSpaceOnly ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyLastFirstSpaceOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2386)
inline _bstr_t _ContactItem::GetCompanyMainTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyMainTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2387)
inline void _ContactItem::PutCompanyMainTelephoneNumber ( _bstr_t CompanyMainTelephoneNumber ) {
    HRESULT _hr = put_CompanyMainTelephoneNumber(CompanyMainTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2388)
inline _bstr_t _ContactItem::GetCompanyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2389)
inline void _ContactItem::PutCompanyName ( _bstr_t CompanyName ) {
    HRESULT _hr = put_CompanyName(CompanyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2390)
inline _bstr_t _ContactItem::GetComputerNetworkName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComputerNetworkName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2391)
inline void _ContactItem::PutComputerNetworkName ( _bstr_t ComputerNetworkName ) {
    HRESULT _hr = put_ComputerNetworkName(ComputerNetworkName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2392)
inline _bstr_t _ContactItem::GetCustomerID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2393)
inline void _ContactItem::PutCustomerID ( _bstr_t CustomerID ) {
    HRESULT _hr = put_CustomerID(CustomerID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2394)
inline _bstr_t _ContactItem::GetDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Department(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2395)
inline void _ContactItem::PutDepartment ( _bstr_t Department ) {
    HRESULT _hr = put_Department(Department);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2396)
inline _bstr_t _ContactItem::GetEmail1Address ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2397)
inline void _ContactItem::PutEmail1Address ( _bstr_t Email1Address ) {
    HRESULT _hr = put_Email1Address(Email1Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2398)
inline _bstr_t _ContactItem::GetEmail1AddressType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2399)
inline void _ContactItem::PutEmail1AddressType ( _bstr_t Email1AddressType ) {
    HRESULT _hr = put_Email1AddressType(Email1AddressType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2400)
inline _bstr_t _ContactItem::GetEmail1DisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2401)
inline _bstr_t _ContactItem::GetEmail1EntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2402)
inline _bstr_t _ContactItem::GetEmail2Address ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2403)
inline void _ContactItem::PutEmail2Address ( _bstr_t Email2Address ) {
    HRESULT _hr = put_Email2Address(Email2Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2404)
inline _bstr_t _ContactItem::GetEmail2AddressType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2405)
inline void _ContactItem::PutEmail2AddressType ( _bstr_t Email2AddressType ) {
    HRESULT _hr = put_Email2AddressType(Email2AddressType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2406)
inline _bstr_t _ContactItem::GetEmail2DisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2407)
inline _bstr_t _ContactItem::GetEmail2EntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2408)
inline _bstr_t _ContactItem::GetEmail3Address ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2409)
inline void _ContactItem::PutEmail3Address ( _bstr_t Email3Address ) {
    HRESULT _hr = put_Email3Address(Email3Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2410)
inline _bstr_t _ContactItem::GetEmail3AddressType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2411)
inline void _ContactItem::PutEmail3AddressType ( _bstr_t Email3AddressType ) {
    HRESULT _hr = put_Email3AddressType(Email3AddressType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2412)
inline _bstr_t _ContactItem::GetEmail3DisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2413)
inline _bstr_t _ContactItem::GetEmail3EntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2414)
inline _bstr_t _ContactItem::GetFileAs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileAs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2415)
inline void _ContactItem::PutFileAs ( _bstr_t FileAs ) {
    HRESULT _hr = put_FileAs(FileAs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2416)
inline _bstr_t _ContactItem::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2417)
inline void _ContactItem::PutFirstName ( _bstr_t FirstName ) {
    HRESULT _hr = put_FirstName(FirstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2418)
inline _bstr_t _ContactItem::GetFTPSite ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FTPSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2419)
inline void _ContactItem::PutFTPSite ( _bstr_t FTPSite ) {
    HRESULT _hr = put_FTPSite(FTPSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2420)
inline _bstr_t _ContactItem::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2421)
inline void _ContactItem::PutFullName ( _bstr_t FullName ) {
    HRESULT _hr = put_FullName(FullName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2422)
inline _bstr_t _ContactItem::GetFullNameAndCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullNameAndCompany(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2423)
inline enum OlGender _ContactItem::GetGender ( ) {
    enum OlGender _result;
    HRESULT _hr = get_Gender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2424)
inline void _ContactItem::PutGender ( enum OlGender Gender ) {
    HRESULT _hr = put_Gender(Gender);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2425)
inline _bstr_t _ContactItem::GetGovernmentIDNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GovernmentIDNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2426)
inline void _ContactItem::PutGovernmentIDNumber ( _bstr_t GovernmentIDNumber ) {
    HRESULT _hr = put_GovernmentIDNumber(GovernmentIDNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2427)
inline _bstr_t _ContactItem::GetHobby ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Hobby(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2428)
inline void _ContactItem::PutHobby ( _bstr_t Hobby ) {
    HRESULT _hr = put_Hobby(Hobby);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2429)
inline _bstr_t _ContactItem::GetHome2TelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Home2TelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2430)
inline void _ContactItem::PutHome2TelephoneNumber ( _bstr_t Home2TelephoneNumber ) {
    HRESULT _hr = put_Home2TelephoneNumber(Home2TelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2431)
inline _bstr_t _ContactItem::GetHomeAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2432)
inline void _ContactItem::PutHomeAddress ( _bstr_t HomeAddress ) {
    HRESULT _hr = put_HomeAddress(HomeAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2433)
inline _bstr_t _ContactItem::GetHomeAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2434)
inline void _ContactItem::PutHomeAddressCity ( _bstr_t HomeAddressCity ) {
    HRESULT _hr = put_HomeAddressCity(HomeAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2435)
inline _bstr_t _ContactItem::GetHomeAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2436)
inline void _ContactItem::PutHomeAddressCountry ( _bstr_t HomeAddressCountry ) {
    HRESULT _hr = put_HomeAddressCountry(HomeAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2437)
inline _bstr_t _ContactItem::GetHomeAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2438)
inline void _ContactItem::PutHomeAddressPostalCode ( _bstr_t HomeAddressPostalCode ) {
    HRESULT _hr = put_HomeAddressPostalCode(HomeAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2439)
inline _bstr_t _ContactItem::GetHomeAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2440)
inline void _ContactItem::PutHomeAddressPostOfficeBox ( _bstr_t HomeAddressPostOfficeBox ) {
    HRESULT _hr = put_HomeAddressPostOfficeBox(HomeAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2441)
inline _bstr_t _ContactItem::GetHomeAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2442)
inline void _ContactItem::PutHomeAddressState ( _bstr_t HomeAddressState ) {
    HRESULT _hr = put_HomeAddressState(HomeAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2443)
inline _bstr_t _ContactItem::GetHomeAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2444)
inline void _ContactItem::PutHomeAddressStreet ( _bstr_t HomeAddressStreet ) {
    HRESULT _hr = put_HomeAddressStreet(HomeAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2445)
inline _bstr_t _ContactItem::GetHomeFaxNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeFaxNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2446)
inline void _ContactItem::PutHomeFaxNumber ( _bstr_t HomeFaxNumber ) {
    HRESULT _hr = put_HomeFaxNumber(HomeFaxNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2447)
inline _bstr_t _ContactItem::GetHomeTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2448)
inline void _ContactItem::PutHomeTelephoneNumber ( _bstr_t HomeTelephoneNumber ) {
    HRESULT _hr = put_HomeTelephoneNumber(HomeTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2449)
inline _bstr_t _ContactItem::GetInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Initials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2450)
inline void _ContactItem::PutInitials ( _bstr_t Initials ) {
    HRESULT _hr = put_Initials(Initials);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2451)
inline _bstr_t _ContactItem::GetInternetFreeBusyAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InternetFreeBusyAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2452)
inline void _ContactItem::PutInternetFreeBusyAddress ( _bstr_t InternetFreeBusyAddress ) {
    HRESULT _hr = put_InternetFreeBusyAddress(InternetFreeBusyAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2453)
inline _bstr_t _ContactItem::GetISDNNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ISDNNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2454)
inline void _ContactItem::PutISDNNumber ( _bstr_t ISDNNumber ) {
    HRESULT _hr = put_ISDNNumber(ISDNNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2455)
inline _bstr_t _ContactItem::GetJobTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JobTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2456)
inline void _ContactItem::PutJobTitle ( _bstr_t JobTitle ) {
    HRESULT _hr = put_JobTitle(JobTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2457)
inline VARIANT_BOOL _ContactItem::GetJournal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Journal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2458)
inline void _ContactItem::PutJournal ( VARIANT_BOOL Journal ) {
    HRESULT _hr = put_Journal(Journal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2459)
inline _bstr_t _ContactItem::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2460)
inline void _ContactItem::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2461)
inline _bstr_t _ContactItem::GetLastFirstAndSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstAndSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2462)
inline _bstr_t _ContactItem::GetLastFirstNoSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstNoSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2463)
inline _bstr_t _ContactItem::GetLastFirstNoSpaceCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstNoSpaceCompany(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2464)
inline _bstr_t _ContactItem::GetLastFirstSpaceOnly ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstSpaceOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2465)
inline _bstr_t _ContactItem::GetLastFirstSpaceOnlyCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstSpaceOnlyCompany(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2466)
inline _bstr_t _ContactItem::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2467)
inline void _ContactItem::PutLastName ( _bstr_t LastName ) {
    HRESULT _hr = put_LastName(LastName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2468)
inline _bstr_t _ContactItem::GetLastNameAndFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastNameAndFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2469)
inline _bstr_t _ContactItem::GetMailingAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2470)
inline void _ContactItem::PutMailingAddress ( _bstr_t MailingAddress ) {
    HRESULT _hr = put_MailingAddress(MailingAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2471)
inline _bstr_t _ContactItem::GetMailingAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2472)
inline void _ContactItem::PutMailingAddressCity ( _bstr_t MailingAddressCity ) {
    HRESULT _hr = put_MailingAddressCity(MailingAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2473)
inline _bstr_t _ContactItem::GetMailingAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2474)
inline void _ContactItem::PutMailingAddressCountry ( _bstr_t MailingAddressCountry ) {
    HRESULT _hr = put_MailingAddressCountry(MailingAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2475)
inline _bstr_t _ContactItem::GetMailingAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2476)
inline void _ContactItem::PutMailingAddressPostalCode ( _bstr_t MailingAddressPostalCode ) {
    HRESULT _hr = put_MailingAddressPostalCode(MailingAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2477)
inline _bstr_t _ContactItem::GetMailingAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2478)
inline void _ContactItem::PutMailingAddressPostOfficeBox ( _bstr_t MailingAddressPostOfficeBox ) {
    HRESULT _hr = put_MailingAddressPostOfficeBox(MailingAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2479)
inline _bstr_t _ContactItem::GetMailingAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2480)
inline void _ContactItem::PutMailingAddressState ( _bstr_t MailingAddressState ) {
    HRESULT _hr = put_MailingAddressState(MailingAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2481)
inline _bstr_t _ContactItem::GetMailingAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2482)
inline void _ContactItem::PutMailingAddressStreet ( _bstr_t MailingAddressStreet ) {
    HRESULT _hr = put_MailingAddressStreet(MailingAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2483)
inline _bstr_t _ContactItem::GetManagerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ManagerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2484)
inline void _ContactItem::PutManagerName ( _bstr_t ManagerName ) {
    HRESULT _hr = put_ManagerName(ManagerName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2485)
inline _bstr_t _ContactItem::GetMiddleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiddleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2486)
inline void _ContactItem::PutMiddleName ( _bstr_t MiddleName ) {
    HRESULT _hr = put_MiddleName(MiddleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2487)
inline _bstr_t _ContactItem::GetMobileTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MobileTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2488)
inline void _ContactItem::PutMobileTelephoneNumber ( _bstr_t MobileTelephoneNumber ) {
    HRESULT _hr = put_MobileTelephoneNumber(MobileTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2489)
inline _bstr_t _ContactItem::GetNetMeetingAlias ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingAlias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2490)
inline void _ContactItem::PutNetMeetingAlias ( _bstr_t NetMeetingAlias ) {
    HRESULT _hr = put_NetMeetingAlias(NetMeetingAlias);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2491)
inline _bstr_t _ContactItem::GetNetMeetingServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2492)
inline void _ContactItem::PutNetMeetingServer ( _bstr_t NetMeetingServer ) {
    HRESULT _hr = put_NetMeetingServer(NetMeetingServer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2493)
inline _bstr_t _ContactItem::GetNickName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NickName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2494)
inline void _ContactItem::PutNickName ( _bstr_t NickName ) {
    HRESULT _hr = put_NickName(NickName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2495)
inline _bstr_t _ContactItem::GetOfficeLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OfficeLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2496)
inline void _ContactItem::PutOfficeLocation ( _bstr_t OfficeLocation ) {
    HRESULT _hr = put_OfficeLocation(OfficeLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2497)
inline _bstr_t _ContactItem::GetOrganizationalIDNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrganizationalIDNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2498)
inline void _ContactItem::PutOrganizationalIDNumber ( _bstr_t OrganizationalIDNumber ) {
    HRESULT _hr = put_OrganizationalIDNumber(OrganizationalIDNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2499)
inline _bstr_t _ContactItem::GetOtherAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2500)
inline void _ContactItem::PutOtherAddress ( _bstr_t OtherAddress ) {
    HRESULT _hr = put_OtherAddress(OtherAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2501)
inline _bstr_t _ContactItem::GetOtherAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2502)
inline void _ContactItem::PutOtherAddressCity ( _bstr_t OtherAddressCity ) {
    HRESULT _hr = put_OtherAddressCity(OtherAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2503)
inline _bstr_t _ContactItem::GetOtherAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2504)
inline void _ContactItem::PutOtherAddressCountry ( _bstr_t OtherAddressCountry ) {
    HRESULT _hr = put_OtherAddressCountry(OtherAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2505)
inline _bstr_t _ContactItem::GetOtherAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2506)
inline void _ContactItem::PutOtherAddressPostalCode ( _bstr_t OtherAddressPostalCode ) {
    HRESULT _hr = put_OtherAddressPostalCode(OtherAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2507)
inline _bstr_t _ContactItem::GetOtherAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2508)
inline void _ContactItem::PutOtherAddressPostOfficeBox ( _bstr_t OtherAddressPostOfficeBox ) {
    HRESULT _hr = put_OtherAddressPostOfficeBox(OtherAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2509)
inline _bstr_t _ContactItem::GetOtherAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2510)
inline void _ContactItem::PutOtherAddressState ( _bstr_t OtherAddressState ) {
    HRESULT _hr = put_OtherAddressState(OtherAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2511)
inline _bstr_t _ContactItem::GetOtherAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2512)
inline void _ContactItem::PutOtherAddressStreet ( _bstr_t OtherAddressStreet ) {
    HRESULT _hr = put_OtherAddressStreet(OtherAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2513)
inline _bstr_t _ContactItem::GetOtherFaxNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherFaxNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2514)
inline void _ContactItem::PutOtherFaxNumber ( _bstr_t OtherFaxNumber ) {
    HRESULT _hr = put_OtherFaxNumber(OtherFaxNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2515)
inline _bstr_t _ContactItem::GetOtherTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2516)
inline void _ContactItem::PutOtherTelephoneNumber ( _bstr_t OtherTelephoneNumber ) {
    HRESULT _hr = put_OtherTelephoneNumber(OtherTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2517)
inline _bstr_t _ContactItem::GetPagerNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PagerNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2518)
inline void _ContactItem::PutPagerNumber ( _bstr_t PagerNumber ) {
    HRESULT _hr = put_PagerNumber(PagerNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2519)
inline _bstr_t _ContactItem::GetPersonalHomePage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PersonalHomePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2520)
inline void _ContactItem::PutPersonalHomePage ( _bstr_t PersonalHomePage ) {
    HRESULT _hr = put_PersonalHomePage(PersonalHomePage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2521)
inline _bstr_t _ContactItem::GetPrimaryTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimaryTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2522)
inline void _ContactItem::PutPrimaryTelephoneNumber ( _bstr_t PrimaryTelephoneNumber ) {
    HRESULT _hr = put_PrimaryTelephoneNumber(PrimaryTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2523)
inline _bstr_t _ContactItem::GetProfession ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Profession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2524)
inline void _ContactItem::PutProfession ( _bstr_t Profession ) {
    HRESULT _hr = put_Profession(Profession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2525)
inline _bstr_t _ContactItem::GetRadioTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RadioTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2526)
inline void _ContactItem::PutRadioTelephoneNumber ( _bstr_t RadioTelephoneNumber ) {
    HRESULT _hr = put_RadioTelephoneNumber(RadioTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2527)
inline _bstr_t _ContactItem::GetReferredBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferredBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2528)
inline void _ContactItem::PutReferredBy ( _bstr_t ReferredBy ) {
    HRESULT _hr = put_ReferredBy(ReferredBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2529)
inline enum OlMailingAddress _ContactItem::GetSelectedMailingAddress ( ) {
    enum OlMailingAddress _result;
    HRESULT _hr = get_SelectedMailingAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2530)
inline void _ContactItem::PutSelectedMailingAddress ( enum OlMailingAddress SelectedMailingAddress ) {
    HRESULT _hr = put_SelectedMailingAddress(SelectedMailingAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2531)
inline _bstr_t _ContactItem::GetSpouse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Spouse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2532)
inline void _ContactItem::PutSpouse ( _bstr_t Spouse ) {
    HRESULT _hr = put_Spouse(Spouse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2533)
inline _bstr_t _ContactItem::GetSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Suffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2534)
inline void _ContactItem::PutSuffix ( _bstr_t Suffix ) {
    HRESULT _hr = put_Suffix(Suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2535)
inline _bstr_t _ContactItem::GetTelexNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TelexNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2536)
inline void _ContactItem::PutTelexNumber ( _bstr_t TelexNumber ) {
    HRESULT _hr = put_TelexNumber(TelexNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2537)
inline _bstr_t _ContactItem::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2538)
inline void _ContactItem::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2539)
inline _bstr_t _ContactItem::GetTTYTDDTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TTYTDDTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2540)
inline void _ContactItem::PutTTYTDDTelephoneNumber ( _bstr_t TTYTDDTelephoneNumber ) {
    HRESULT _hr = put_TTYTDDTelephoneNumber(TTYTDDTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2541)
inline _bstr_t _ContactItem::GetUser1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2542)
inline void _ContactItem::PutUser1 ( _bstr_t User1 ) {
    HRESULT _hr = put_User1(User1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2543)
inline _bstr_t _ContactItem::GetUser2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2544)
inline void _ContactItem::PutUser2 ( _bstr_t User2 ) {
    HRESULT _hr = put_User2(User2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2545)
inline _bstr_t _ContactItem::GetUser3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2546)
inline void _ContactItem::PutUser3 ( _bstr_t User3 ) {
    HRESULT _hr = put_User3(User3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2547)
inline _bstr_t _ContactItem::GetUser4 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2548)
inline void _ContactItem::PutUser4 ( _bstr_t User4 ) {
    HRESULT _hr = put_User4(User4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2549)
inline _bstr_t _ContactItem::GetUserCertificate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2550)
inline void _ContactItem::PutUserCertificate ( _bstr_t UserCertificate ) {
    HRESULT _hr = put_UserCertificate(UserCertificate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2551)
inline _bstr_t _ContactItem::GetWebPage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WebPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2552)
inline void _ContactItem::PutWebPage ( _bstr_t WebPage ) {
    HRESULT _hr = put_WebPage(WebPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2553)
inline _bstr_t _ContactItem::GetYomiCompanyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiCompanyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2554)
inline void _ContactItem::PutYomiCompanyName ( _bstr_t YomiCompanyName ) {
    HRESULT _hr = put_YomiCompanyName(YomiCompanyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2555)
inline _bstr_t _ContactItem::GetYomiFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2556)
inline void _ContactItem::PutYomiFirstName ( _bstr_t YomiFirstName ) {
    HRESULT _hr = put_YomiFirstName(YomiFirstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2557)
inline _bstr_t _ContactItem::GetYomiLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2558)
inline void _ContactItem::PutYomiLastName ( _bstr_t YomiLastName ) {
    HRESULT _hr = put_YomiLastName(YomiLastName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2559)
inline _MailItemPtr _ContactItem::ForwardAsVcard ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ForwardAsVcard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(2560)
inline LinksPtr _ContactItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(2561)
inline ItemPropertiesPtr _ContactItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(2562)
inline _bstr_t _ContactItem::GetLastFirstNoSpaceAndSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstNoSpaceAndSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2563)
inline enum OlDownloadState _ContactItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2564)
inline HRESULT _ContactItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2565)
inline _bstr_t _ContactItem::GetIMAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2566)
inline void _ContactItem::PutIMAddress ( _bstr_t IMAddress ) {
    HRESULT _hr = put_IMAddress(IMAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2567)
inline enum OlRemoteStatus _ContactItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2568)
inline void _ContactItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2569)
inline void _ContactItem::PutEmail1DisplayName ( _bstr_t Email1DisplayName ) {
    HRESULT _hr = put_Email1DisplayName(Email1DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2570)
inline void _ContactItem::PutEmail2DisplayName ( _bstr_t Email2DisplayName ) {
    HRESULT _hr = put_Email2DisplayName(Email2DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2571)
inline void _ContactItem::PutEmail3DisplayName ( _bstr_t Email3DisplayName ) {
    HRESULT _hr = put_Email3DisplayName(Email3DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2572)
inline VARIANT_BOOL _ContactItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2573)
inline VARIANT_BOOL _ContactItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2574)
inline ConflictsPtr _ContactItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(2575)
inline HRESULT _ContactItem::AddPicture ( _bstr_t Path ) {
    HRESULT _hr = raw_AddPicture(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2576)
inline HRESULT _ContactItem::RemovePicture ( ) {
    HRESULT _hr = raw_RemovePicture();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2577)
inline VARIANT_BOOL _ContactItem::GetHasPicture ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2578)
inline _PropertyAccessorPtr _ContactItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(2579)
inline _MailItemPtr _ContactItem::ForwardAsBusinessCard ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ForwardAsBusinessCard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(2580)
inline HRESULT _ContactItem::ShowBusinessCardEditor ( ) {
    HRESULT _hr = raw_ShowBusinessCardEditor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2581)
inline HRESULT _ContactItem::SaveBusinessCardImage ( _bstr_t Path ) {
    HRESULT _hr = raw_SaveBusinessCardImage(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2582)
inline HRESULT _ContactItem::ShowCheckPhoneDialog ( enum OlContactPhoneNumber PhoneNumber ) {
    HRESULT _hr = raw_ShowCheckPhoneDialog(PhoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2583)
inline _bstr_t _ContactItem::GetTaskSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2584)
inline void _ContactItem::PutTaskSubject ( _bstr_t TaskSubject ) {
    HRESULT _hr = put_TaskSubject(TaskSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2585)
inline DATE _ContactItem::GetTaskDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskDueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2586)
inline void _ContactItem::PutTaskDueDate ( DATE TaskDueDate ) {
    HRESULT _hr = put_TaskDueDate(TaskDueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2587)
inline DATE _ContactItem::GetTaskStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskStartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline void _ContactItem::PutTaskStartDate ( DATE TaskStartDate ) {
    HRESULT _hr = put_TaskStartDate(TaskStartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2589)
inline DATE _ContactItem::GetTaskCompletedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskCompletedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2590)
inline void _ContactItem::PutTaskCompletedDate ( DATE TaskCompletedDate ) {
    HRESULT _hr = put_TaskCompletedDate(TaskCompletedDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2591)
inline DATE _ContactItem::GetToDoTaskOrdinal ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ToDoTaskOrdinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2592)
inline void _ContactItem::PutToDoTaskOrdinal ( DATE ToDoTaskOrdinal ) {
    HRESULT _hr = put_ToDoTaskOrdinal(ToDoTaskOrdinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2593)
inline VARIANT_BOOL _ContactItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2594)
inline void _ContactItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2595)
inline VARIANT_BOOL _ContactItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2596)
inline void _ContactItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2597)
inline VARIANT_BOOL _ContactItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2598)
inline void _ContactItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2599)
inline _bstr_t _ContactItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2600)
inline void _ContactItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2601)
inline DATE _ContactItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2602)
inline void _ContactItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2603)
inline HRESULT _ContactItem::MarkAsTask ( enum OlMarkInterval MarkInterval ) {
    HRESULT _hr = raw_MarkAsTask(MarkInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2604)
inline HRESULT _ContactItem::ClearTaskFlag ( ) {
    HRESULT _hr = raw_ClearTaskFlag();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2605)
inline VARIANT_BOOL _ContactItem::GetIsMarkedAsTask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMarkedAsTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2606)
inline _bstr_t _ContactItem::GetBusinessCardLayoutXml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessCardLayoutXml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2607)
inline void _ContactItem::PutBusinessCardLayoutXml ( _bstr_t BusinessCardLayoutXml ) {
    HRESULT _hr = put_BusinessCardLayoutXml(BusinessCardLayoutXml);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2608)
inline HRESULT _ContactItem::ResetBusinessCard ( ) {
    HRESULT _hr = raw_ResetBusinessCard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2609)
inline HRESULT _ContactItem::AddBusinessCardLogoPicture ( _bstr_t Path ) {
    HRESULT _hr = raw_AddBusinessCardLogoPicture(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2610)
inline enum OlBusinessCardType _ContactItem::GetBusinessCardType ( ) {
    enum OlBusinessCardType _result;
    HRESULT _hr = get_BusinessCardType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2611)
inline _ConversationPtr _ContactItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(2612)
inline _bstr_t _ContactItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2613)
inline _variant_t _ContactItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2614)
inline void _ContactItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2615)
inline HRESULT _ContactItem::ShowCheckFullNameDialog ( ) {
    HRESULT _hr = raw_ShowCheckFullNameDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2616)
inline HRESULT _ContactItem::ShowCheckAddressDialog ( enum OlMailingAddress MailingAddress ) {
    HRESULT _hr = raw_ShowCheckAddressDialog(MailingAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MAPIFolder wrapper method implementations
//

#pragma implementation_key(2617)
inline _ApplicationPtr MAPIFolder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2618)
inline enum OlObjectClass MAPIFolder::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline _NameSpacePtr MAPIFolder::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2620)
inline IDispatchPtr MAPIFolder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2621)
inline enum OlItemType MAPIFolder::GetDefaultItemType ( ) {
    enum OlItemType _result;
    HRESULT _hr = get_DefaultItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2622)
inline _bstr_t MAPIFolder::GetDefaultMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultMessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2623)
inline _bstr_t MAPIFolder::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2624)
inline void MAPIFolder::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2625)
inline _bstr_t MAPIFolder::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2626)
inline _FoldersPtr MAPIFolder::GetFolders ( ) {
    struct _Folders * _result = 0;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FoldersPtr(_result, false);
}

#pragma implementation_key(2627)
inline _ItemsPtr MAPIFolder::GetItems ( ) {
    struct _Items * _result = 0;
    HRESULT _hr = get_Items(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ItemsPtr(_result, false);
}

#pragma implementation_key(2628)
inline _bstr_t MAPIFolder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2629)
inline void MAPIFolder::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2630)
inline _bstr_t MAPIFolder::GetStoreID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StoreID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2631)
inline long MAPIFolder::GetUnReadItemCount ( ) {
    long _result = 0;
    HRESULT _hr = get_UnReadItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2632)
inline MAPIFolderPtr MAPIFolder::CopyTo ( struct MAPIFolder * DestinationFolder ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_CopyTo(DestinationFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2633)
inline HRESULT MAPIFolder::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2634)
inline HRESULT MAPIFolder::Display ( ) {
    HRESULT _hr = raw_Display();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2635)
inline _ExplorerPtr MAPIFolder::GetExplorer ( const _variant_t & DisplayMode ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_GetExplorer(DisplayMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

#pragma implementation_key(2636)
inline HRESULT MAPIFolder::MoveTo ( struct MAPIFolder * DestinationFolder ) {
    HRESULT _hr = raw_MoveTo(DestinationFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2637)
inline IDispatchPtr MAPIFolder::GetUserPermissions ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UserPermissions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2638)
inline VARIANT_BOOL MAPIFolder::GetWebViewOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebViewOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2639)
inline void MAPIFolder::PutWebViewOn ( VARIANT_BOOL WebViewOn ) {
    HRESULT _hr = put_WebViewOn(WebViewOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2640)
inline _bstr_t MAPIFolder::GetWebViewURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WebViewURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2641)
inline void MAPIFolder::PutWebViewURL ( _bstr_t WebViewURL ) {
    HRESULT _hr = put_WebViewURL(WebViewURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2642)
inline VARIANT_BOOL MAPIFolder::GetWebViewAllowNavigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebViewAllowNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2643)
inline void MAPIFolder::PutWebViewAllowNavigation ( VARIANT_BOOL WebViewAllowNavigation ) {
    HRESULT _hr = put_WebViewAllowNavigation(WebViewAllowNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2644)
inline HRESULT MAPIFolder::AddToPFFavorites ( ) {
    HRESULT _hr = raw_AddToPFFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2645)
inline _bstr_t MAPIFolder::GetAddressBookName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddressBookName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2646)
inline void MAPIFolder::PutAddressBookName ( _bstr_t AddressBookName ) {
    HRESULT _hr = put_AddressBookName(AddressBookName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2647)
inline VARIANT_BOOL MAPIFolder::GetShowAsOutlookAB ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAsOutlookAB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2648)
inline void MAPIFolder::PutShowAsOutlookAB ( VARIANT_BOOL ShowAsOutlookAB ) {
    HRESULT _hr = put_ShowAsOutlookAB(ShowAsOutlookAB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2649)
inline _bstr_t MAPIFolder::GetFolderPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2650)
inline HRESULT MAPIFolder::AddToFavorites ( const _variant_t & fNoUI, const _variant_t & Name ) {
    HRESULT _hr = raw_AddToFavorites(fNoUI, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2651)
inline VARIANT_BOOL MAPIFolder::GetInAppFolderSyncObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InAppFolderSyncObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2652)
inline void MAPIFolder::PutInAppFolderSyncObject ( VARIANT_BOOL InAppFolderSyncObject ) {
    HRESULT _hr = put_InAppFolderSyncObject(InAppFolderSyncObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2653)
inline ViewPtr MAPIFolder::GetCurrentView ( ) {
    struct View * _result = 0;
    HRESULT _hr = get_CurrentView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(2654)
inline VARIANT_BOOL MAPIFolder::GetCustomViewsOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomViewsOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2655)
inline void MAPIFolder::PutCustomViewsOnly ( VARIANT_BOOL CustomViewsOnly ) {
    HRESULT _hr = put_CustomViewsOnly(CustomViewsOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2656)
inline _ViewsPtr MAPIFolder::GetViews ( ) {
    struct _Views * _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewsPtr(_result, false);
}

#pragma implementation_key(2657)
inline IUnknownPtr MAPIFolder::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2658)
inline _bstr_t MAPIFolder::GetFullFolderPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullFolderPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2659)
inline VARIANT_BOOL MAPIFolder::GetIsSharePointFolder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSharePointFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2660)
inline enum OlShowItemCount MAPIFolder::GetShowItemCount ( ) {
    enum OlShowItemCount _result;
    HRESULT _hr = get_ShowItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2661)
inline void MAPIFolder::PutShowItemCount ( enum OlShowItemCount ShowItemCount ) {
    HRESULT _hr = put_ShowItemCount(ShowItemCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2662)
inline _StorePtr MAPIFolder::GetStore ( ) {
    struct _Store * _result = 0;
    HRESULT _hr = get_Store(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StorePtr(_result, false);
}

#pragma implementation_key(2663)
inline _StorageItemPtr MAPIFolder::GetStorage ( _bstr_t StorageIdentifier, enum OlStorageIdentifierType StorageIdentifierType ) {
    struct _StorageItem * _result = 0;
    HRESULT _hr = raw_GetStorage(StorageIdentifier, StorageIdentifierType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StorageItemPtr(_result, false);
}

#pragma implementation_key(2664)
inline _TablePtr MAPIFolder::GetTable ( const _variant_t & Filter, const _variant_t & TableContents ) {
    struct _Table * _result = 0;
    HRESULT _hr = raw_GetTable(Filter, TableContents, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TablePtr(_result, false);
}

#pragma implementation_key(2665)
inline _PropertyAccessorPtr MAPIFolder::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(2666)
inline _CalendarSharingPtr MAPIFolder::GetCalendarExporter ( ) {
    struct _CalendarSharing * _result = 0;
    HRESULT _hr = raw_GetCalendarExporter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CalendarSharingPtr(_result, false);
}

#pragma implementation_key(2667)
inline _UserDefinedPropertiesPtr MAPIFolder::GetUserDefinedProperties ( ) {
    struct _UserDefinedProperties * _result = 0;
    HRESULT _hr = get_UserDefinedProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _UserDefinedPropertiesPtr(_result, false);
}

#pragma implementation_key(2668)
inline PicturePtr MAPIFolder::GetCustomIcon ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = raw_GetCustomIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(2669)
inline HRESULT MAPIFolder::SetCustomIcon ( struct Picture * Picture ) {
    HRESULT _hr = raw_SetCustomIcon(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Folders wrapper method implementations
//

#pragma implementation_key(2670)
inline _ApplicationPtr _Folders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2671)
inline enum OlObjectClass _Folders::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2672)
inline _NameSpacePtr _Folders::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2673)
inline IDispatchPtr _Folders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2674)
inline long _Folders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2675)
inline MAPIFolderPtr _Folders::Item ( const _variant_t & Index ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2676)
inline IUnknownPtr _Folders::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2677)
inline MAPIFolderPtr _Folders::Add ( _bstr_t Name, const _variant_t & Type ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_Add(Name, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2678)
inline MAPIFolderPtr _Folders::GetFirst ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2679)
inline MAPIFolderPtr _Folders::GetLast ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2680)
inline MAPIFolderPtr _Folders::GetNext ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2681)
inline MAPIFolderPtr _Folders::GetPrevious ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2682)
inline HRESULT _Folders::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Explorer wrapper method implementations
//

#pragma implementation_key(2683)
inline _ApplicationPtr _Explorer::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2684)
inline enum OlObjectClass _Explorer::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2685)
inline _NameSpacePtr _Explorer::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2686)
inline IDispatchPtr _Explorer::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2687)
inline _CommandBarsPtr _Explorer::GetCommandBars ( ) {
    struct _CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CommandBarsPtr(_result, false);
}

#pragma implementation_key(2688)
inline MAPIFolderPtr _Explorer::GetCurrentFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_CurrentFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2689)
inline void _Explorer::PutRefCurrentFolder ( struct MAPIFolder * CurrentFolder ) {
    HRESULT _hr = putref_CurrentFolder(CurrentFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2690)
inline HRESULT _Explorer::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2691)
inline HRESULT _Explorer::Display ( ) {
    HRESULT _hr = raw_Display();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2692)
inline _bstr_t _Explorer::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2693)
inline _variant_t _Explorer::GetCurrentView ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2694)
inline void _Explorer::PutCurrentView ( const _variant_t & CurrentView ) {
    HRESULT _hr = put_CurrentView(CurrentView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2695)
inline long _Explorer::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2696)
inline void _Explorer::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2697)
inline long _Explorer::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2698)
inline void _Explorer::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2699)
inline PanesPtr _Explorer::GetPanes ( ) {
    struct Panes * _result = 0;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

#pragma implementation_key(2700)
inline SelectionPtr _Explorer::GetSelection ( ) {
    struct Selection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(2701)
inline long _Explorer::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2702)
inline void _Explorer::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2703)
inline long _Explorer::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2704)
inline void _Explorer::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2705)
inline enum OlWindowState _Explorer::GetWindowState ( ) {
    enum OlWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2706)
inline void _Explorer::PutWindowState ( enum OlWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2707)
inline HRESULT _Explorer::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2708)
inline VARIANT_BOOL _Explorer::IsPaneVisible ( enum OlPane Pane ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPaneVisible(Pane, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2709)
inline HRESULT _Explorer::ShowPane ( enum OlPane Pane, VARIANT_BOOL Visible ) {
    HRESULT _hr = raw_ShowPane(Pane, Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2710)
inline IDispatchPtr _Explorer::GetViews ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2711)
inline IDispatchPtr _Explorer::GetHTMLDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_HTMLDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2712)
inline HRESULT _Explorer::SelectFolder ( struct MAPIFolder * Folder ) {
    HRESULT _hr = raw_SelectFolder(Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2713)
inline HRESULT _Explorer::DeselectFolder ( struct MAPIFolder * Folder ) {
    HRESULT _hr = raw_DeselectFolder(Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2714)
inline VARIANT_BOOL _Explorer::IsFolderSelected ( struct MAPIFolder * Folder ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFolderSelected(Folder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2715)
inline _NavigationPanePtr _Explorer::GetNavigationPane ( ) {
    struct _NavigationPane * _result = 0;
    HRESULT _hr = get_NavigationPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationPanePtr(_result, false);
}

#pragma implementation_key(2716)
inline HRESULT _Explorer::ClearSearch ( ) {
    HRESULT _hr = raw_ClearSearch();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2717)
inline HRESULT _Explorer::Search ( _bstr_t Query, enum OlSearchScope SearchScope ) {
    HRESULT _hr = raw_Search(Query, SearchScope);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2718)
inline VARIANT_BOOL _Explorer::IsItemSelectableInView ( IDispatch * Item ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsItemSelectableInView(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2719)
inline HRESULT _Explorer::AddToSelection ( IDispatch * Item ) {
    HRESULT _hr = raw_AddToSelection(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2720)
inline HRESULT _Explorer::RemoveFromSelection ( IDispatch * Item ) {
    HRESULT _hr = raw_RemoveFromSelection(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2721)
inline HRESULT _Explorer::SelectAllItems ( ) {
    HRESULT _hr = raw_SelectAllItems();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2722)
inline HRESULT _Explorer::ClearSelection ( ) {
    HRESULT _hr = raw_ClearSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2723)
inline _AccountSelectorPtr _Explorer::GetAccountSelector ( ) {
    struct _AccountSelector * _result = 0;
    HRESULT _hr = get_AccountSelector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountSelectorPtr(_result, false);
}

#pragma implementation_key(2724)
inline _AttachmentSelectionPtr _Explorer::GetAttachmentSelection ( ) {
    struct _AttachmentSelection * _result = 0;
    HRESULT _hr = get_AttachmentSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AttachmentSelectionPtr(_result, false);
}

#pragma implementation_key(2725)
inline IDispatchPtr _Explorer::GetActiveInlineResponse ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ActiveInlineResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2726)
inline IDispatchPtr _Explorer::GetActiveInlineResponseWordEditor ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ActiveInlineResponseWordEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2727)
inline enum OlDisplayMode _Explorer::GetDisplayMode ( ) {
    enum OlDisplayMode _result;
    HRESULT _hr = get_DisplayMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2728)
inline _PreviewPanePtr _Explorer::GetPreviewPane ( ) {
    struct _PreviewPane * _result = 0;
    HRESULT _hr = get_PreviewPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PreviewPanePtr(_result, false);
}

//
// interface _Store wrapper method implementations
//

#pragma implementation_key(2729)
inline _ApplicationPtr _Store::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2730)
inline enum OlObjectClass _Store::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2731)
inline _NameSpacePtr _Store::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2732)
inline IDispatchPtr _Store::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2733)
inline _bstr_t _Store::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2734)
inline _bstr_t _Store::GetStoreID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StoreID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2735)
inline enum OlExchangeStoreType _Store::GetExchangeStoreType ( ) {
    enum OlExchangeStoreType _result;
    HRESULT _hr = get_ExchangeStoreType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2736)
inline _bstr_t _Store::GetFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2737)
inline VARIANT_BOOL _Store::GetIsCachedExchange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCachedExchange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2738)
inline VARIANT_BOOL _Store::GetIsDataFileStore ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDataFileStore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2739)
inline MAPIFolderPtr _Store::GetRootFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetRootFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2740)
inline _FoldersPtr _Store::GetSearchFolders ( ) {
    struct _Folders * _result = 0;
    HRESULT _hr = raw_GetSearchFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FoldersPtr(_result, false);
}

#pragma implementation_key(2741)
inline VARIANT_BOOL _Store::GetIsOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2742)
inline IUnknownPtr _Store::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2743)
inline _RulesPtr _Store::GetRules ( ) {
    struct _Rules * _result = 0;
    HRESULT _hr = raw_GetRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RulesPtr(_result, false);
}

#pragma implementation_key(2744)
inline _PropertyAccessorPtr _Store::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(2745)
inline MAPIFolderPtr _Store::GetSpecialFolder ( enum OlSpecialFolders FolderType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetSpecialFolder(FolderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2746)
inline VARIANT_BOOL _Store::GetIsInstantSearchEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInstantSearchEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2747)
inline HRESULT _Store::RefreshQuotaDisplay ( ) {
    HRESULT _hr = raw_RefreshQuotaDisplay();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2748)
inline MAPIFolderPtr _Store::GetDefaultFolder ( enum OlDefaultFolders FolderType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetDefaultFolder(FolderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2749)
inline VARIANT_BOOL _Store::GetIsConversationEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConversationEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2750)
inline _CategoriesPtr _Store::GetCategories ( ) {
    struct _Categories * _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CategoriesPtr(_result, false);
}

#pragma implementation_key(2751)
inline _bstr_t _Store::CreateUnifiedGroup ( _bstr_t Name, _bstr_t Alias, _bstr_t Description, VARIANT_BOOL FAutoSubscribeMembers, enum OlUnifiedGroupType GroupType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CreateUnifiedGroup(Name, Alias, Description, FAutoSubscribeMembers, GroupType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2752)
inline HRESULT _Store::DeleteUnifiedGroup ( _bstr_t GroupSmtpAddress ) {
    HRESULT _hr = raw_DeleteUnifiedGroup(GroupSmtpAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _MoveOrCopyRuleAction wrapper method implementations
//

#pragma implementation_key(2753)
inline _ApplicationPtr _MoveOrCopyRuleAction::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2754)
inline enum OlObjectClass _MoveOrCopyRuleAction::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2755)
inline _NameSpacePtr _MoveOrCopyRuleAction::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2756)
inline IDispatchPtr _MoveOrCopyRuleAction::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2757)
inline VARIANT_BOOL _MoveOrCopyRuleAction::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2758)
inline void _MoveOrCopyRuleAction::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2759)
inline enum OlRuleActionType _MoveOrCopyRuleAction::GetActionType ( ) {
    enum OlRuleActionType _result;
    HRESULT _hr = get_ActionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2760)
inline MAPIFolderPtr _MoveOrCopyRuleAction::GetFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_Folder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2761)
inline void _MoveOrCopyRuleAction::PutFolder ( struct MAPIFolder * Folder ) {
    HRESULT _hr = put_Folder(Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AddressList wrapper method implementations
//

#pragma implementation_key(2762)
inline _ApplicationPtr AddressList::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2763)
inline enum OlObjectClass AddressList::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2764)
inline _NameSpacePtr AddressList::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2765)
inline IDispatchPtr AddressList::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2766)
inline AddressEntriesPtr AddressList::GetAddressEntries ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = get_AddressEntries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(2767)
inline _bstr_t AddressList::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2768)
inline long AddressList::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2769)
inline VARIANT_BOOL AddressList::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2770)
inline _bstr_t AddressList::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2771)
inline MAPIFolderPtr AddressList::GetContactsFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetContactsFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2772)
inline enum OlAddressListType AddressList::GetAddressListType ( ) {
    enum OlAddressListType _result;
    HRESULT _hr = get_AddressListType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2773)
inline long AddressList::GetResolutionOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ResolutionOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2774)
inline VARIANT_BOOL AddressList::GetIsInitialAddressList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInitialAddressList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2775)
inline _PropertyAccessorPtr AddressList::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

//
// interface _SenderInAddressListRuleCondition wrapper method implementations
//

#pragma implementation_key(2776)
inline _ApplicationPtr _SenderInAddressListRuleCondition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2777)
inline enum OlObjectClass _SenderInAddressListRuleCondition::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2778)
inline _NameSpacePtr _SenderInAddressListRuleCondition::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2779)
inline IDispatchPtr _SenderInAddressListRuleCondition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2780)
inline VARIANT_BOOL _SenderInAddressListRuleCondition::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2781)
inline void _SenderInAddressListRuleCondition::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2782)
inline enum OlRuleConditionType _SenderInAddressListRuleCondition::GetConditionType ( ) {
    enum OlRuleConditionType _result;
    HRESULT _hr = get_ConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2783)
inline AddressListPtr _SenderInAddressListRuleCondition::GetAddressList ( ) {
    struct AddressList * _result = 0;
    HRESULT _hr = get_AddressList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressListPtr(_result, false);
}

#pragma implementation_key(2784)
inline void _SenderInAddressListRuleCondition::PutAddressList ( struct AddressList * AddressList ) {
    HRESULT _hr = put_AddressList(AddressList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _CalendarSharing wrapper method implementations
//

#pragma implementation_key(2785)
inline _ApplicationPtr _CalendarSharing::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2786)
inline enum OlObjectClass _CalendarSharing::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2787)
inline _NameSpacePtr _CalendarSharing::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2788)
inline IDispatchPtr _CalendarSharing::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2789)
inline HRESULT _CalendarSharing::SaveAsICal ( _bstr_t Path ) {
    HRESULT _hr = raw_SaveAsICal(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2790)
inline _MailItemPtr _CalendarSharing::ForwardAsICal ( enum OlCalendarMailFormat MailFormat ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ForwardAsICal(MailFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(2791)
inline enum OlCalendarDetail _CalendarSharing::GetCalendarDetail ( ) {
    enum OlCalendarDetail _result;
    HRESULT _hr = get_CalendarDetail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2792)
inline void _CalendarSharing::PutCalendarDetail ( enum OlCalendarDetail CalendarDetail ) {
    HRESULT _hr = put_CalendarDetail(CalendarDetail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2793)
inline DATE _CalendarSharing::GetEndDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EndDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2794)
inline void _CalendarSharing::PutEndDate ( DATE EndDate ) {
    HRESULT _hr = put_EndDate(EndDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2795)
inline MAPIFolderPtr _CalendarSharing::GetFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_Folder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2796)
inline VARIANT_BOOL _CalendarSharing::GetIncludeAttachments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2797)
inline void _CalendarSharing::PutIncludeAttachments ( VARIANT_BOOL IncludeAttachments ) {
    HRESULT _hr = put_IncludeAttachments(IncludeAttachments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2798)
inline VARIANT_BOOL _CalendarSharing::GetIncludePrivateDetails ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludePrivateDetails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2799)
inline void _CalendarSharing::PutIncludePrivateDetails ( VARIANT_BOOL IncludePrivateDetails ) {
    HRESULT _hr = put_IncludePrivateDetails(IncludePrivateDetails);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2800)
inline VARIANT_BOOL _CalendarSharing::GetRestrictToWorkingHours ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RestrictToWorkingHours(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2801)
inline void _CalendarSharing::PutRestrictToWorkingHours ( VARIANT_BOOL RestrictToWorkingHours ) {
    HRESULT _hr = put_RestrictToWorkingHours(RestrictToWorkingHours);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2802)
inline DATE _CalendarSharing::GetStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2803)
inline void _CalendarSharing::PutStartDate ( DATE StartDate ) {
    HRESULT _hr = put_StartDate(StartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2804)
inline VARIANT_BOOL _CalendarSharing::GetIncludeWholeCalendar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeWholeCalendar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2805)
inline void _CalendarSharing::PutIncludeWholeCalendar ( VARIANT_BOOL IncludeWholeCalendar ) {
    HRESULT _hr = put_IncludeWholeCalendar(IncludeWholeCalendar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Conversation wrapper method implementations
//

#pragma implementation_key(2806)
inline _ApplicationPtr _Conversation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2807)
inline enum OlObjectClass _Conversation::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2808)
inline _NameSpacePtr _Conversation::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2809)
inline IDispatchPtr _Conversation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2810)
inline _TablePtr _Conversation::GetTable ( ) {
    struct _Table * _result = 0;
    HRESULT _hr = raw_GetTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TablePtr(_result, false);
}

#pragma implementation_key(2811)
inline _SimpleItemsPtr _Conversation::GetChildren ( IDispatch * Item ) {
    struct _SimpleItems * _result = 0;
    HRESULT _hr = raw_GetChildren(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SimpleItemsPtr(_result, false);
}

#pragma implementation_key(2812)
inline IDispatchPtr _Conversation::GetParent ( IDispatch * Item ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetParent(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2813)
inline _SimpleItemsPtr _Conversation::GetRootItems ( ) {
    struct _SimpleItems * _result = 0;
    HRESULT _hr = raw_GetRootItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SimpleItemsPtr(_result, false);
}

#pragma implementation_key(2814)
inline _bstr_t _Conversation::GetAlwaysAssignCategories ( struct _Store * Store ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAlwaysAssignCategories(Store, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2815)
inline enum OlAlwaysDeleteConversation _Conversation::GetAlwaysDelete ( struct _Store * Store ) {
    enum OlAlwaysDeleteConversation _result;
    HRESULT _hr = raw_GetAlwaysDelete(Store, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2816)
inline MAPIFolderPtr _Conversation::GetAlwaysMoveToFolder ( struct _Store * Store ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetAlwaysMoveToFolder(Store, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2817)
inline HRESULT _Conversation::MarkAsRead ( ) {
    HRESULT _hr = raw_MarkAsRead();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2818)
inline HRESULT _Conversation::MarkAsUnread ( ) {
    HRESULT _hr = raw_MarkAsUnread();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2819)
inline HRESULT _Conversation::SetAlwaysAssignCategories ( _bstr_t Categories, struct _Store * Store ) {
    HRESULT _hr = raw_SetAlwaysAssignCategories(Categories, Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2820)
inline HRESULT _Conversation::SetAlwaysDelete ( enum OlAlwaysDeleteConversation AlwaysDelete, struct _Store * Store ) {
    HRESULT _hr = raw_SetAlwaysDelete(AlwaysDelete, Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2821)
inline HRESULT _Conversation::SetAlwaysMoveToFolder ( struct MAPIFolder * MoveToFolder, struct _Store * Store ) {
    HRESULT _hr = raw_SetAlwaysMoveToFolder(MoveToFolder, Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2822)
inline HRESULT _Conversation::ClearAlwaysAssignCategories ( struct _Store * Store ) {
    HRESULT _hr = raw_ClearAlwaysAssignCategories(Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2823)
inline HRESULT _Conversation::StopAlwaysDelete ( struct _Store * Store ) {
    HRESULT _hr = raw_StopAlwaysDelete(Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2824)
inline HRESULT _Conversation::StopAlwaysMoveToFolder ( struct _Store * Store ) {
    HRESULT _hr = raw_StopAlwaysMoveToFolder(Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2825)
inline _bstr_t _Conversation::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _MailItem wrapper method implementations
//

#pragma implementation_key(2826)
inline _ApplicationPtr _MailItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2827)
inline enum OlObjectClass _MailItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2828)
inline _NameSpacePtr _MailItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2829)
inline IDispatchPtr _MailItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2830)
inline ActionsPtr _MailItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(2831)
inline AttachmentsPtr _MailItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(2832)
inline _bstr_t _MailItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2833)
inline void _MailItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline _bstr_t _MailItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2835)
inline void _MailItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2836)
inline _bstr_t _MailItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2837)
inline void _MailItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2838)
inline _bstr_t _MailItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2839)
inline void _MailItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2840)
inline _bstr_t _MailItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2841)
inline _bstr_t _MailItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2842)
inline DATE _MailItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2843)
inline _bstr_t _MailItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2844)
inline FormDescriptionPtr _MailItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(2845)
inline _InspectorPtr _MailItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(2846)
inline enum OlImportance _MailItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2847)
inline void _MailItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2848)
inline DATE _MailItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2849)
inline IUnknownPtr _MailItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2850)
inline _bstr_t _MailItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2851)
inline void _MailItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2852)
inline _bstr_t _MailItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2853)
inline void _MailItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2854)
inline VARIANT_BOOL _MailItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2855)
inline void _MailItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2856)
inline long _MailItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2857)
inline _bstr_t _MailItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2858)
inline VARIANT_BOOL _MailItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2859)
inline enum OlSensitivity _MailItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2860)
inline void _MailItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2861)
inline long _MailItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2862)
inline _bstr_t _MailItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2863)
inline void _MailItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2864)
inline VARIANT_BOOL _MailItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline void _MailItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2866)
inline UserPropertiesPtr _MailItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(2867)
inline HRESULT _MailItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2868)
inline IDispatchPtr _MailItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2869)
inline HRESULT _MailItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2870)
inline HRESULT _MailItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2871)
inline IDispatchPtr _MailItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2872)
inline HRESULT _MailItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2873)
inline HRESULT _MailItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2874)
inline HRESULT _MailItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2875)
inline VARIANT_BOOL _MailItem::GetAlternateRecipientAllowed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlternateRecipientAllowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2876)
inline void _MailItem::PutAlternateRecipientAllowed ( VARIANT_BOOL AlternateRecipientAllowed ) {
    HRESULT _hr = put_AlternateRecipientAllowed(AlternateRecipientAllowed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2877)
inline VARIANT_BOOL _MailItem::GetAutoForwarded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoForwarded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2878)
inline void _MailItem::PutAutoForwarded ( VARIANT_BOOL AutoForwarded ) {
    HRESULT _hr = put_AutoForwarded(AutoForwarded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2879)
inline _bstr_t _MailItem::GetBCC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BCC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2880)
inline void _MailItem::PutBCC ( _bstr_t BCC ) {
    HRESULT _hr = put_BCC(BCC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2881)
inline _bstr_t _MailItem::GetCC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2882)
inline void _MailItem::PutCC ( _bstr_t CC ) {
    HRESULT _hr = put_CC(CC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2883)
inline DATE _MailItem::GetDeferredDeliveryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DeferredDeliveryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2884)
inline void _MailItem::PutDeferredDeliveryTime ( DATE DeferredDeliveryTime ) {
    HRESULT _hr = put_DeferredDeliveryTime(DeferredDeliveryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2885)
inline VARIANT_BOOL _MailItem::GetDeleteAfterSubmit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteAfterSubmit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2886)
inline void _MailItem::PutDeleteAfterSubmit ( VARIANT_BOOL DeleteAfterSubmit ) {
    HRESULT _hr = put_DeleteAfterSubmit(DeleteAfterSubmit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2887)
inline DATE _MailItem::GetExpiryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpiryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2888)
inline void _MailItem::PutExpiryTime ( DATE ExpiryTime ) {
    HRESULT _hr = put_ExpiryTime(ExpiryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2889)
inline DATE _MailItem::GetFlagDueBy ( ) {
    DATE _result = 0;
    HRESULT _hr = get_FlagDueBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2890)
inline void _MailItem::PutFlagDueBy ( DATE FlagDueBy ) {
    HRESULT _hr = put_FlagDueBy(FlagDueBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2891)
inline _bstr_t _MailItem::GetFlagRequest ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlagRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2892)
inline void _MailItem::PutFlagRequest ( _bstr_t FlagRequest ) {
    HRESULT _hr = put_FlagRequest(FlagRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2893)
inline enum OlFlagStatus _MailItem::GetFlagStatus ( ) {
    enum OlFlagStatus _result;
    HRESULT _hr = get_FlagStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2894)
inline void _MailItem::PutFlagStatus ( enum OlFlagStatus FlagStatus ) {
    HRESULT _hr = put_FlagStatus(FlagStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2895)
inline _bstr_t _MailItem::GetHTMLBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2896)
inline void _MailItem::PutHTMLBody ( _bstr_t HTMLBody ) {
    HRESULT _hr = put_HTMLBody(HTMLBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2897)
inline VARIANT_BOOL _MailItem::GetOriginatorDeliveryReportRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OriginatorDeliveryReportRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2898)
inline void _MailItem::PutOriginatorDeliveryReportRequested ( VARIANT_BOOL OriginatorDeliveryReportRequested ) {
    HRESULT _hr = put_OriginatorDeliveryReportRequested(OriginatorDeliveryReportRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2899)
inline VARIANT_BOOL _MailItem::GetReadReceiptRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadReceiptRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2900)
inline void _MailItem::PutReadReceiptRequested ( VARIANT_BOOL ReadReceiptRequested ) {
    HRESULT _hr = put_ReadReceiptRequested(ReadReceiptRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2901)
inline _bstr_t _MailItem::GetReceivedByEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByEntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2902)
inline _bstr_t _MailItem::GetReceivedByName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2903)
inline _bstr_t _MailItem::GetReceivedOnBehalfOfEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedOnBehalfOfEntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2904)
inline _bstr_t _MailItem::GetReceivedOnBehalfOfName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedOnBehalfOfName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2905)
inline DATE _MailItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2906)
inline VARIANT_BOOL _MailItem::GetRecipientReassignmentProhibited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RecipientReassignmentProhibited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2907)
inline void _MailItem::PutRecipientReassignmentProhibited ( VARIANT_BOOL RecipientReassignmentProhibited ) {
    HRESULT _hr = put_RecipientReassignmentProhibited(RecipientReassignmentProhibited);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2908)
inline RecipientsPtr _MailItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(2909)
inline VARIANT_BOOL _MailItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2910)
inline void _MailItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2911)
inline VARIANT_BOOL _MailItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2912)
inline void _MailItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2913)
inline VARIANT_BOOL _MailItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2914)
inline void _MailItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2915)
inline _bstr_t _MailItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2916)
inline void _MailItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2917)
inline DATE _MailItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2918)
inline void _MailItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2919)
inline enum OlRemoteStatus _MailItem::GetRemoteStatus ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_RemoteStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2920)
inline void _MailItem::PutRemoteStatus ( enum OlRemoteStatus RemoteStatus ) {
    HRESULT _hr = put_RemoteStatus(RemoteStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2921)
inline _bstr_t _MailItem::GetReplyRecipientNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReplyRecipientNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2922)
inline RecipientsPtr _MailItem::GetReplyRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_ReplyRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(2923)
inline MAPIFolderPtr _MailItem::GetSaveSentMessageFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_SaveSentMessageFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(2924)
inline void _MailItem::PutRefSaveSentMessageFolder ( struct MAPIFolder * SaveSentMessageFolder ) {
    HRESULT _hr = putref_SaveSentMessageFolder(SaveSentMessageFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2925)
inline _bstr_t _MailItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2926)
inline VARIANT_BOOL _MailItem::GetSent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2927)
inline DATE _MailItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2928)
inline _bstr_t _MailItem::GetSentOnBehalfOfName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SentOnBehalfOfName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2929)
inline void _MailItem::PutSentOnBehalfOfName ( _bstr_t SentOnBehalfOfName ) {
    HRESULT _hr = put_SentOnBehalfOfName(SentOnBehalfOfName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2930)
inline VARIANT_BOOL _MailItem::GetSubmitted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Submitted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2931)
inline _bstr_t _MailItem::GetTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2932)
inline void _MailItem::PutTo ( _bstr_t To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2933)
inline _bstr_t _MailItem::GetVotingOptions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VotingOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2934)
inline void _MailItem::PutVotingOptions ( _bstr_t VotingOptions ) {
    HRESULT _hr = put_VotingOptions(VotingOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2935)
inline _bstr_t _MailItem::GetVotingResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VotingResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2936)
inline void _MailItem::PutVotingResponse ( _bstr_t VotingResponse ) {
    HRESULT _hr = put_VotingResponse(VotingResponse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2937)
inline HRESULT _MailItem::ClearConversationIndex ( ) {
    HRESULT _hr = raw_ClearConversationIndex();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2938)
inline _MailItemPtr _MailItem::Forward ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(2939)
inline _MailItemPtr _MailItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(2940)
inline _MailItemPtr _MailItem::ReplyAll ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(2941)
inline HRESULT _MailItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2942)
inline LinksPtr _MailItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(2943)
inline ItemPropertiesPtr _MailItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(2944)
inline enum OlBodyFormat _MailItem::GetBodyFormat ( ) {
    enum OlBodyFormat _result;
    HRESULT _hr = get_BodyFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2945)
inline void _MailItem::PutBodyFormat ( enum OlBodyFormat BodyFormat ) {
    HRESULT _hr = put_BodyFormat(BodyFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2946)
inline enum OlDownloadState _MailItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2947)
inline HRESULT _MailItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2948)
inline long _MailItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2949)
inline void _MailItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2950)
inline enum OlRemoteStatus _MailItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2951)
inline void _MailItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2952)
inline VARIANT_BOOL _MailItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2953)
inline VARIANT_BOOL _MailItem::GetIsIPFax ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsIPFax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2954)
inline void _MailItem::PutIsIPFax ( VARIANT_BOOL IsIPFax ) {
    HRESULT _hr = put_IsIPFax(IsIPFax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2955)
inline enum OlFlagIcon _MailItem::GetFlagIcon ( ) {
    enum OlFlagIcon _result;
    HRESULT _hr = get_FlagIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2956)
inline void _MailItem::PutFlagIcon ( enum OlFlagIcon FlagIcon ) {
    HRESULT _hr = put_FlagIcon(FlagIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2957)
inline VARIANT_BOOL _MailItem::GetHasCoverSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasCoverSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2958)
inline void _MailItem::PutHasCoverSheet ( VARIANT_BOOL HasCoverSheet ) {
    HRESULT _hr = put_HasCoverSheet(HasCoverSheet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2959)
inline VARIANT_BOOL _MailItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2960)
inline ConflictsPtr _MailItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(2961)
inline _bstr_t _MailItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2962)
inline _bstr_t _MailItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2963)
inline VARIANT_BOOL _MailItem::GetEnableSharedAttachments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSharedAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2964)
inline void _MailItem::PutEnableSharedAttachments ( VARIANT_BOOL EnableSharedAttachments ) {
    HRESULT _hr = put_EnableSharedAttachments(EnableSharedAttachments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2965)
inline enum OlPermission _MailItem::GetPermission ( ) {
    enum OlPermission _result;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2966)
inline void _MailItem::PutPermission ( enum OlPermission Permission ) {
    HRESULT _hr = put_Permission(Permission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2967)
inline enum OlPermissionService _MailItem::GetPermissionService ( ) {
    enum OlPermissionService _result;
    HRESULT _hr = get_PermissionService(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2968)
inline void _MailItem::PutPermissionService ( enum OlPermissionService PermissionService ) {
    HRESULT _hr = put_PermissionService(PermissionService);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2969)
inline _PropertyAccessorPtr _MailItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(2970)
inline HRESULT _MailItem::AddBusinessCard ( struct _ContactItem * contact ) {
    HRESULT _hr = raw_AddBusinessCard(contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2971)
inline _AccountPtr _MailItem::GetSendUsingAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_SendUsingAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

#pragma implementation_key(2972)
inline void _MailItem::PutSendUsingAccount ( struct _Account * SendUsingAccount ) {
    HRESULT _hr = put_SendUsingAccount(SendUsingAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2973)
inline _bstr_t _MailItem::GetTaskSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2974)
inline void _MailItem::PutTaskSubject ( _bstr_t TaskSubject ) {
    HRESULT _hr = put_TaskSubject(TaskSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2975)
inline DATE _MailItem::GetTaskDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskDueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2976)
inline void _MailItem::PutTaskDueDate ( DATE TaskDueDate ) {
    HRESULT _hr = put_TaskDueDate(TaskDueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2977)
inline DATE _MailItem::GetTaskStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskStartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2978)
inline void _MailItem::PutTaskStartDate ( DATE TaskStartDate ) {
    HRESULT _hr = put_TaskStartDate(TaskStartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2979)
inline DATE _MailItem::GetTaskCompletedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskCompletedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2980)
inline void _MailItem::PutTaskCompletedDate ( DATE TaskCompletedDate ) {
    HRESULT _hr = put_TaskCompletedDate(TaskCompletedDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2981)
inline DATE _MailItem::GetToDoTaskOrdinal ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ToDoTaskOrdinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2982)
inline void _MailItem::PutToDoTaskOrdinal ( DATE ToDoTaskOrdinal ) {
    HRESULT _hr = put_ToDoTaskOrdinal(ToDoTaskOrdinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2983)
inline HRESULT _MailItem::MarkAsTask ( enum OlMarkInterval MarkInterval ) {
    HRESULT _hr = raw_MarkAsTask(MarkInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2984)
inline HRESULT _MailItem::ClearTaskFlag ( ) {
    HRESULT _hr = raw_ClearTaskFlag();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2985)
inline VARIANT_BOOL _MailItem::GetIsMarkedAsTask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMarkedAsTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2986)
inline _ConversationPtr _MailItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(2987)
inline _bstr_t _MailItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2988)
inline AddressEntryPtr _MailItem::GetSender ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = get_Sender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(2989)
inline void _MailItem::PutSender ( struct AddressEntry * Sender ) {
    HRESULT _hr = put_Sender(Sender);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2990)
inline _bstr_t _MailItem::GetPermissionTemplateGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PermissionTemplateGuid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2991)
inline void _MailItem::PutPermissionTemplateGuid ( _bstr_t PermissionTemplateGuid ) {
    HRESULT _hr = put_PermissionTemplateGuid(PermissionTemplateGuid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2992)
inline _variant_t _MailItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2993)
inline void _MailItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2994)
inline _bstr_t _MailItem::GetRetentionPolicyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RetentionPolicyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2995)
inline DATE _MailItem::GetRetentionExpirationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_RetentionExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _ExchangeUser wrapper method implementations
//

#pragma implementation_key(2996)
inline _ApplicationPtr _ExchangeUser::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2997)
inline enum OlObjectClass _ExchangeUser::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2998)
inline _NameSpacePtr _ExchangeUser::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2999)
inline IDispatchPtr _ExchangeUser::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3000)
inline _bstr_t _ExchangeUser::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3001)
inline void _ExchangeUser::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3002)
inline enum OlDisplayType _ExchangeUser::GetDisplayType ( ) {
    enum OlDisplayType _result;
    HRESULT _hr = get_DisplayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3003)
inline _bstr_t _ExchangeUser::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3004)
inline AddressEntryPtr _ExchangeUser::GetManager ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = get_Manager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(3005)
inline IUnknownPtr _ExchangeUser::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3006)
inline void _ExchangeUser::PutMAPIOBJECT ( IUnknown * MAPIOBJECT ) {
    HRESULT _hr = put_MAPIOBJECT(MAPIOBJECT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3007)
inline AddressEntriesPtr _ExchangeUser::GetMembers ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(3008)
inline _bstr_t _ExchangeUser::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3009)
inline void _ExchangeUser::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3010)
inline _bstr_t _ExchangeUser::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3011)
inline void _ExchangeUser::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3012)
inline HRESULT _ExchangeUser::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3013)
inline HRESULT _ExchangeUser::Details ( const _variant_t & HWnd ) {
    HRESULT _hr = raw_Details(HWnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3014)
inline _bstr_t _ExchangeUser::GetFreeBusy ( DATE Start, long MinPerChar, const _variant_t & CompleteFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFreeBusy(Start, MinPerChar, CompleteFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3015)
inline HRESULT _ExchangeUser::Update ( const _variant_t & MakePermanent, const _variant_t & Refresh ) {
    HRESULT _hr = raw_Update(MakePermanent, Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3016)
inline HRESULT _ExchangeUser::UpdateFreeBusy ( ) {
    HRESULT _hr = raw_UpdateFreeBusy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3017)
inline _ContactItemPtr _ExchangeUser::GetContact ( ) {
    struct _ContactItem * _result = 0;
    HRESULT _hr = raw_GetContact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ContactItemPtr(_result, false);
}

#pragma implementation_key(3018)
inline _ExchangeUserPtr _ExchangeUser::GetExchangeUser ( ) {
    struct _ExchangeUser * _result = 0;
    HRESULT _hr = raw_GetExchangeUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExchangeUserPtr(_result, false);
}

#pragma implementation_key(3019)
inline enum OlAddressEntryUserType _ExchangeUser::GetAddressEntryUserType ( ) {
    enum OlAddressEntryUserType _result;
    HRESULT _hr = get_AddressEntryUserType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3020)
inline _ExchangeDistributionListPtr _ExchangeUser::GetExchangeDistributionList ( ) {
    struct _ExchangeDistributionList * _result = 0;
    HRESULT _hr = raw_GetExchangeDistributionList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExchangeDistributionListPtr(_result, false);
}

#pragma implementation_key(3021)
inline _PropertyAccessorPtr _ExchangeUser::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3022)
inline AddressEntriesPtr _ExchangeUser::GetDirectReports ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = raw_GetDirectReports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(3023)
inline AddressEntriesPtr _ExchangeUser::GetMemberOfList ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = raw_GetMemberOfList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(3024)
inline _bstr_t _ExchangeUser::GetAlias ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3025)
inline _bstr_t _ExchangeUser::GetAssistantName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3026)
inline void _ExchangeUser::PutAssistantName ( _bstr_t AssistantName ) {
    HRESULT _hr = put_AssistantName(AssistantName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3027)
inline _bstr_t _ExchangeUser::GetBusinessTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3028)
inline void _ExchangeUser::PutBusinessTelephoneNumber ( _bstr_t BusinessTelephoneNumber ) {
    HRESULT _hr = put_BusinessTelephoneNumber(BusinessTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3029)
inline _bstr_t _ExchangeUser::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_City(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3030)
inline void _ExchangeUser::PutCity ( _bstr_t City ) {
    HRESULT _hr = put_City(City);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3031)
inline _bstr_t _ExchangeUser::GetComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3032)
inline void _ExchangeUser::PutComments ( _bstr_t Comments ) {
    HRESULT _hr = put_Comments(Comments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3033)
inline _bstr_t _ExchangeUser::GetCompanyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3034)
inline void _ExchangeUser::PutCompanyName ( _bstr_t CompanyName ) {
    HRESULT _hr = put_CompanyName(CompanyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3035)
inline _bstr_t _ExchangeUser::GetDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Department(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3036)
inline void _ExchangeUser::PutDepartment ( _bstr_t Department ) {
    HRESULT _hr = put_Department(Department);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3037)
inline _bstr_t _ExchangeUser::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3038)
inline void _ExchangeUser::PutFirstName ( _bstr_t FirstName ) {
    HRESULT _hr = put_FirstName(FirstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3039)
inline _bstr_t _ExchangeUser::GetJobTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JobTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3040)
inline void _ExchangeUser::PutJobTitle ( _bstr_t JobTitle ) {
    HRESULT _hr = put_JobTitle(JobTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3041)
inline _bstr_t _ExchangeUser::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3042)
inline void _ExchangeUser::PutLastName ( _bstr_t LastName ) {
    HRESULT _hr = put_LastName(LastName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3043)
inline _bstr_t _ExchangeUser::GetMobileTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MobileTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3044)
inline void _ExchangeUser::PutMobileTelephoneNumber ( _bstr_t MobileTelephoneNumber ) {
    HRESULT _hr = put_MobileTelephoneNumber(MobileTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3045)
inline _bstr_t _ExchangeUser::GetOfficeLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OfficeLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3046)
inline void _ExchangeUser::PutOfficeLocation ( _bstr_t OfficeLocation ) {
    HRESULT _hr = put_OfficeLocation(OfficeLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3047)
inline _bstr_t _ExchangeUser::GetPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3048)
inline void _ExchangeUser::PutPostalCode ( _bstr_t PostalCode ) {
    HRESULT _hr = put_PostalCode(PostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3049)
inline _bstr_t _ExchangeUser::GetPrimarySmtpAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimarySmtpAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3050)
inline _bstr_t _ExchangeUser::GetStateOrProvince ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StateOrProvince(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3051)
inline void _ExchangeUser::PutStateOrProvince ( _bstr_t StateOrProvince ) {
    HRESULT _hr = put_StateOrProvince(StateOrProvince);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3052)
inline _bstr_t _ExchangeUser::GetStreetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StreetAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3053)
inline void _ExchangeUser::PutStreetAddress ( _bstr_t StreetAddress ) {
    HRESULT _hr = put_StreetAddress(StreetAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3054)
inline _ExchangeUserPtr _ExchangeUser::GetExchangeUserManager ( ) {
    struct _ExchangeUser * _result = 0;
    HRESULT _hr = raw_GetExchangeUserManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExchangeUserPtr(_result, false);
}

#pragma implementation_key(3055)
inline _bstr_t _ExchangeUser::GetYomiCompanyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiCompanyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3056)
inline void _ExchangeUser::PutYomiCompanyName ( _bstr_t YomiCompanyName ) {
    HRESULT _hr = put_YomiCompanyName(YomiCompanyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3057)
inline _bstr_t _ExchangeUser::GetYomiFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3058)
inline void _ExchangeUser::PutYomiFirstName ( _bstr_t YomiFirstName ) {
    HRESULT _hr = put_YomiFirstName(YomiFirstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3059)
inline _bstr_t _ExchangeUser::GetYomiLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3060)
inline void _ExchangeUser::PutYomiLastName ( _bstr_t YomiLastName ) {
    HRESULT _hr = put_YomiLastName(YomiLastName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3061)
inline _bstr_t _ExchangeUser::GetYomiDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3062)
inline void _ExchangeUser::PutYomiDisplayName ( _bstr_t YomiDisplayName ) {
    HRESULT _hr = put_YomiDisplayName(YomiDisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3063)
inline _bstr_t _ExchangeUser::GetYomiDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiDepartment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3064)
inline void _ExchangeUser::PutYomiDepartment ( _bstr_t YomiDepartment ) {
    HRESULT _hr = put_YomiDepartment(YomiDepartment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3065)
inline PicturePtr _ExchangeUser::GetPicture ( ) {
    struct Picture * _result = 0;
    HRESULT _hr = raw_GetPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PicturePtr(_result, false);
}

#pragma implementation_key(3066)
inline VARIANT_BOOL _ExchangeUser::IsUnifiedGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsUnifiedGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3067)
inline MAPIFolderPtr _ExchangeUser::GetUnifiedGroup ( enum OlUnifiedGroupFolderType GroupType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetUnifiedGroup(GroupType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(3068)
inline MAPIFolderPtr _ExchangeUser::GetUnifiedGroupFromStore ( enum OlUnifiedGroupFolderType GroupType, _bstr_t StoreID ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetUnifiedGroupFromStore(GroupType, StoreID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

//
// interface _ExchangeDistributionList wrapper method implementations
//

#pragma implementation_key(3069)
inline _ApplicationPtr _ExchangeDistributionList::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3070)
inline enum OlObjectClass _ExchangeDistributionList::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3071)
inline _NameSpacePtr _ExchangeDistributionList::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3072)
inline IDispatchPtr _ExchangeDistributionList::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3073)
inline _bstr_t _ExchangeDistributionList::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3074)
inline void _ExchangeDistributionList::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3075)
inline enum OlDisplayType _ExchangeDistributionList::GetDisplayType ( ) {
    enum OlDisplayType _result;
    HRESULT _hr = get_DisplayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3076)
inline _bstr_t _ExchangeDistributionList::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3077)
inline AddressEntryPtr _ExchangeDistributionList::GetManager ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = get_Manager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(3078)
inline IUnknownPtr _ExchangeDistributionList::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3079)
inline void _ExchangeDistributionList::PutMAPIOBJECT ( IUnknown * MAPIOBJECT ) {
    HRESULT _hr = put_MAPIOBJECT(MAPIOBJECT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3080)
inline AddressEntriesPtr _ExchangeDistributionList::GetMembers ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(3081)
inline _bstr_t _ExchangeDistributionList::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3082)
inline void _ExchangeDistributionList::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3083)
inline _bstr_t _ExchangeDistributionList::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3084)
inline void _ExchangeDistributionList::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3085)
inline HRESULT _ExchangeDistributionList::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3086)
inline HRESULT _ExchangeDistributionList::Details ( const _variant_t & HWnd ) {
    HRESULT _hr = raw_Details(HWnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3087)
inline _bstr_t _ExchangeDistributionList::GetFreeBusy ( DATE Start, long MinPerChar, const _variant_t & CompleteFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFreeBusy(Start, MinPerChar, CompleteFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3088)
inline HRESULT _ExchangeDistributionList::Update ( const _variant_t & MakePermanent, const _variant_t & Refresh ) {
    HRESULT _hr = raw_Update(MakePermanent, Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3089)
inline HRESULT _ExchangeDistributionList::UpdateFreeBusy ( ) {
    HRESULT _hr = raw_UpdateFreeBusy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3090)
inline _ContactItemPtr _ExchangeDistributionList::GetContact ( ) {
    struct _ContactItem * _result = 0;
    HRESULT _hr = raw_GetContact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ContactItemPtr(_result, false);
}

#pragma implementation_key(3091)
inline _ExchangeUserPtr _ExchangeDistributionList::GetExchangeUser ( ) {
    struct _ExchangeUser * _result = 0;
    HRESULT _hr = raw_GetExchangeUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExchangeUserPtr(_result, false);
}

#pragma implementation_key(3092)
inline enum OlAddressEntryUserType _ExchangeDistributionList::GetAddressEntryUserType ( ) {
    enum OlAddressEntryUserType _result;
    HRESULT _hr = get_AddressEntryUserType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3093)
inline _ExchangeDistributionListPtr _ExchangeDistributionList::GetExchangeDistributionList ( ) {
    struct _ExchangeDistributionList * _result = 0;
    HRESULT _hr = raw_GetExchangeDistributionList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExchangeDistributionListPtr(_result, false);
}

#pragma implementation_key(3094)
inline _PropertyAccessorPtr _ExchangeDistributionList::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3095)
inline AddressEntriesPtr _ExchangeDistributionList::GetMemberOfList ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = raw_GetMemberOfList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(3096)
inline AddressEntriesPtr _ExchangeDistributionList::GetExchangeDistributionListMembers ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = raw_GetExchangeDistributionListMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(3097)
inline _bstr_t _ExchangeDistributionList::GetAlias ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Alias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3098)
inline _bstr_t _ExchangeDistributionList::GetComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3099)
inline void _ExchangeDistributionList::PutComments ( _bstr_t Comments ) {
    HRESULT _hr = put_Comments(Comments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3100)
inline _bstr_t _ExchangeDistributionList::GetPrimarySmtpAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimarySmtpAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3101)
inline AddressEntriesPtr _ExchangeDistributionList::GetOwners ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = raw_GetOwners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(3102)
inline VARIANT_BOOL _ExchangeDistributionList::IsUnifiedGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsUnifiedGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3103)
inline MAPIFolderPtr _ExchangeDistributionList::GetUnifiedGroup ( enum OlUnifiedGroupFolderType GroupType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetUnifiedGroup(GroupType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(3104)
inline MAPIFolderPtr _ExchangeDistributionList::GetUnifiedGroupFromStore ( enum OlUnifiedGroupFolderType GroupType, _bstr_t StoreID ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetUnifiedGroupFromStore(GroupType, StoreID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

//
// interface AddressLists wrapper method implementations
//

#pragma implementation_key(3105)
inline _ApplicationPtr AddressLists::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3106)
inline enum OlObjectClass AddressLists::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3107)
inline _NameSpacePtr AddressLists::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3108)
inline IDispatchPtr AddressLists::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3109)
inline long AddressLists::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3110)
inline AddressListPtr AddressLists::Item ( const _variant_t & Index ) {
    struct AddressList * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressListPtr(_result, false);
}

//
// interface _Stores wrapper method implementations
//

#pragma implementation_key(3111)
inline _ApplicationPtr _Stores::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3112)
inline enum OlObjectClass _Stores::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3113)
inline _NameSpacePtr _Stores::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3114)
inline IDispatchPtr _Stores::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3115)
inline long _Stores::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3116)
inline _StorePtr _Stores::Item ( const _variant_t & Index ) {
    struct _Store * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _StorePtr(_result, false);
}

//
// interface _SelectNamesDialog wrapper method implementations
//

#pragma implementation_key(3117)
inline _ApplicationPtr _SelectNamesDialog::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3118)
inline enum OlObjectClass _SelectNamesDialog::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3119)
inline _NameSpacePtr _SelectNamesDialog::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3120)
inline IDispatchPtr _SelectNamesDialog::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3121)
inline _bstr_t _SelectNamesDialog::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3122)
inline void _SelectNamesDialog::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3123)
inline VARIANT_BOOL _SelectNamesDialog::Display ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Display(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3124)
inline RecipientsPtr _SelectNamesDialog::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3125)
inline void _SelectNamesDialog::PutRecipients ( struct Recipients * Recipients ) {
    HRESULT _hr = put_Recipients(Recipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3126)
inline _bstr_t _SelectNamesDialog::GetBccLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BccLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3127)
inline void _SelectNamesDialog::PutBccLabel ( _bstr_t BccLabel ) {
    HRESULT _hr = put_BccLabel(BccLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3128)
inline _bstr_t _SelectNamesDialog::GetCcLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CcLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3129)
inline void _SelectNamesDialog::PutCcLabel ( _bstr_t CcLabel ) {
    HRESULT _hr = put_CcLabel(CcLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3130)
inline _bstr_t _SelectNamesDialog::GetToLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3131)
inline void _SelectNamesDialog::PutToLabel ( _bstr_t ToLabel ) {
    HRESULT _hr = put_ToLabel(ToLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3132)
inline VARIANT_BOOL _SelectNamesDialog::GetAllowMultipleSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowMultipleSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3133)
inline void _SelectNamesDialog::PutAllowMultipleSelection ( VARIANT_BOOL AllowMultipleSelection ) {
    HRESULT _hr = put_AllowMultipleSelection(AllowMultipleSelection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3134)
inline VARIANT_BOOL _SelectNamesDialog::GetForceResolution ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3135)
inline void _SelectNamesDialog::PutForceResolution ( VARIANT_BOOL ForceResolution ) {
    HRESULT _hr = put_ForceResolution(ForceResolution);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3136)
inline VARIANT_BOOL _SelectNamesDialog::GetShowOnlyInitialAddressList ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowOnlyInitialAddressList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3137)
inline void _SelectNamesDialog::PutShowOnlyInitialAddressList ( VARIANT_BOOL ShowOnlyInitialAddressList ) {
    HRESULT _hr = put_ShowOnlyInitialAddressList(ShowOnlyInitialAddressList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3138)
inline enum OlRecipientSelectors _SelectNamesDialog::GetNumberOfRecipientSelectors ( ) {
    enum OlRecipientSelectors _result;
    HRESULT _hr = get_NumberOfRecipientSelectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3139)
inline void _SelectNamesDialog::PutNumberOfRecipientSelectors ( enum OlRecipientSelectors NumberOfRecipientSelectors ) {
    HRESULT _hr = put_NumberOfRecipientSelectors(NumberOfRecipientSelectors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3140)
inline AddressListPtr _SelectNamesDialog::GetInitialAddressList ( ) {
    struct AddressList * _result = 0;
    HRESULT _hr = get_InitialAddressList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressListPtr(_result, false);
}

#pragma implementation_key(3141)
inline void _SelectNamesDialog::PutInitialAddressList ( struct AddressList * InitialAddressList ) {
    HRESULT _hr = put_InitialAddressList(InitialAddressList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3142)
inline HRESULT _SelectNamesDialog::SetDefaultDisplayMode ( enum OlDefaultSelectNamesDisplayMode defaultMode ) {
    HRESULT _hr = raw_SetDefaultDisplayMode(defaultMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _SharingItem wrapper method implementations
//

#pragma implementation_key(3143)
inline _ApplicationPtr _SharingItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3144)
inline enum OlObjectClass _SharingItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3145)
inline _NameSpacePtr _SharingItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3146)
inline IDispatchPtr _SharingItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3147)
inline ActionsPtr _SharingItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3148)
inline AttachmentsPtr _SharingItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3149)
inline _bstr_t _SharingItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3150)
inline void _SharingItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3151)
inline _bstr_t _SharingItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3152)
inline void _SharingItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3153)
inline _bstr_t _SharingItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3154)
inline void _SharingItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3155)
inline _bstr_t _SharingItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3156)
inline void _SharingItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3157)
inline _bstr_t _SharingItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3158)
inline _bstr_t _SharingItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3159)
inline DATE _SharingItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3160)
inline _bstr_t _SharingItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3161)
inline FormDescriptionPtr _SharingItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(3162)
inline _InspectorPtr _SharingItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3163)
inline enum OlImportance _SharingItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3164)
inline void _SharingItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3165)
inline DATE _SharingItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3166)
inline IUnknownPtr _SharingItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3167)
inline _bstr_t _SharingItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3168)
inline void _SharingItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3169)
inline _bstr_t _SharingItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3170)
inline void _SharingItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3171)
inline VARIANT_BOOL _SharingItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3172)
inline void _SharingItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3173)
inline long _SharingItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3174)
inline _bstr_t _SharingItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3175)
inline VARIANT_BOOL _SharingItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3176)
inline enum OlSensitivity _SharingItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3177)
inline void _SharingItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3178)
inline long _SharingItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3179)
inline _bstr_t _SharingItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3180)
inline void _SharingItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3181)
inline VARIANT_BOOL _SharingItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3182)
inline void _SharingItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3183)
inline UserPropertiesPtr _SharingItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(3184)
inline HRESULT _SharingItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3185)
inline IDispatchPtr _SharingItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3186)
inline HRESULT _SharingItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3187)
inline HRESULT _SharingItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3188)
inline IDispatchPtr _SharingItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3189)
inline HRESULT _SharingItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3190)
inline HRESULT _SharingItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3191)
inline HRESULT _SharingItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3192)
inline HRESULT _SharingItem::Allow ( ) {
    HRESULT _hr = raw_Allow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3193)
inline _SharingItemPtr _SharingItem::Deny ( ) {
    struct _SharingItem * _result = 0;
    HRESULT _hr = raw_Deny(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SharingItemPtr(_result, false);
}

#pragma implementation_key(3194)
inline _PropertyAccessorPtr _SharingItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3195)
inline _bstr_t _SharingItem::GetRemoteName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3196)
inline _bstr_t _SharingItem::GetRemoteID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3197)
inline _bstr_t _SharingItem::GetRemotePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemotePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3198)
inline _bstr_t _SharingItem::GetSharingProviderGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SharingProviderGuid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3199)
inline MAPIFolderPtr _SharingItem::OpenSharedFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_OpenSharedFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(3200)
inline enum OlSharingProvider _SharingItem::GetSharingProvider ( ) {
    enum OlSharingProvider _result;
    HRESULT _hr = get_SharingProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3201)
inline VARIANT_BOOL _SharingItem::GetAllowWriteAccess ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowWriteAccess(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3202)
inline void _SharingItem::PutAllowWriteAccess ( VARIANT_BOOL AllowWriteAccess ) {
    HRESULT _hr = put_AllowWriteAccess(AllowWriteAccess);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3203)
inline enum OlSharingMsgType _SharingItem::GetType ( ) {
    enum OlSharingMsgType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3204)
inline void _SharingItem::PutType ( enum OlSharingMsgType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3205)
inline enum OlDefaultFolders _SharingItem::GetRequestedFolder ( ) {
    enum OlDefaultFolders _result;
    HRESULT _hr = get_RequestedFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3206)
inline _AccountPtr _SharingItem::GetSendUsingAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_SendUsingAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

#pragma implementation_key(3207)
inline void _SharingItem::PutSendUsingAccount ( struct _Account * SendUsingAccount ) {
    HRESULT _hr = put_SendUsingAccount(SendUsingAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3208)
inline VARIANT_BOOL _SharingItem::GetAlternateRecipientAllowed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlternateRecipientAllowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3209)
inline void _SharingItem::PutAlternateRecipientAllowed ( VARIANT_BOOL AlternateRecipientAllowed ) {
    HRESULT _hr = put_AlternateRecipientAllowed(AlternateRecipientAllowed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3210)
inline VARIANT_BOOL _SharingItem::GetAutoForwarded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoForwarded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3211)
inline void _SharingItem::PutAutoForwarded ( VARIANT_BOOL AutoForwarded ) {
    HRESULT _hr = put_AutoForwarded(AutoForwarded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3212)
inline _bstr_t _SharingItem::GetBCC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BCC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3213)
inline void _SharingItem::PutBCC ( _bstr_t BCC ) {
    HRESULT _hr = put_BCC(BCC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3214)
inline _bstr_t _SharingItem::GetCC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3215)
inline void _SharingItem::PutCC ( _bstr_t CC ) {
    HRESULT _hr = put_CC(CC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3216)
inline DATE _SharingItem::GetDeferredDeliveryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DeferredDeliveryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3217)
inline void _SharingItem::PutDeferredDeliveryTime ( DATE DeferredDeliveryTime ) {
    HRESULT _hr = put_DeferredDeliveryTime(DeferredDeliveryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3218)
inline VARIANT_BOOL _SharingItem::GetDeleteAfterSubmit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteAfterSubmit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3219)
inline void _SharingItem::PutDeleteAfterSubmit ( VARIANT_BOOL DeleteAfterSubmit ) {
    HRESULT _hr = put_DeleteAfterSubmit(DeleteAfterSubmit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3220)
inline DATE _SharingItem::GetExpiryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpiryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3221)
inline void _SharingItem::PutExpiryTime ( DATE ExpiryTime ) {
    HRESULT _hr = put_ExpiryTime(ExpiryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3222)
inline DATE _SharingItem::GetFlagDueBy ( ) {
    DATE _result = 0;
    HRESULT _hr = get_FlagDueBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3223)
inline void _SharingItem::PutFlagDueBy ( DATE FlagDueBy ) {
    HRESULT _hr = put_FlagDueBy(FlagDueBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3224)
inline _bstr_t _SharingItem::GetFlagRequest ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlagRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3225)
inline void _SharingItem::PutFlagRequest ( _bstr_t FlagRequest ) {
    HRESULT _hr = put_FlagRequest(FlagRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3226)
inline enum OlFlagStatus _SharingItem::GetFlagStatus ( ) {
    enum OlFlagStatus _result;
    HRESULT _hr = get_FlagStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3227)
inline void _SharingItem::PutFlagStatus ( enum OlFlagStatus FlagStatus ) {
    HRESULT _hr = put_FlagStatus(FlagStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3228)
inline _bstr_t _SharingItem::GetHTMLBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3229)
inline void _SharingItem::PutHTMLBody ( _bstr_t HTMLBody ) {
    HRESULT _hr = put_HTMLBody(HTMLBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3230)
inline VARIANT_BOOL _SharingItem::GetOriginatorDeliveryReportRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OriginatorDeliveryReportRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3231)
inline void _SharingItem::PutOriginatorDeliveryReportRequested ( VARIANT_BOOL OriginatorDeliveryReportRequested ) {
    HRESULT _hr = put_OriginatorDeliveryReportRequested(OriginatorDeliveryReportRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3232)
inline VARIANT_BOOL _SharingItem::GetReadReceiptRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadReceiptRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3233)
inline void _SharingItem::PutReadReceiptRequested ( VARIANT_BOOL ReadReceiptRequested ) {
    HRESULT _hr = put_ReadReceiptRequested(ReadReceiptRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3234)
inline _bstr_t _SharingItem::GetReceivedByEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByEntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3235)
inline _bstr_t _SharingItem::GetReceivedByName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3236)
inline _bstr_t _SharingItem::GetReceivedOnBehalfOfEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedOnBehalfOfEntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3237)
inline _bstr_t _SharingItem::GetReceivedOnBehalfOfName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedOnBehalfOfName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3238)
inline DATE _SharingItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3239)
inline VARIANT_BOOL _SharingItem::GetRecipientReassignmentProhibited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RecipientReassignmentProhibited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3240)
inline void _SharingItem::PutRecipientReassignmentProhibited ( VARIANT_BOOL RecipientReassignmentProhibited ) {
    HRESULT _hr = put_RecipientReassignmentProhibited(RecipientReassignmentProhibited);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3241)
inline RecipientsPtr _SharingItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3242)
inline VARIANT_BOOL _SharingItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3243)
inline void _SharingItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3244)
inline VARIANT_BOOL _SharingItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3245)
inline void _SharingItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3246)
inline VARIANT_BOOL _SharingItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3247)
inline void _SharingItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3248)
inline _bstr_t _SharingItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3249)
inline void _SharingItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3250)
inline DATE _SharingItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3251)
inline void _SharingItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3252)
inline enum OlRemoteStatus _SharingItem::GetRemoteStatus ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_RemoteStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3253)
inline void _SharingItem::PutRemoteStatus ( enum OlRemoteStatus RemoteStatus ) {
    HRESULT _hr = put_RemoteStatus(RemoteStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3254)
inline _bstr_t _SharingItem::GetReplyRecipientNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReplyRecipientNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3255)
inline RecipientsPtr _SharingItem::GetReplyRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_ReplyRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3256)
inline MAPIFolderPtr _SharingItem::GetSaveSentMessageFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_SaveSentMessageFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(3257)
inline void _SharingItem::PutRefSaveSentMessageFolder ( struct MAPIFolder * SaveSentMessageFolder ) {
    HRESULT _hr = putref_SaveSentMessageFolder(SaveSentMessageFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3258)
inline _bstr_t _SharingItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3259)
inline VARIANT_BOOL _SharingItem::GetSent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3260)
inline DATE _SharingItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3261)
inline _bstr_t _SharingItem::GetSentOnBehalfOfName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SentOnBehalfOfName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3262)
inline void _SharingItem::PutSentOnBehalfOfName ( _bstr_t SentOnBehalfOfName ) {
    HRESULT _hr = put_SentOnBehalfOfName(SentOnBehalfOfName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3263)
inline VARIANT_BOOL _SharingItem::GetSubmitted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Submitted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3264)
inline _bstr_t _SharingItem::GetTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3265)
inline void _SharingItem::PutTo ( _bstr_t To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3266)
inline HRESULT _SharingItem::ClearConversationIndex ( ) {
    HRESULT _hr = raw_ClearConversationIndex();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3267)
inline _SharingItemPtr _SharingItem::Forward ( ) {
    struct _SharingItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SharingItemPtr(_result, false);
}

#pragma implementation_key(3268)
inline _MailItemPtr _SharingItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3269)
inline _MailItemPtr _SharingItem::ReplyAll ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3270)
inline HRESULT _SharingItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3271)
inline ItemPropertiesPtr _SharingItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3272)
inline enum OlBodyFormat _SharingItem::GetBodyFormat ( ) {
    enum OlBodyFormat _result;
    HRESULT _hr = get_BodyFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3273)
inline void _SharingItem::PutBodyFormat ( enum OlBodyFormat BodyFormat ) {
    HRESULT _hr = put_BodyFormat(BodyFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3274)
inline enum OlDownloadState _SharingItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3275)
inline HRESULT _SharingItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3276)
inline long _SharingItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3277)
inline void _SharingItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3278)
inline enum OlRemoteStatus _SharingItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3279)
inline void _SharingItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3280)
inline VARIANT_BOOL _SharingItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3281)
inline HRESULT _SharingItem::AddBusinessCard ( struct _ContactItem * contact ) {
    HRESULT _hr = raw_AddBusinessCard(contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3282)
inline _bstr_t _SharingItem::GetTaskSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3283)
inline void _SharingItem::PutTaskSubject ( _bstr_t TaskSubject ) {
    HRESULT _hr = put_TaskSubject(TaskSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3284)
inline DATE _SharingItem::GetTaskDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskDueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3285)
inline void _SharingItem::PutTaskDueDate ( DATE TaskDueDate ) {
    HRESULT _hr = put_TaskDueDate(TaskDueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3286)
inline DATE _SharingItem::GetTaskStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskStartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3287)
inline void _SharingItem::PutTaskStartDate ( DATE TaskStartDate ) {
    HRESULT _hr = put_TaskStartDate(TaskStartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3288)
inline DATE _SharingItem::GetTaskCompletedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskCompletedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3289)
inline void _SharingItem::PutTaskCompletedDate ( DATE TaskCompletedDate ) {
    HRESULT _hr = put_TaskCompletedDate(TaskCompletedDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3290)
inline DATE _SharingItem::GetToDoTaskOrdinal ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ToDoTaskOrdinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3291)
inline void _SharingItem::PutToDoTaskOrdinal ( DATE ToDoTaskOrdinal ) {
    HRESULT _hr = put_ToDoTaskOrdinal(ToDoTaskOrdinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3292)
inline enum OlFlagIcon _SharingItem::GetFlagIcon ( ) {
    enum OlFlagIcon _result;
    HRESULT _hr = get_FlagIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3293)
inline void _SharingItem::PutFlagIcon ( enum OlFlagIcon FlagIcon ) {
    HRESULT _hr = put_FlagIcon(FlagIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3294)
inline ConflictsPtr _SharingItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(3295)
inline _bstr_t _SharingItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3296)
inline _bstr_t _SharingItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3297)
inline VARIANT_BOOL _SharingItem::GetEnableSharedAttachments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSharedAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3298)
inline void _SharingItem::PutEnableSharedAttachments ( VARIANT_BOOL EnableSharedAttachments ) {
    HRESULT _hr = put_EnableSharedAttachments(EnableSharedAttachments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3299)
inline enum OlPermission _SharingItem::GetPermission ( ) {
    enum OlPermission _result;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3300)
inline void _SharingItem::PutPermission ( enum OlPermission Permission ) {
    HRESULT _hr = put_Permission(Permission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3301)
inline enum OlPermissionService _SharingItem::GetPermissionService ( ) {
    enum OlPermissionService _result;
    HRESULT _hr = get_PermissionService(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3302)
inline void _SharingItem::PutPermissionService ( enum OlPermissionService PermissionService ) {
    HRESULT _hr = put_PermissionService(PermissionService);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3303)
inline HRESULT _SharingItem::MarkAsTask ( enum OlMarkInterval MarkInterval ) {
    HRESULT _hr = raw_MarkAsTask(MarkInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3304)
inline HRESULT _SharingItem::ClearTaskFlag ( ) {
    HRESULT _hr = raw_ClearTaskFlag();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3305)
inline VARIANT_BOOL _SharingItem::GetIsMarkedAsTask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMarkedAsTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3306)
inline _ConversationPtr _SharingItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(3307)
inline _bstr_t _SharingItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3308)
inline _bstr_t _SharingItem::GetPermissionTemplateGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PermissionTemplateGuid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3309)
inline void _SharingItem::PutPermissionTemplateGuid ( _bstr_t PermissionTemplateGuid ) {
    HRESULT _hr = put_PermissionTemplateGuid(PermissionTemplateGuid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3310)
inline _variant_t _SharingItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3311)
inline void _SharingItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3312)
inline _bstr_t _SharingItem::GetRetentionPolicyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RetentionPolicyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3313)
inline DATE _SharingItem::GetRetentionExpirationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_RetentionExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Explorers wrapper method implementations
//

#pragma implementation_key(3314)
inline _ApplicationPtr _Explorers::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3315)
inline enum OlObjectClass _Explorers::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3316)
inline _NameSpacePtr _Explorers::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3317)
inline IDispatchPtr _Explorers::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3318)
inline long _Explorers::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3319)
inline _ExplorerPtr _Explorers::Item ( const _variant_t & Index ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

#pragma implementation_key(3320)
inline _ExplorerPtr _Explorers::Add ( const _variant_t & Folder, enum OlFolderDisplayMode DisplayMode ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_Add(Folder, DisplayMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

//
// interface Search wrapper method implementations
//

#pragma implementation_key(3321)
inline _ApplicationPtr Search::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3322)
inline enum OlObjectClass Search::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3323)
inline _NameSpacePtr Search::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3324)
inline IDispatchPtr Search::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3325)
inline _bstr_t Search::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3326)
inline VARIANT_BOOL Search::GetIsSynchronous ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSynchronous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3327)
inline _ResultsPtr Search::GetResults ( ) {
    struct _Results * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ResultsPtr(_result, false);
}

#pragma implementation_key(3328)
inline VARIANT_BOOL Search::GetSearchSubFolders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SearchSubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3329)
inline HRESULT Search::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3330)
inline _bstr_t Search::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3331)
inline _bstr_t Search::GetScope ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Scope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3332)
inline MAPIFolderPtr Search::Save ( _bstr_t Name ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_Save(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(3333)
inline _TablePtr Search::GetTable ( ) {
    struct _Table * _result = 0;
    HRESULT _hr = raw_GetTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TablePtr(_result, false);
}

//
// interface _AppointmentItem wrapper method implementations
//

#pragma implementation_key(3334)
inline _ApplicationPtr _AppointmentItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3335)
inline enum OlObjectClass _AppointmentItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3336)
inline _NameSpacePtr _AppointmentItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3337)
inline IDispatchPtr _AppointmentItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3338)
inline ActionsPtr _AppointmentItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3339)
inline AttachmentsPtr _AppointmentItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3340)
inline _bstr_t _AppointmentItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3341)
inline void _AppointmentItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3342)
inline _bstr_t _AppointmentItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3343)
inline void _AppointmentItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3344)
inline _bstr_t _AppointmentItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3345)
inline void _AppointmentItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3346)
inline _bstr_t _AppointmentItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3347)
inline void _AppointmentItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3348)
inline _bstr_t _AppointmentItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3349)
inline _bstr_t _AppointmentItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3350)
inline DATE _AppointmentItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3351)
inline _bstr_t _AppointmentItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3352)
inline FormDescriptionPtr _AppointmentItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(3353)
inline _InspectorPtr _AppointmentItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3354)
inline enum OlImportance _AppointmentItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3355)
inline void _AppointmentItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3356)
inline DATE _AppointmentItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3357)
inline IUnknownPtr _AppointmentItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3358)
inline _bstr_t _AppointmentItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3359)
inline void _AppointmentItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3360)
inline _bstr_t _AppointmentItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3361)
inline void _AppointmentItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3362)
inline VARIANT_BOOL _AppointmentItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3363)
inline void _AppointmentItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3364)
inline long _AppointmentItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3365)
inline _bstr_t _AppointmentItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3366)
inline VARIANT_BOOL _AppointmentItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3367)
inline enum OlSensitivity _AppointmentItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3368)
inline void _AppointmentItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3369)
inline long _AppointmentItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3370)
inline _bstr_t _AppointmentItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3371)
inline void _AppointmentItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3372)
inline VARIANT_BOOL _AppointmentItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3373)
inline void _AppointmentItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3374)
inline UserPropertiesPtr _AppointmentItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(3375)
inline HRESULT _AppointmentItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3376)
inline IDispatchPtr _AppointmentItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3377)
inline HRESULT _AppointmentItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3378)
inline HRESULT _AppointmentItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3379)
inline IDispatchPtr _AppointmentItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3380)
inline HRESULT _AppointmentItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3381)
inline HRESULT _AppointmentItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3382)
inline HRESULT _AppointmentItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3383)
inline VARIANT_BOOL _AppointmentItem::GetAllDayEvent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllDayEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3384)
inline void _AppointmentItem::PutAllDayEvent ( VARIANT_BOOL AllDayEvent ) {
    HRESULT _hr = put_AllDayEvent(AllDayEvent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3385)
inline enum OlBusyStatus _AppointmentItem::GetBusyStatus ( ) {
    enum OlBusyStatus _result;
    HRESULT _hr = get_BusyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3386)
inline void _AppointmentItem::PutBusyStatus ( enum OlBusyStatus BusyStatus ) {
    HRESULT _hr = put_BusyStatus(BusyStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3387)
inline long _AppointmentItem::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3388)
inline void _AppointmentItem::PutDuration ( long Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3389)
inline DATE _AppointmentItem::GetEnd ( ) {
    DATE _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3390)
inline void _AppointmentItem::PutEnd ( DATE End ) {
    HRESULT _hr = put_End(End);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3391)
inline VARIANT_BOOL _AppointmentItem::GetIsOnlineMeeting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOnlineMeeting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3392)
inline void _AppointmentItem::PutIsOnlineMeeting ( VARIANT_BOOL IsOnlineMeeting ) {
    HRESULT _hr = put_IsOnlineMeeting(IsOnlineMeeting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3393)
inline VARIANT_BOOL _AppointmentItem::GetIsRecurring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRecurring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3394)
inline _bstr_t _AppointmentItem::GetLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3395)
inline void _AppointmentItem::PutLocation ( _bstr_t Location ) {
    HRESULT _hr = put_Location(Location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3396)
inline enum OlMeetingStatus _AppointmentItem::GetMeetingStatus ( ) {
    enum OlMeetingStatus _result;
    HRESULT _hr = get_MeetingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3397)
inline void _AppointmentItem::PutMeetingStatus ( enum OlMeetingStatus MeetingStatus ) {
    HRESULT _hr = put_MeetingStatus(MeetingStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3398)
inline VARIANT_BOOL _AppointmentItem::GetNetMeetingAutoStart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NetMeetingAutoStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3399)
inline void _AppointmentItem::PutNetMeetingAutoStart ( VARIANT_BOOL NetMeetingAutoStart ) {
    HRESULT _hr = put_NetMeetingAutoStart(NetMeetingAutoStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3400)
inline _bstr_t _AppointmentItem::GetNetMeetingOrganizerAlias ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingOrganizerAlias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3401)
inline void _AppointmentItem::PutNetMeetingOrganizerAlias ( _bstr_t NetMeetingOrganizerAlias ) {
    HRESULT _hr = put_NetMeetingOrganizerAlias(NetMeetingOrganizerAlias);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3402)
inline _bstr_t _AppointmentItem::GetNetMeetingServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3403)
inline void _AppointmentItem::PutNetMeetingServer ( _bstr_t NetMeetingServer ) {
    HRESULT _hr = put_NetMeetingServer(NetMeetingServer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3404)
inline enum OlNetMeetingType _AppointmentItem::GetNetMeetingType ( ) {
    enum OlNetMeetingType _result;
    HRESULT _hr = get_NetMeetingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3405)
inline void _AppointmentItem::PutNetMeetingType ( enum OlNetMeetingType NetMeetingType ) {
    HRESULT _hr = put_NetMeetingType(NetMeetingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3406)
inline _bstr_t _AppointmentItem::GetOptionalAttendees ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OptionalAttendees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3407)
inline void _AppointmentItem::PutOptionalAttendees ( _bstr_t OptionalAttendees ) {
    HRESULT _hr = put_OptionalAttendees(OptionalAttendees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3408)
inline _bstr_t _AppointmentItem::GetOrganizer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Organizer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3409)
inline RecipientsPtr _AppointmentItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3410)
inline enum OlRecurrenceState _AppointmentItem::GetRecurrenceState ( ) {
    enum OlRecurrenceState _result;
    HRESULT _hr = get_RecurrenceState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3411)
inline long _AppointmentItem::GetReminderMinutesBeforeStart ( ) {
    long _result = 0;
    HRESULT _hr = get_ReminderMinutesBeforeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3412)
inline void _AppointmentItem::PutReminderMinutesBeforeStart ( long ReminderMinutesBeforeStart ) {
    HRESULT _hr = put_ReminderMinutesBeforeStart(ReminderMinutesBeforeStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3413)
inline VARIANT_BOOL _AppointmentItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3414)
inline void _AppointmentItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3415)
inline VARIANT_BOOL _AppointmentItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3416)
inline void _AppointmentItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3417)
inline VARIANT_BOOL _AppointmentItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3418)
inline void _AppointmentItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3419)
inline _bstr_t _AppointmentItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3420)
inline void _AppointmentItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3421)
inline DATE _AppointmentItem::GetReplyTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReplyTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3422)
inline void _AppointmentItem::PutReplyTime ( DATE ReplyTime ) {
    HRESULT _hr = put_ReplyTime(ReplyTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3423)
inline _bstr_t _AppointmentItem::GetRequiredAttendees ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequiredAttendees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3424)
inline void _AppointmentItem::PutRequiredAttendees ( _bstr_t RequiredAttendees ) {
    HRESULT _hr = put_RequiredAttendees(RequiredAttendees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3425)
inline _bstr_t _AppointmentItem::GetResources ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Resources(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3426)
inline void _AppointmentItem::PutResources ( _bstr_t Resources ) {
    HRESULT _hr = put_Resources(Resources);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3427)
inline VARIANT_BOOL _AppointmentItem::GetResponseRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResponseRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3428)
inline void _AppointmentItem::PutResponseRequested ( VARIANT_BOOL ResponseRequested ) {
    HRESULT _hr = put_ResponseRequested(ResponseRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3429)
inline enum OlResponseStatus _AppointmentItem::GetResponseStatus ( ) {
    enum OlResponseStatus _result;
    HRESULT _hr = get_ResponseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3430)
inline DATE _AppointmentItem::GetStart ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3431)
inline void _AppointmentItem::PutStart ( DATE Start ) {
    HRESULT _hr = put_Start(Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3432)
inline HRESULT _AppointmentItem::ClearRecurrencePattern ( ) {
    HRESULT _hr = raw_ClearRecurrencePattern();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3433)
inline _MailItemPtr _AppointmentItem::ForwardAsVcal ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ForwardAsVcal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3434)
inline RecurrencePatternPtr _AppointmentItem::GetRecurrencePattern ( ) {
    struct RecurrencePattern * _result = 0;
    HRESULT _hr = raw_GetRecurrencePattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecurrencePatternPtr(_result, false);
}

#pragma implementation_key(3435)
inline _MeetingItemPtr _AppointmentItem::Respond ( enum OlMeetingResponse Response, const _variant_t & fNoUI, const _variant_t & fAdditionalTextDialog ) {
    struct _MeetingItem * _result = 0;
    HRESULT _hr = raw_Respond(Response, fNoUI, fAdditionalTextDialog, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MeetingItemPtr(_result, false);
}

#pragma implementation_key(3436)
inline HRESULT _AppointmentItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3437)
inline _bstr_t _AppointmentItem::GetNetMeetingDocPathName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingDocPathName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3438)
inline void _AppointmentItem::PutNetMeetingDocPathName ( _bstr_t NetMeetingDocPathName ) {
    HRESULT _hr = put_NetMeetingDocPathName(NetMeetingDocPathName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3439)
inline _bstr_t _AppointmentItem::GetNetShowURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetShowURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3440)
inline void _AppointmentItem::PutNetShowURL ( _bstr_t NetShowURL ) {
    HRESULT _hr = put_NetShowURL(NetShowURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3441)
inline LinksPtr _AppointmentItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(3442)
inline VARIANT_BOOL _AppointmentItem::GetConferenceServerAllowExternal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConferenceServerAllowExternal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3443)
inline void _AppointmentItem::PutConferenceServerAllowExternal ( VARIANT_BOOL ConferenceServerAllowExternal ) {
    HRESULT _hr = put_ConferenceServerAllowExternal(ConferenceServerAllowExternal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3444)
inline _bstr_t _AppointmentItem::GetConferenceServerPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConferenceServerPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3445)
inline void _AppointmentItem::PutConferenceServerPassword ( _bstr_t ConferenceServerPassword ) {
    HRESULT _hr = put_ConferenceServerPassword(ConferenceServerPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3446)
inline ItemPropertiesPtr _AppointmentItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3447)
inline enum OlDownloadState _AppointmentItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3448)
inline HRESULT _AppointmentItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3449)
inline long _AppointmentItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3450)
inline void _AppointmentItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3451)
inline enum OlRemoteStatus _AppointmentItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3452)
inline void _AppointmentItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3453)
inline VARIANT_BOOL _AppointmentItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3454)
inline _bstr_t _AppointmentItem::GetMeetingWorkspaceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MeetingWorkspaceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3455)
inline VARIANT_BOOL _AppointmentItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3456)
inline ConflictsPtr _AppointmentItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(3457)
inline _PropertyAccessorPtr _AppointmentItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3458)
inline _AccountPtr _AppointmentItem::GetSendUsingAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_SendUsingAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

#pragma implementation_key(3459)
inline void _AppointmentItem::PutSendUsingAccount ( struct _Account * SendUsingAccount ) {
    HRESULT _hr = put_SendUsingAccount(SendUsingAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3460)
inline _bstr_t _AppointmentItem::GetGlobalAppointmentID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GlobalAppointmentID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3461)
inline VARIANT_BOOL _AppointmentItem::GetForceUpdateToAllAttendees ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ForceUpdateToAllAttendees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3462)
inline void _AppointmentItem::PutForceUpdateToAllAttendees ( VARIANT_BOOL ForceUpdateToAllAttendees ) {
    HRESULT _hr = put_ForceUpdateToAllAttendees(ForceUpdateToAllAttendees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3463)
inline DATE _AppointmentItem::GetStartUTC ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartUTC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3464)
inline void _AppointmentItem::PutStartUTC ( DATE StartUTC ) {
    HRESULT _hr = put_StartUTC(StartUTC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3465)
inline DATE _AppointmentItem::GetEndUTC ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EndUTC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3466)
inline void _AppointmentItem::PutEndUTC ( DATE EndUTC ) {
    HRESULT _hr = put_EndUTC(EndUTC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3467)
inline DATE _AppointmentItem::GetStartInStartTimeZone ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartInStartTimeZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3468)
inline void _AppointmentItem::PutStartInStartTimeZone ( DATE StartInStartTimeZone ) {
    HRESULT _hr = put_StartInStartTimeZone(StartInStartTimeZone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3469)
inline DATE _AppointmentItem::GetEndInEndTimeZone ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EndInEndTimeZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3470)
inline void _AppointmentItem::PutEndInEndTimeZone ( DATE EndInEndTimeZone ) {
    HRESULT _hr = put_EndInEndTimeZone(EndInEndTimeZone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3471)
inline _TimeZonePtr _AppointmentItem::GetStartTimeZone ( ) {
    struct _TimeZone * _result = 0;
    HRESULT _hr = get_StartTimeZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TimeZonePtr(_result, false);
}

#pragma implementation_key(3472)
inline void _AppointmentItem::PutStartTimeZone ( struct _TimeZone * StartTimeZone ) {
    HRESULT _hr = put_StartTimeZone(StartTimeZone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3473)
inline _TimeZonePtr _AppointmentItem::GetEndTimeZone ( ) {
    struct _TimeZone * _result = 0;
    HRESULT _hr = get_EndTimeZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TimeZonePtr(_result, false);
}

#pragma implementation_key(3474)
inline void _AppointmentItem::PutEndTimeZone ( struct _TimeZone * EndTimeZone ) {
    HRESULT _hr = put_EndTimeZone(EndTimeZone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3475)
inline _ConversationPtr _AppointmentItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(3476)
inline _bstr_t _AppointmentItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3477)
inline _AppointmentItemPtr _AppointmentItem::CopyTo ( struct MAPIFolder * DestinationFolder, enum OlAppointmentCopyOptions CopyOptions ) {
    struct _AppointmentItem * _result = 0;
    HRESULT _hr = raw_CopyTo(DestinationFolder, CopyOptions, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AppointmentItemPtr(_result, false);
}

#pragma implementation_key(3478)
inline _variant_t _AppointmentItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3479)
inline void _AppointmentItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3480)
inline AddressEntryPtr _AppointmentItem::GetOrganizer ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetOrganizer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

//
// interface _MeetingItem wrapper method implementations
//

#pragma implementation_key(3481)
inline _ApplicationPtr _MeetingItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3482)
inline enum OlObjectClass _MeetingItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3483)
inline _NameSpacePtr _MeetingItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3484)
inline IDispatchPtr _MeetingItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3485)
inline ActionsPtr _MeetingItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3486)
inline AttachmentsPtr _MeetingItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3487)
inline _bstr_t _MeetingItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3488)
inline void _MeetingItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3489)
inline _bstr_t _MeetingItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3490)
inline void _MeetingItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3491)
inline _bstr_t _MeetingItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3492)
inline void _MeetingItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3493)
inline _bstr_t _MeetingItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3494)
inline void _MeetingItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3495)
inline _bstr_t _MeetingItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3496)
inline _bstr_t _MeetingItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3497)
inline DATE _MeetingItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3498)
inline _bstr_t _MeetingItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3499)
inline FormDescriptionPtr _MeetingItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(3500)
inline _InspectorPtr _MeetingItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3501)
inline enum OlImportance _MeetingItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3502)
inline void _MeetingItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3503)
inline DATE _MeetingItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3504)
inline IUnknownPtr _MeetingItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3505)
inline _bstr_t _MeetingItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3506)
inline void _MeetingItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3507)
inline _bstr_t _MeetingItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3508)
inline void _MeetingItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3509)
inline VARIANT_BOOL _MeetingItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3510)
inline void _MeetingItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3511)
inline long _MeetingItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3512)
inline _bstr_t _MeetingItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3513)
inline VARIANT_BOOL _MeetingItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3514)
inline enum OlSensitivity _MeetingItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3515)
inline void _MeetingItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3516)
inline long _MeetingItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3517)
inline _bstr_t _MeetingItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3518)
inline void _MeetingItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3519)
inline VARIANT_BOOL _MeetingItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3520)
inline void _MeetingItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3521)
inline UserPropertiesPtr _MeetingItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(3522)
inline HRESULT _MeetingItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3523)
inline IDispatchPtr _MeetingItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3524)
inline HRESULT _MeetingItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3525)
inline HRESULT _MeetingItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3526)
inline IDispatchPtr _MeetingItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3527)
inline HRESULT _MeetingItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3528)
inline HRESULT _MeetingItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3529)
inline HRESULT _MeetingItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3530)
inline VARIANT_BOOL _MeetingItem::GetAutoForwarded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoForwarded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3531)
inline void _MeetingItem::PutAutoForwarded ( VARIANT_BOOL AutoForwarded ) {
    HRESULT _hr = put_AutoForwarded(AutoForwarded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3532)
inline DATE _MeetingItem::GetDeferredDeliveryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DeferredDeliveryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3533)
inline void _MeetingItem::PutDeferredDeliveryTime ( DATE DeferredDeliveryTime ) {
    HRESULT _hr = put_DeferredDeliveryTime(DeferredDeliveryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3534)
inline VARIANT_BOOL _MeetingItem::GetDeleteAfterSubmit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteAfterSubmit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3535)
inline void _MeetingItem::PutDeleteAfterSubmit ( VARIANT_BOOL DeleteAfterSubmit ) {
    HRESULT _hr = put_DeleteAfterSubmit(DeleteAfterSubmit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3536)
inline DATE _MeetingItem::GetExpiryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpiryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3537)
inline void _MeetingItem::PutExpiryTime ( DATE ExpiryTime ) {
    HRESULT _hr = put_ExpiryTime(ExpiryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3538)
inline DATE _MeetingItem::GetFlagDueBy ( ) {
    DATE _result = 0;
    HRESULT _hr = get_FlagDueBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3539)
inline void _MeetingItem::PutFlagDueBy ( DATE FlagDueBy ) {
    HRESULT _hr = put_FlagDueBy(FlagDueBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3540)
inline _bstr_t _MeetingItem::GetFlagRequest ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlagRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3541)
inline void _MeetingItem::PutFlagRequest ( _bstr_t FlagRequest ) {
    HRESULT _hr = put_FlagRequest(FlagRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3542)
inline enum OlFlagStatus _MeetingItem::GetFlagStatus ( ) {
    enum OlFlagStatus _result;
    HRESULT _hr = get_FlagStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3543)
inline void _MeetingItem::PutFlagStatus ( enum OlFlagStatus FlagStatus ) {
    HRESULT _hr = put_FlagStatus(FlagStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3544)
inline VARIANT_BOOL _MeetingItem::GetOriginatorDeliveryReportRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OriginatorDeliveryReportRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3545)
inline void _MeetingItem::PutOriginatorDeliveryReportRequested ( VARIANT_BOOL OriginatorDeliveryReportRequested ) {
    HRESULT _hr = put_OriginatorDeliveryReportRequested(OriginatorDeliveryReportRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3546)
inline DATE _MeetingItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3547)
inline void _MeetingItem::PutReceivedTime ( DATE ReceivedTime ) {
    HRESULT _hr = put_ReceivedTime(ReceivedTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3548)
inline RecipientsPtr _MeetingItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3549)
inline VARIANT_BOOL _MeetingItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3550)
inline void _MeetingItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3551)
inline DATE _MeetingItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3552)
inline void _MeetingItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3553)
inline RecipientsPtr _MeetingItem::GetReplyRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_ReplyRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3554)
inline MAPIFolderPtr _MeetingItem::GetSaveSentMessageFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_SaveSentMessageFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(3555)
inline void _MeetingItem::PutRefSaveSentMessageFolder ( struct MAPIFolder * SaveSentMessageFolder ) {
    HRESULT _hr = putref_SaveSentMessageFolder(SaveSentMessageFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3556)
inline _bstr_t _MeetingItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3557)
inline VARIANT_BOOL _MeetingItem::GetSent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3558)
inline DATE _MeetingItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3559)
inline VARIANT_BOOL _MeetingItem::GetSubmitted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Submitted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3560)
inline _MeetingItemPtr _MeetingItem::Forward ( ) {
    struct _MeetingItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MeetingItemPtr(_result, false);
}

#pragma implementation_key(3561)
inline _AppointmentItemPtr _MeetingItem::GetAssociatedAppointment ( VARIANT_BOOL AddToCalendar ) {
    struct _AppointmentItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedAppointment(AddToCalendar, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AppointmentItemPtr(_result, false);
}

#pragma implementation_key(3562)
inline _MailItemPtr _MeetingItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3563)
inline _MailItemPtr _MeetingItem::ReplyAll ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3564)
inline HRESULT _MeetingItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3565)
inline LinksPtr _MeetingItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(3566)
inline enum OlDownloadState _MeetingItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3567)
inline HRESULT _MeetingItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3568)
inline ItemPropertiesPtr _MeetingItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3569)
inline enum OlRemoteStatus _MeetingItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3570)
inline void _MeetingItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3571)
inline VARIANT_BOOL _MeetingItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3572)
inline _bstr_t _MeetingItem::GetMeetingWorkspaceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MeetingWorkspaceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3573)
inline enum OlFlagIcon _MeetingItem::GetFlagIcon ( ) {
    enum OlFlagIcon _result;
    HRESULT _hr = get_FlagIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3574)
inline void _MeetingItem::PutFlagIcon ( enum OlFlagIcon FlagIcon ) {
    HRESULT _hr = put_FlagIcon(FlagIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3575)
inline VARIANT_BOOL _MeetingItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3576)
inline ConflictsPtr _MeetingItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(3577)
inline _bstr_t _MeetingItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3578)
inline _bstr_t _MeetingItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3579)
inline _PropertyAccessorPtr _MeetingItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3580)
inline _ConversationPtr _MeetingItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(3581)
inline _bstr_t _MeetingItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3582)
inline _AccountPtr _MeetingItem::GetSendUsingAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_SendUsingAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

#pragma implementation_key(3583)
inline void _MeetingItem::PutSendUsingAccount ( struct _Account * SendUsingAccount ) {
    HRESULT _hr = put_SendUsingAccount(SendUsingAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3584)
inline VARIANT_BOOL _MeetingItem::GetIsLatestVersion ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLatestVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3585)
inline _variant_t _MeetingItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3586)
inline void _MeetingItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3587)
inline DATE _MeetingItem::GetRetentionExpirationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_RetentionExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3588)
inline _bstr_t _MeetingItem::GetRetentionPolicyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RetentionPolicyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _DocumentItem wrapper method implementations
//

#pragma implementation_key(3589)
inline _ApplicationPtr _DocumentItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3590)
inline enum OlObjectClass _DocumentItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3591)
inline _NameSpacePtr _DocumentItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3592)
inline IDispatchPtr _DocumentItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3593)
inline ActionsPtr _DocumentItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3594)
inline AttachmentsPtr _DocumentItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3595)
inline _bstr_t _DocumentItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3596)
inline void _DocumentItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3597)
inline _bstr_t _DocumentItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3598)
inline void _DocumentItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3599)
inline _bstr_t _DocumentItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3600)
inline void _DocumentItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3601)
inline _bstr_t _DocumentItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3602)
inline void _DocumentItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3603)
inline _bstr_t _DocumentItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3604)
inline _bstr_t _DocumentItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3605)
inline DATE _DocumentItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3606)
inline _bstr_t _DocumentItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3607)
inline FormDescriptionPtr _DocumentItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(3608)
inline _InspectorPtr _DocumentItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3609)
inline enum OlImportance _DocumentItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3610)
inline void _DocumentItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3611)
inline DATE _DocumentItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3612)
inline IUnknownPtr _DocumentItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3613)
inline _bstr_t _DocumentItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3614)
inline void _DocumentItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3615)
inline _bstr_t _DocumentItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3616)
inline void _DocumentItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3617)
inline VARIANT_BOOL _DocumentItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3618)
inline void _DocumentItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3619)
inline long _DocumentItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3620)
inline _bstr_t _DocumentItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3621)
inline VARIANT_BOOL _DocumentItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3622)
inline enum OlSensitivity _DocumentItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3623)
inline void _DocumentItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3624)
inline long _DocumentItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3625)
inline _bstr_t _DocumentItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3626)
inline void _DocumentItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3627)
inline VARIANT_BOOL _DocumentItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3628)
inline void _DocumentItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3629)
inline UserPropertiesPtr _DocumentItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(3630)
inline HRESULT _DocumentItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3631)
inline IDispatchPtr _DocumentItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3632)
inline HRESULT _DocumentItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3633)
inline HRESULT _DocumentItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3634)
inline IDispatchPtr _DocumentItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3635)
inline HRESULT _DocumentItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3636)
inline HRESULT _DocumentItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3637)
inline HRESULT _DocumentItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3638)
inline LinksPtr _DocumentItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(3639)
inline enum OlDownloadState _DocumentItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3640)
inline HRESULT _DocumentItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3641)
inline ItemPropertiesPtr _DocumentItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3642)
inline enum OlRemoteStatus _DocumentItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3643)
inline void _DocumentItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3644)
inline VARIANT_BOOL _DocumentItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3645)
inline VARIANT_BOOL _DocumentItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3646)
inline ConflictsPtr _DocumentItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(3647)
inline _PropertyAccessorPtr _DocumentItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

//
// interface _NoteItem wrapper method implementations
//

#pragma implementation_key(3648)
inline _ApplicationPtr _NoteItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3649)
inline enum OlObjectClass _NoteItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3650)
inline _NameSpacePtr _NoteItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3651)
inline IDispatchPtr _NoteItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3652)
inline _bstr_t _NoteItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3653)
inline void _NoteItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3654)
inline _bstr_t _NoteItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3655)
inline void _NoteItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3656)
inline enum OlNoteColor _NoteItem::GetColor ( ) {
    enum OlNoteColor _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3657)
inline void _NoteItem::PutColor ( enum OlNoteColor Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3658)
inline DATE _NoteItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3659)
inline _bstr_t _NoteItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3660)
inline _InspectorPtr _NoteItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3661)
inline long _NoteItem::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3662)
inline void _NoteItem::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3663)
inline DATE _NoteItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3664)
inline long _NoteItem::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3665)
inline void _NoteItem::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3666)
inline _bstr_t _NoteItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3667)
inline void _NoteItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3668)
inline VARIANT_BOOL _NoteItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3669)
inline long _NoteItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3670)
inline _bstr_t _NoteItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3671)
inline long _NoteItem::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3672)
inline void _NoteItem::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3673)
inline long _NoteItem::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3674)
inline void _NoteItem::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3675)
inline HRESULT _NoteItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3676)
inline IDispatchPtr _NoteItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3677)
inline HRESULT _NoteItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3678)
inline HRESULT _NoteItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3679)
inline IDispatchPtr _NoteItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3680)
inline HRESULT _NoteItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3681)
inline HRESULT _NoteItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3682)
inline HRESULT _NoteItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3683)
inline LinksPtr _NoteItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(3684)
inline enum OlDownloadState _NoteItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3685)
inline ItemPropertiesPtr _NoteItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3686)
inline enum OlRemoteStatus _NoteItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3687)
inline void _NoteItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3688)
inline VARIANT_BOOL _NoteItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3689)
inline VARIANT_BOOL _NoteItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3690)
inline ConflictsPtr _NoteItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(3691)
inline _PropertyAccessorPtr _NoteItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

//
// interface _NavigationFolder wrapper method implementations
//

#pragma implementation_key(3692)
inline _ApplicationPtr _NavigationFolder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3693)
inline enum OlObjectClass _NavigationFolder::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3694)
inline _NameSpacePtr _NavigationFolder::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3695)
inline IDispatchPtr _NavigationFolder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3696)
inline MAPIFolderPtr _NavigationFolder::GetFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_Folder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(3697)
inline VARIANT_BOOL _NavigationFolder::GetIsSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3698)
inline void _NavigationFolder::PutIsSelected ( VARIANT_BOOL IsSelected ) {
    HRESULT _hr = put_IsSelected(IsSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3699)
inline VARIANT_BOOL _NavigationFolder::GetIsSideBySide ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSideBySide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3700)
inline void _NavigationFolder::PutIsSideBySide ( VARIANT_BOOL IsSideBySide ) {
    HRESULT _hr = put_IsSideBySide(IsSideBySide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3701)
inline long _NavigationFolder::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3702)
inline void _NavigationFolder::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3703)
inline VARIANT_BOOL _NavigationFolder::GetIsRemovable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRemovable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3704)
inline _bstr_t _NavigationFolder::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _NavigationFolders wrapper method implementations
//

#pragma implementation_key(3705)
inline _ApplicationPtr _NavigationFolders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3706)
inline enum OlObjectClass _NavigationFolders::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3707)
inline _NameSpacePtr _NavigationFolders::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3708)
inline IDispatchPtr _NavigationFolders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3709)
inline long _NavigationFolders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3710)
inline _NavigationFolderPtr _NavigationFolders::Item ( const _variant_t & Index ) {
    struct _NavigationFolder * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationFolderPtr(_result, false);
}

#pragma implementation_key(3711)
inline _NavigationFolderPtr _NavigationFolders::Add ( struct MAPIFolder * Folder ) {
    struct _NavigationFolder * _result = 0;
    HRESULT _hr = raw_Add(Folder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NavigationFolderPtr(_result, false);
}

#pragma implementation_key(3712)
inline HRESULT _NavigationFolders::Remove ( struct _NavigationFolder * RemovableFolder ) {
    HRESULT _hr = raw_Remove(RemovableFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _SolutionsModule wrapper method implementations
//

#pragma implementation_key(3713)
inline _ApplicationPtr _SolutionsModule::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3714)
inline enum OlObjectClass _SolutionsModule::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3715)
inline _NameSpacePtr _SolutionsModule::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3716)
inline IDispatchPtr _SolutionsModule::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3717)
inline enum OlNavigationModuleType _SolutionsModule::GetNavigationModuleType ( ) {
    enum OlNavigationModuleType _result;
    HRESULT _hr = get_NavigationModuleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3718)
inline _bstr_t _SolutionsModule::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3719)
inline long _SolutionsModule::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3720)
inline void _SolutionsModule::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3721)
inline VARIANT_BOOL _SolutionsModule::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3722)
inline void _SolutionsModule::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3723)
inline HRESULT _SolutionsModule::AddSolution ( struct MAPIFolder * Solution, enum OlSolutionScope Scope ) {
    HRESULT _hr = raw_AddSolution(Solution, Scope);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _MobileItem wrapper method implementations
//

#pragma implementation_key(3724)
inline _ApplicationPtr _MobileItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3725)
inline enum OlObjectClass _MobileItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3726)
inline _NameSpacePtr _MobileItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3727)
inline IDispatchPtr _MobileItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3728)
inline ActionsPtr _MobileItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3729)
inline AttachmentsPtr _MobileItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3730)
inline _bstr_t _MobileItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3731)
inline void _MobileItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3732)
inline _bstr_t _MobileItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3733)
inline void _MobileItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3734)
inline _bstr_t _MobileItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3735)
inline void _MobileItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3736)
inline _bstr_t _MobileItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3737)
inline void _MobileItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3738)
inline _bstr_t _MobileItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3739)
inline _bstr_t _MobileItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3740)
inline DATE _MobileItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3741)
inline _bstr_t _MobileItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3742)
inline FormDescriptionPtr _MobileItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(3743)
inline _InspectorPtr _MobileItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3744)
inline enum OlImportance _MobileItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3745)
inline void _MobileItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3746)
inline DATE _MobileItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3747)
inline IUnknownPtr _MobileItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3748)
inline _bstr_t _MobileItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3749)
inline void _MobileItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3750)
inline _bstr_t _MobileItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3751)
inline void _MobileItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3752)
inline VARIANT_BOOL _MobileItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3753)
inline void _MobileItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3754)
inline long _MobileItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3755)
inline _bstr_t _MobileItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3756)
inline VARIANT_BOOL _MobileItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3757)
inline enum OlSensitivity _MobileItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3758)
inline void _MobileItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3759)
inline long _MobileItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3760)
inline _bstr_t _MobileItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3761)
inline void _MobileItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3762)
inline VARIANT_BOOL _MobileItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3763)
inline void _MobileItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3764)
inline UserPropertiesPtr _MobileItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(3765)
inline HRESULT _MobileItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3766)
inline IDispatchPtr _MobileItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3767)
inline HRESULT _MobileItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3768)
inline HRESULT _MobileItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3769)
inline IDispatchPtr _MobileItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3770)
inline HRESULT _MobileItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3771)
inline HRESULT _MobileItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3772)
inline HRESULT _MobileItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3773)
inline _bstr_t _MobileItem::GetHTMLBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3774)
inline void _MobileItem::PutHTMLBody ( _bstr_t HTMLBody ) {
    HRESULT _hr = put_HTMLBody(HTMLBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3775)
inline enum OlMobileFormat _MobileItem::GetMobileFormat ( ) {
    enum OlMobileFormat _result;
    HRESULT _hr = get_MobileFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3776)
inline _bstr_t _MobileItem::GetSMILBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SMILBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3777)
inline void _MobileItem::PutSMILBody ( _bstr_t SMILBody ) {
    HRESULT _hr = put_SMILBody(SMILBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3778)
inline _MobileItemPtr _MobileItem::Reply ( ) {
    struct _MobileItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MobileItemPtr(_result, false);
}

#pragma implementation_key(3779)
inline _MobileItemPtr _MobileItem::ReplyAll ( ) {
    struct _MobileItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MobileItemPtr(_result, false);
}

#pragma implementation_key(3780)
inline HRESULT _MobileItem::Send ( VARIANT_BOOL ForceSend ) {
    HRESULT _hr = raw_Send(ForceSend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3781)
inline RecipientsPtr _MobileItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3782)
inline _bstr_t _MobileItem::GetTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3783)
inline void _MobileItem::PutTo ( _bstr_t To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3784)
inline _MobileItemPtr _MobileItem::Forward ( ) {
    struct _MobileItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MobileItemPtr(_result, false);
}

#pragma implementation_key(3785)
inline _bstr_t _MobileItem::GetReplyRecipientNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReplyRecipientNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3786)
inline RecipientsPtr _MobileItem::GetReplyRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_ReplyRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3787)
inline long _MobileItem::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3788)
inline VARIANT_BOOL _MobileItem::GetSubmitted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Submitted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3789)
inline ItemPropertiesPtr _MobileItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3790)
inline DATE _MobileItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3791)
inline _AccountPtr _MobileItem::GetSendUsingAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_SendUsingAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

#pragma implementation_key(3792)
inline void _MobileItem::PutSendUsingAccount ( struct _Account * SendUsingAccount ) {
    HRESULT _hr = put_SendUsingAccount(SendUsingAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3793)
inline VARIANT_BOOL _MobileItem::GetSent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3794)
inline DATE _MobileItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3795)
inline _PropertyAccessorPtr _MobileItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3796)
inline _bstr_t _MobileItem::GetReceivedByEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByEntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3797)
inline _bstr_t _MobileItem::GetReceivedByName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3798)
inline _bstr_t _MobileItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3799)
inline _bstr_t _MobileItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3800)
inline _bstr_t _MobileItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _JournalItem wrapper method implementations
//

#pragma implementation_key(3801)
inline _ApplicationPtr _JournalItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3802)
inline enum OlObjectClass _JournalItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3803)
inline _NameSpacePtr _JournalItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3804)
inline IDispatchPtr _JournalItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3805)
inline ActionsPtr _JournalItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3806)
inline AttachmentsPtr _JournalItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3807)
inline _bstr_t _JournalItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3808)
inline void _JournalItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3809)
inline _bstr_t _JournalItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3810)
inline void _JournalItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3811)
inline _bstr_t _JournalItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3812)
inline void _JournalItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3813)
inline _bstr_t _JournalItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3814)
inline void _JournalItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3815)
inline _bstr_t _JournalItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3816)
inline _bstr_t _JournalItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3817)
inline DATE _JournalItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3818)
inline _bstr_t _JournalItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3819)
inline FormDescriptionPtr _JournalItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(3820)
inline _InspectorPtr _JournalItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3821)
inline enum OlImportance _JournalItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3822)
inline void _JournalItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3823)
inline DATE _JournalItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3824)
inline IUnknownPtr _JournalItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3825)
inline _bstr_t _JournalItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3826)
inline void _JournalItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3827)
inline _bstr_t _JournalItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3828)
inline void _JournalItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3829)
inline VARIANT_BOOL _JournalItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3830)
inline void _JournalItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3831)
inline long _JournalItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3832)
inline _bstr_t _JournalItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3833)
inline VARIANT_BOOL _JournalItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3834)
inline enum OlSensitivity _JournalItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3835)
inline void _JournalItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3836)
inline long _JournalItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3837)
inline _bstr_t _JournalItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3838)
inline void _JournalItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3839)
inline VARIANT_BOOL _JournalItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3840)
inline void _JournalItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3841)
inline UserPropertiesPtr _JournalItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(3842)
inline HRESULT _JournalItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3843)
inline IDispatchPtr _JournalItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3844)
inline HRESULT _JournalItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3845)
inline HRESULT _JournalItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3846)
inline IDispatchPtr _JournalItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3847)
inline HRESULT _JournalItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3848)
inline HRESULT _JournalItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3849)
inline HRESULT _JournalItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3850)
inline _bstr_t _JournalItem::GetContactNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContactNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3851)
inline void _JournalItem::PutContactNames ( _bstr_t ContactNames ) {
    HRESULT _hr = put_ContactNames(ContactNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3852)
inline VARIANT_BOOL _JournalItem::GetDocPosted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocPosted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3853)
inline void _JournalItem::PutDocPosted ( VARIANT_BOOL DocPosted ) {
    HRESULT _hr = put_DocPosted(DocPosted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3854)
inline VARIANT_BOOL _JournalItem::GetDocPrinted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocPrinted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3855)
inline void _JournalItem::PutDocPrinted ( VARIANT_BOOL DocPrinted ) {
    HRESULT _hr = put_DocPrinted(DocPrinted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3856)
inline VARIANT_BOOL _JournalItem::GetDocRouted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocRouted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3857)
inline void _JournalItem::PutDocRouted ( VARIANT_BOOL DocRouted ) {
    HRESULT _hr = put_DocRouted(DocRouted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3858)
inline VARIANT_BOOL _JournalItem::GetDocSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocSaved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3859)
inline void _JournalItem::PutDocSaved ( VARIANT_BOOL DocSaved ) {
    HRESULT _hr = put_DocSaved(DocSaved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3860)
inline long _JournalItem::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3861)
inline void _JournalItem::PutDuration ( long Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3862)
inline DATE _JournalItem::GetEnd ( ) {
    DATE _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3863)
inline void _JournalItem::PutEnd ( DATE End ) {
    HRESULT _hr = put_End(End);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3864)
inline _bstr_t _JournalItem::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3865)
inline void _JournalItem::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3866)
inline RecipientsPtr _JournalItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(3867)
inline DATE _JournalItem::GetStart ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3868)
inline void _JournalItem::PutStart ( DATE Start ) {
    HRESULT _hr = put_Start(Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3869)
inline _MailItemPtr _JournalItem::Forward ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3870)
inline _MailItemPtr _JournalItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3871)
inline _MailItemPtr _JournalItem::ReplyAll ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3872)
inline HRESULT _JournalItem::StartTimer ( ) {
    HRESULT _hr = raw_StartTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3873)
inline HRESULT _JournalItem::StopTimer ( ) {
    HRESULT _hr = raw_StopTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3874)
inline LinksPtr _JournalItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(3875)
inline enum OlDownloadState _JournalItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3876)
inline HRESULT _JournalItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3877)
inline ItemPropertiesPtr _JournalItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3878)
inline enum OlRemoteStatus _JournalItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3879)
inline void _JournalItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3880)
inline VARIANT_BOOL _JournalItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3881)
inline VARIANT_BOOL _JournalItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3882)
inline ConflictsPtr _JournalItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(3883)
inline _PropertyAccessorPtr _JournalItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3884)
inline _ConversationPtr _JournalItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(3885)
inline _bstr_t _JournalItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _PostItem wrapper method implementations
//

#pragma implementation_key(3886)
inline _ApplicationPtr _PostItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3887)
inline enum OlObjectClass _PostItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3888)
inline _NameSpacePtr _PostItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3889)
inline IDispatchPtr _PostItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3890)
inline ActionsPtr _PostItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3891)
inline AttachmentsPtr _PostItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3892)
inline _bstr_t _PostItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3893)
inline void _PostItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3894)
inline _bstr_t _PostItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3895)
inline void _PostItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3896)
inline _bstr_t _PostItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3897)
inline void _PostItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3898)
inline _bstr_t _PostItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3899)
inline void _PostItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3900)
inline _bstr_t _PostItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3901)
inline _bstr_t _PostItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3902)
inline DATE _PostItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3903)
inline _bstr_t _PostItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3904)
inline FormDescriptionPtr _PostItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(3905)
inline _InspectorPtr _PostItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(3906)
inline enum OlImportance _PostItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3907)
inline void _PostItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3908)
inline DATE _PostItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3909)
inline IUnknownPtr _PostItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3910)
inline _bstr_t _PostItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3911)
inline void _PostItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3912)
inline _bstr_t _PostItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3913)
inline void _PostItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3914)
inline VARIANT_BOOL _PostItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3915)
inline void _PostItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3916)
inline long _PostItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3917)
inline _bstr_t _PostItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3918)
inline VARIANT_BOOL _PostItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3919)
inline enum OlSensitivity _PostItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3920)
inline void _PostItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3921)
inline long _PostItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3922)
inline _bstr_t _PostItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3923)
inline void _PostItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3924)
inline VARIANT_BOOL _PostItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3925)
inline void _PostItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3926)
inline UserPropertiesPtr _PostItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(3927)
inline HRESULT _PostItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3928)
inline IDispatchPtr _PostItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3929)
inline HRESULT _PostItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3930)
inline HRESULT _PostItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3931)
inline IDispatchPtr _PostItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3932)
inline HRESULT _PostItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3933)
inline HRESULT _PostItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3934)
inline HRESULT _PostItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3935)
inline DATE _PostItem::GetExpiryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpiryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3936)
inline void _PostItem::PutExpiryTime ( DATE ExpiryTime ) {
    HRESULT _hr = put_ExpiryTime(ExpiryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3937)
inline _bstr_t _PostItem::GetHTMLBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3938)
inline void _PostItem::PutHTMLBody ( _bstr_t HTMLBody ) {
    HRESULT _hr = put_HTMLBody(HTMLBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3939)
inline DATE _PostItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3940)
inline _bstr_t _PostItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3941)
inline DATE _PostItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3942)
inline HRESULT _PostItem::ClearConversationIndex ( ) {
    HRESULT _hr = raw_ClearConversationIndex();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3943)
inline _MailItemPtr _PostItem::Forward ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3944)
inline HRESULT _PostItem::Post ( ) {
    HRESULT _hr = raw_Post();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3945)
inline _MailItemPtr _PostItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(3946)
inline LinksPtr _PostItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(3947)
inline ItemPropertiesPtr _PostItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(3948)
inline enum OlBodyFormat _PostItem::GetBodyFormat ( ) {
    enum OlBodyFormat _result;
    HRESULT _hr = get_BodyFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3949)
inline void _PostItem::PutBodyFormat ( enum OlBodyFormat BodyFormat ) {
    HRESULT _hr = put_BodyFormat(BodyFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3950)
inline enum OlDownloadState _PostItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3951)
inline HRESULT _PostItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3952)
inline long _PostItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3953)
inline void _PostItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3954)
inline enum OlRemoteStatus _PostItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3955)
inline void _PostItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3956)
inline VARIANT_BOOL _PostItem::SetACLs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetACLs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3957)
inline VARIANT_BOOL _PostItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3958)
inline VARIANT_BOOL _PostItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3959)
inline ConflictsPtr _PostItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(3960)
inline _bstr_t _PostItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3961)
inline _bstr_t _PostItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3962)
inline _PropertyAccessorPtr _PostItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(3963)
inline _bstr_t _PostItem::GetTaskSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3964)
inline void _PostItem::PutTaskSubject ( _bstr_t TaskSubject ) {
    HRESULT _hr = put_TaskSubject(TaskSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3965)
inline DATE _PostItem::GetTaskDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskDueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3966)
inline void _PostItem::PutTaskDueDate ( DATE TaskDueDate ) {
    HRESULT _hr = put_TaskDueDate(TaskDueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3967)
inline DATE _PostItem::GetTaskStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskStartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3968)
inline void _PostItem::PutTaskStartDate ( DATE TaskStartDate ) {
    HRESULT _hr = put_TaskStartDate(TaskStartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3969)
inline DATE _PostItem::GetTaskCompletedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskCompletedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3970)
inline void _PostItem::PutTaskCompletedDate ( DATE TaskCompletedDate ) {
    HRESULT _hr = put_TaskCompletedDate(TaskCompletedDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3971)
inline DATE _PostItem::GetToDoTaskOrdinal ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ToDoTaskOrdinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3972)
inline void _PostItem::PutToDoTaskOrdinal ( DATE ToDoTaskOrdinal ) {
    HRESULT _hr = put_ToDoTaskOrdinal(ToDoTaskOrdinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3973)
inline VARIANT_BOOL _PostItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3974)
inline void _PostItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3975)
inline VARIANT_BOOL _PostItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3976)
inline void _PostItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3977)
inline VARIANT_BOOL _PostItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3978)
inline void _PostItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3979)
inline _bstr_t _PostItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3980)
inline void _PostItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3981)
inline DATE _PostItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3982)
inline void _PostItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3983)
inline HRESULT _PostItem::MarkAsTask ( enum OlMarkInterval MarkInterval ) {
    HRESULT _hr = raw_MarkAsTask(MarkInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3984)
inline HRESULT _PostItem::ClearTaskFlag ( ) {
    HRESULT _hr = raw_ClearTaskFlag();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3985)
inline VARIANT_BOOL _PostItem::GetIsMarkedAsTask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMarkedAsTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3986)
inline _ConversationPtr _PostItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(3987)
inline _bstr_t _PostItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3988)
inline _variant_t _PostItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3989)
inline void _PostItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _TaskItem wrapper method implementations
//

#pragma implementation_key(3990)
inline _ApplicationPtr _TaskItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3991)
inline enum OlObjectClass _TaskItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3992)
inline _NameSpacePtr _TaskItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(3993)
inline IDispatchPtr _TaskItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3994)
inline ActionsPtr _TaskItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(3995)
inline AttachmentsPtr _TaskItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(3996)
inline _bstr_t _TaskItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3997)
inline void _TaskItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3998)
inline _bstr_t _TaskItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3999)
inline void _TaskItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4000)
inline _bstr_t _TaskItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4001)
inline void _TaskItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4002)
inline _bstr_t _TaskItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4003)
inline void _TaskItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4004)
inline _bstr_t _TaskItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4005)
inline _bstr_t _TaskItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4006)
inline DATE _TaskItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4007)
inline _bstr_t _TaskItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4008)
inline FormDescriptionPtr _TaskItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4009)
inline _InspectorPtr _TaskItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4010)
inline enum OlImportance _TaskItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4011)
inline void _TaskItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4012)
inline DATE _TaskItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4013)
inline IUnknownPtr _TaskItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4014)
inline _bstr_t _TaskItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4015)
inline void _TaskItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4016)
inline _bstr_t _TaskItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4017)
inline void _TaskItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4018)
inline VARIANT_BOOL _TaskItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4019)
inline void _TaskItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4020)
inline long _TaskItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4021)
inline _bstr_t _TaskItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4022)
inline VARIANT_BOOL _TaskItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4023)
inline enum OlSensitivity _TaskItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4024)
inline void _TaskItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4025)
inline long _TaskItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4026)
inline _bstr_t _TaskItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4027)
inline void _TaskItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4028)
inline VARIANT_BOOL _TaskItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4029)
inline void _TaskItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4030)
inline UserPropertiesPtr _TaskItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4031)
inline HRESULT _TaskItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4032)
inline IDispatchPtr _TaskItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4033)
inline HRESULT _TaskItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4034)
inline HRESULT _TaskItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4035)
inline IDispatchPtr _TaskItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4036)
inline HRESULT _TaskItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4037)
inline HRESULT _TaskItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4038)
inline HRESULT _TaskItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4039)
inline long _TaskItem::GetActualWork ( ) {
    long _result = 0;
    HRESULT _hr = get_ActualWork(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4040)
inline void _TaskItem::PutActualWork ( long ActualWork ) {
    HRESULT _hr = put_ActualWork(ActualWork);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4041)
inline _bstr_t _TaskItem::GetCardData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CardData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4042)
inline void _TaskItem::PutCardData ( _bstr_t CardData ) {
    HRESULT _hr = put_CardData(CardData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4043)
inline VARIANT_BOOL _TaskItem::GetComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Complete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4044)
inline void _TaskItem::PutComplete ( VARIANT_BOOL Complete ) {
    HRESULT _hr = put_Complete(Complete);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4045)
inline _bstr_t _TaskItem::GetContacts ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4046)
inline void _TaskItem::PutContacts ( _bstr_t Contacts ) {
    HRESULT _hr = put_Contacts(Contacts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4047)
inline _bstr_t _TaskItem::GetContactNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContactNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4048)
inline void _TaskItem::PutContactNames ( _bstr_t ContactNames ) {
    HRESULT _hr = put_ContactNames(ContactNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4049)
inline DATE _TaskItem::GetDateCompleted ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DateCompleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4050)
inline void _TaskItem::PutDateCompleted ( DATE DateCompleted ) {
    HRESULT _hr = put_DateCompleted(DateCompleted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4051)
inline enum OlTaskDelegationState _TaskItem::GetDelegationState ( ) {
    enum OlTaskDelegationState _result;
    HRESULT _hr = get_DelegationState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4052)
inline _bstr_t _TaskItem::GetDelegator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Delegator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4053)
inline DATE _TaskItem::GetDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4054)
inline void _TaskItem::PutDueDate ( DATE DueDate ) {
    HRESULT _hr = put_DueDate(DueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4055)
inline VARIANT_BOOL _TaskItem::GetIsRecurring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRecurring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4056)
inline long _TaskItem::GetOrdinal ( ) {
    long _result = 0;
    HRESULT _hr = get_Ordinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4057)
inline void _TaskItem::PutOrdinal ( long Ordinal ) {
    HRESULT _hr = put_Ordinal(Ordinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4058)
inline _bstr_t _TaskItem::GetOwner ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Owner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4059)
inline void _TaskItem::PutOwner ( _bstr_t Owner ) {
    HRESULT _hr = put_Owner(Owner);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4060)
inline enum OlTaskOwnership _TaskItem::GetOwnership ( ) {
    enum OlTaskOwnership _result;
    HRESULT _hr = get_Ownership(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4061)
inline long _TaskItem::GetPercentComplete ( ) {
    long _result = 0;
    HRESULT _hr = get_PercentComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4062)
inline void _TaskItem::PutPercentComplete ( long PercentComplete ) {
    HRESULT _hr = put_PercentComplete(PercentComplete);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4063)
inline RecipientsPtr _TaskItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(4064)
inline DATE _TaskItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4065)
inline void _TaskItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4066)
inline VARIANT_BOOL _TaskItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4067)
inline void _TaskItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4068)
inline VARIANT_BOOL _TaskItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4069)
inline void _TaskItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4070)
inline VARIANT_BOOL _TaskItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4071)
inline void _TaskItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4072)
inline _bstr_t _TaskItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4073)
inline void _TaskItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4074)
inline enum OlTaskResponse _TaskItem::GetResponseState ( ) {
    enum OlTaskResponse _result;
    HRESULT _hr = get_ResponseState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4075)
inline _bstr_t _TaskItem::GetRole ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4076)
inline void _TaskItem::PutRole ( _bstr_t Role ) {
    HRESULT _hr = put_Role(Role);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4077)
inline _bstr_t _TaskItem::GetSchedulePlusPriority ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SchedulePlusPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4078)
inline void _TaskItem::PutSchedulePlusPriority ( _bstr_t SchedulePlusPriority ) {
    HRESULT _hr = put_SchedulePlusPriority(SchedulePlusPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4079)
inline DATE _TaskItem::GetStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4080)
inline void _TaskItem::PutStartDate ( DATE StartDate ) {
    HRESULT _hr = put_StartDate(StartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4081)
inline enum OlTaskStatus _TaskItem::GetStatus ( ) {
    enum OlTaskStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4082)
inline void _TaskItem::PutStatus ( enum OlTaskStatus Status ) {
    HRESULT _hr = put_Status(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4083)
inline _bstr_t _TaskItem::GetStatusOnCompletionRecipients ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusOnCompletionRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4084)
inline void _TaskItem::PutStatusOnCompletionRecipients ( _bstr_t StatusOnCompletionRecipients ) {
    HRESULT _hr = put_StatusOnCompletionRecipients(StatusOnCompletionRecipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4085)
inline _bstr_t _TaskItem::GetStatusUpdateRecipients ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusUpdateRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4086)
inline void _TaskItem::PutStatusUpdateRecipients ( _bstr_t StatusUpdateRecipients ) {
    HRESULT _hr = put_StatusUpdateRecipients(StatusUpdateRecipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4087)
inline VARIANT_BOOL _TaskItem::GetTeamTask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TeamTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4088)
inline void _TaskItem::PutTeamTask ( VARIANT_BOOL TeamTask ) {
    HRESULT _hr = put_TeamTask(TeamTask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4089)
inline long _TaskItem::GetTotalWork ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalWork(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4090)
inline void _TaskItem::PutTotalWork ( long TotalWork ) {
    HRESULT _hr = put_TotalWork(TotalWork);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4091)
inline _TaskItemPtr _TaskItem::Assign ( ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_Assign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(4092)
inline HRESULT _TaskItem::CancelResponseState ( ) {
    HRESULT _hr = raw_CancelResponseState();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4093)
inline HRESULT _TaskItem::ClearRecurrencePattern ( ) {
    HRESULT _hr = raw_ClearRecurrencePattern();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4094)
inline RecurrencePatternPtr _TaskItem::GetRecurrencePattern ( ) {
    struct RecurrencePattern * _result = 0;
    HRESULT _hr = raw_GetRecurrencePattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecurrencePatternPtr(_result, false);
}

#pragma implementation_key(4095)
inline HRESULT _TaskItem::MarkComplete ( ) {
    HRESULT _hr = raw_MarkComplete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4096)
inline _TaskItemPtr _TaskItem::Respond ( enum OlTaskResponse Response, const _variant_t & fNoUI, const _variant_t & fAdditionalTextDialog ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_Respond(Response, fNoUI, fAdditionalTextDialog, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(4097)
inline HRESULT _TaskItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4098)
inline VARIANT_BOOL _TaskItem::SkipRecurrence ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SkipRecurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4099)
inline IDispatchPtr _TaskItem::StatusReport ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_StatusReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4100)
inline LinksPtr _TaskItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4101)
inline enum OlDownloadState _TaskItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4102)
inline HRESULT _TaskItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4103)
inline ItemPropertiesPtr _TaskItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4104)
inline long _TaskItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4105)
inline void _TaskItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4106)
inline enum OlRemoteStatus _TaskItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4107)
inline void _TaskItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4108)
inline VARIANT_BOOL _TaskItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4109)
inline VARIANT_BOOL _TaskItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4110)
inline ConflictsPtr _TaskItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4111)
inline _PropertyAccessorPtr _TaskItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4112)
inline _AccountPtr _TaskItem::GetSendUsingAccount ( ) {
    struct _Account * _result = 0;
    HRESULT _hr = get_SendUsingAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AccountPtr(_result, false);
}

#pragma implementation_key(4113)
inline void _TaskItem::PutSendUsingAccount ( struct _Account * SendUsingAccount ) {
    HRESULT _hr = put_SendUsingAccount(SendUsingAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4114)
inline DATE _TaskItem::GetToDoTaskOrdinal ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ToDoTaskOrdinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4115)
inline void _TaskItem::PutToDoTaskOrdinal ( DATE ToDoTaskOrdinal ) {
    HRESULT _hr = put_ToDoTaskOrdinal(ToDoTaskOrdinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4116)
inline _ConversationPtr _TaskItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4117)
inline _bstr_t _TaskItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4118)
inline _variant_t _TaskItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4119)
inline void _TaskItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _DistListItem wrapper method implementations
//

#pragma implementation_key(4120)
inline _ApplicationPtr _DistListItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4121)
inline enum OlObjectClass _DistListItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4122)
inline _NameSpacePtr _DistListItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4123)
inline IDispatchPtr _DistListItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4124)
inline ActionsPtr _DistListItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(4125)
inline AttachmentsPtr _DistListItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(4126)
inline _bstr_t _DistListItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4127)
inline void _DistListItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4128)
inline _bstr_t _DistListItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4129)
inline void _DistListItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4130)
inline _bstr_t _DistListItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4131)
inline void _DistListItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4132)
inline _bstr_t _DistListItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4133)
inline void _DistListItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4134)
inline _bstr_t _DistListItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4135)
inline _bstr_t _DistListItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4136)
inline DATE _DistListItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4137)
inline _bstr_t _DistListItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4138)
inline FormDescriptionPtr _DistListItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4139)
inline _InspectorPtr _DistListItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4140)
inline enum OlImportance _DistListItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4141)
inline void _DistListItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4142)
inline DATE _DistListItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4143)
inline IUnknownPtr _DistListItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4144)
inline _bstr_t _DistListItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4145)
inline void _DistListItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4146)
inline _bstr_t _DistListItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4147)
inline void _DistListItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4148)
inline VARIANT_BOOL _DistListItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4149)
inline void _DistListItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4150)
inline long _DistListItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4151)
inline _bstr_t _DistListItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4152)
inline VARIANT_BOOL _DistListItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4153)
inline enum OlSensitivity _DistListItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4154)
inline void _DistListItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4155)
inline long _DistListItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4156)
inline _bstr_t _DistListItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4157)
inline void _DistListItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4158)
inline VARIANT_BOOL _DistListItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4159)
inline void _DistListItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4160)
inline UserPropertiesPtr _DistListItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4161)
inline HRESULT _DistListItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4162)
inline IDispatchPtr _DistListItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4163)
inline HRESULT _DistListItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4164)
inline HRESULT _DistListItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4165)
inline IDispatchPtr _DistListItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4166)
inline HRESULT _DistListItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4167)
inline HRESULT _DistListItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4168)
inline HRESULT _DistListItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4169)
inline _bstr_t _DistListItem::GetDLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4170)
inline void _DistListItem::PutDLName ( _bstr_t DLName ) {
    HRESULT _hr = put_DLName(DLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4171)
inline long _DistListItem::GetMemberCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MemberCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4172)
inline long _DistListItem::GetCheckSum ( ) {
    long _result = 0;
    HRESULT _hr = get_CheckSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4173)
inline _variant_t _DistListItem::GetMembers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4174)
inline void _DistListItem::PutMembers ( const _variant_t & Members ) {
    HRESULT _hr = put_Members(Members);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4175)
inline _variant_t _DistListItem::GetOneOffMembers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OneOffMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4176)
inline void _DistListItem::PutOneOffMembers ( const _variant_t & OneOffMembers ) {
    HRESULT _hr = put_OneOffMembers(OneOffMembers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4177)
inline LinksPtr _DistListItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4178)
inline HRESULT _DistListItem::AddMembers ( struct Recipients * Recipients ) {
    HRESULT _hr = raw_AddMembers(Recipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4179)
inline HRESULT _DistListItem::RemoveMembers ( struct Recipients * Recipients ) {
    HRESULT _hr = raw_RemoveMembers(Recipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4180)
inline RecipientPtr _DistListItem::GetMember ( long Index ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_GetMember(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(4181)
inline enum OlDownloadState _DistListItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4182)
inline HRESULT _DistListItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4183)
inline HRESULT _DistListItem::AddMember ( struct Recipient * Recipient ) {
    HRESULT _hr = raw_AddMember(Recipient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4184)
inline HRESULT _DistListItem::RemoveMember ( struct Recipient * Recipient ) {
    HRESULT _hr = raw_RemoveMember(Recipient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4185)
inline ItemPropertiesPtr _DistListItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4186)
inline enum OlRemoteStatus _DistListItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4187)
inline void _DistListItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4188)
inline VARIANT_BOOL _DistListItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4189)
inline VARIANT_BOOL _DistListItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4190)
inline ConflictsPtr _DistListItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4191)
inline _PropertyAccessorPtr _DistListItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4192)
inline _bstr_t _DistListItem::GetTaskSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TaskSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4193)
inline void _DistListItem::PutTaskSubject ( _bstr_t TaskSubject ) {
    HRESULT _hr = put_TaskSubject(TaskSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4194)
inline DATE _DistListItem::GetTaskDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskDueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4195)
inline void _DistListItem::PutTaskDueDate ( DATE TaskDueDate ) {
    HRESULT _hr = put_TaskDueDate(TaskDueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4196)
inline DATE _DistListItem::GetTaskStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskStartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4197)
inline void _DistListItem::PutTaskStartDate ( DATE TaskStartDate ) {
    HRESULT _hr = put_TaskStartDate(TaskStartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4198)
inline DATE _DistListItem::GetTaskCompletedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TaskCompletedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4199)
inline void _DistListItem::PutTaskCompletedDate ( DATE TaskCompletedDate ) {
    HRESULT _hr = put_TaskCompletedDate(TaskCompletedDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4200)
inline DATE _DistListItem::GetToDoTaskOrdinal ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ToDoTaskOrdinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4201)
inline void _DistListItem::PutToDoTaskOrdinal ( DATE ToDoTaskOrdinal ) {
    HRESULT _hr = put_ToDoTaskOrdinal(ToDoTaskOrdinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4202)
inline VARIANT_BOOL _DistListItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4203)
inline void _DistListItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4204)
inline VARIANT_BOOL _DistListItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4205)
inline void _DistListItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4206)
inline VARIANT_BOOL _DistListItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4207)
inline void _DistListItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4208)
inline _bstr_t _DistListItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4209)
inline void _DistListItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4210)
inline DATE _DistListItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4211)
inline void _DistListItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4212)
inline HRESULT _DistListItem::MarkAsTask ( enum OlMarkInterval MarkInterval ) {
    HRESULT _hr = raw_MarkAsTask(MarkInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4213)
inline HRESULT _DistListItem::ClearTaskFlag ( ) {
    HRESULT _hr = raw_ClearTaskFlag();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4214)
inline VARIANT_BOOL _DistListItem::GetIsMarkedAsTask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMarkedAsTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4215)
inline _bstr_t _DistListItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4216)
inline _ConversationPtr _DistListItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4217)
inline _variant_t _DistListItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4218)
inline void _DistListItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _ReportItem wrapper method implementations
//

#pragma implementation_key(4219)
inline _ApplicationPtr _ReportItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4220)
inline enum OlObjectClass _ReportItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4221)
inline _NameSpacePtr _ReportItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4222)
inline IDispatchPtr _ReportItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4223)
inline ActionsPtr _ReportItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(4224)
inline AttachmentsPtr _ReportItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(4225)
inline _bstr_t _ReportItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4226)
inline void _ReportItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4227)
inline _bstr_t _ReportItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4228)
inline void _ReportItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4229)
inline _bstr_t _ReportItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4230)
inline void _ReportItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4231)
inline _bstr_t _ReportItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4232)
inline void _ReportItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4233)
inline _bstr_t _ReportItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4234)
inline _bstr_t _ReportItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4235)
inline DATE _ReportItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4236)
inline _bstr_t _ReportItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4237)
inline FormDescriptionPtr _ReportItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4238)
inline _InspectorPtr _ReportItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4239)
inline enum OlImportance _ReportItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4240)
inline void _ReportItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4241)
inline DATE _ReportItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4242)
inline IUnknownPtr _ReportItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4243)
inline _bstr_t _ReportItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4244)
inline void _ReportItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4245)
inline _bstr_t _ReportItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4246)
inline void _ReportItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4247)
inline VARIANT_BOOL _ReportItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4248)
inline void _ReportItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4249)
inline long _ReportItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4250)
inline _bstr_t _ReportItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4251)
inline VARIANT_BOOL _ReportItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4252)
inline enum OlSensitivity _ReportItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4253)
inline void _ReportItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4254)
inline long _ReportItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4255)
inline _bstr_t _ReportItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4256)
inline void _ReportItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4257)
inline VARIANT_BOOL _ReportItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4258)
inline void _ReportItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4259)
inline UserPropertiesPtr _ReportItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4260)
inline HRESULT _ReportItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4261)
inline IDispatchPtr _ReportItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4262)
inline HRESULT _ReportItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4263)
inline HRESULT _ReportItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4264)
inline IDispatchPtr _ReportItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4265)
inline HRESULT _ReportItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4266)
inline HRESULT _ReportItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4267)
inline HRESULT _ReportItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4268)
inline LinksPtr _ReportItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4269)
inline enum OlDownloadState _ReportItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4270)
inline HRESULT _ReportItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4271)
inline ItemPropertiesPtr _ReportItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4272)
inline enum OlRemoteStatus _ReportItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4273)
inline void _ReportItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4274)
inline VARIANT_BOOL _ReportItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4275)
inline VARIANT_BOOL _ReportItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4276)
inline ConflictsPtr _ReportItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4277)
inline _PropertyAccessorPtr _ReportItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4278)
inline _ConversationPtr _ReportItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4279)
inline _bstr_t _ReportItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4280)
inline _bstr_t _ReportItem::GetRetentionPolicyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RetentionPolicyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4281)
inline DATE _ReportItem::GetRetentionExpirationDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_RetentionExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _RemoteItem wrapper method implementations
//

#pragma implementation_key(4282)
inline _ApplicationPtr _RemoteItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4283)
inline enum OlObjectClass _RemoteItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4284)
inline _NameSpacePtr _RemoteItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4285)
inline IDispatchPtr _RemoteItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4286)
inline ActionsPtr _RemoteItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(4287)
inline AttachmentsPtr _RemoteItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(4288)
inline _bstr_t _RemoteItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4289)
inline void _RemoteItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4290)
inline _bstr_t _RemoteItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4291)
inline void _RemoteItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4292)
inline _bstr_t _RemoteItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4293)
inline void _RemoteItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4294)
inline _bstr_t _RemoteItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4295)
inline void _RemoteItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4296)
inline _bstr_t _RemoteItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4297)
inline _bstr_t _RemoteItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4298)
inline DATE _RemoteItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4299)
inline _bstr_t _RemoteItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4300)
inline FormDescriptionPtr _RemoteItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4301)
inline _InspectorPtr _RemoteItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4302)
inline enum OlImportance _RemoteItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4303)
inline void _RemoteItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4304)
inline DATE _RemoteItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4305)
inline IUnknownPtr _RemoteItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4306)
inline _bstr_t _RemoteItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4307)
inline void _RemoteItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4308)
inline _bstr_t _RemoteItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4309)
inline void _RemoteItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4310)
inline VARIANT_BOOL _RemoteItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4311)
inline void _RemoteItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4312)
inline long _RemoteItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4313)
inline _bstr_t _RemoteItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4314)
inline VARIANT_BOOL _RemoteItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4315)
inline enum OlSensitivity _RemoteItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4316)
inline void _RemoteItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4317)
inline long _RemoteItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4318)
inline _bstr_t _RemoteItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4319)
inline void _RemoteItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4320)
inline VARIANT_BOOL _RemoteItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4321)
inline void _RemoteItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4322)
inline UserPropertiesPtr _RemoteItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4323)
inline HRESULT _RemoteItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4324)
inline IDispatchPtr _RemoteItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4325)
inline HRESULT _RemoteItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4326)
inline HRESULT _RemoteItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4327)
inline IDispatchPtr _RemoteItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4328)
inline HRESULT _RemoteItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4329)
inline HRESULT _RemoteItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4330)
inline HRESULT _RemoteItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4331)
inline VARIANT_BOOL _RemoteItem::GetHasAttachment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasAttachment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4332)
inline _bstr_t _RemoteItem::GetRemoteMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteMessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4333)
inline long _RemoteItem::GetTransferSize ( ) {
    long _result = 0;
    HRESULT _hr = get_TransferSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4334)
inline long _RemoteItem::GetTransferTime ( ) {
    long _result = 0;
    HRESULT _hr = get_TransferTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4335)
inline LinksPtr _RemoteItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4336)
inline enum OlDownloadState _RemoteItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4337)
inline HRESULT _RemoteItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4338)
inline ItemPropertiesPtr _RemoteItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4339)
inline enum OlRemoteStatus _RemoteItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4340)
inline void _RemoteItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4341)
inline VARIANT_BOOL _RemoteItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4342)
inline VARIANT_BOOL _RemoteItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4343)
inline ConflictsPtr _RemoteItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4344)
inline _PropertyAccessorPtr _RemoteItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4345)
inline _ConversationPtr _RemoteItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4346)
inline _bstr_t _RemoteItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _TaskRequestItem wrapper method implementations
//

#pragma implementation_key(4347)
inline _ApplicationPtr _TaskRequestItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4348)
inline enum OlObjectClass _TaskRequestItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4349)
inline _NameSpacePtr _TaskRequestItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4350)
inline IDispatchPtr _TaskRequestItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4351)
inline ActionsPtr _TaskRequestItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(4352)
inline AttachmentsPtr _TaskRequestItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(4353)
inline _bstr_t _TaskRequestItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4354)
inline void _TaskRequestItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4355)
inline _bstr_t _TaskRequestItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4356)
inline void _TaskRequestItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4357)
inline _bstr_t _TaskRequestItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4358)
inline void _TaskRequestItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4359)
inline _bstr_t _TaskRequestItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4360)
inline void _TaskRequestItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4361)
inline _bstr_t _TaskRequestItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4362)
inline _bstr_t _TaskRequestItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4363)
inline DATE _TaskRequestItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4364)
inline _bstr_t _TaskRequestItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4365)
inline FormDescriptionPtr _TaskRequestItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4366)
inline _InspectorPtr _TaskRequestItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4367)
inline enum OlImportance _TaskRequestItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4368)
inline void _TaskRequestItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4369)
inline DATE _TaskRequestItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4370)
inline IUnknownPtr _TaskRequestItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4371)
inline _bstr_t _TaskRequestItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4372)
inline void _TaskRequestItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4373)
inline _bstr_t _TaskRequestItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4374)
inline void _TaskRequestItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4375)
inline VARIANT_BOOL _TaskRequestItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4376)
inline void _TaskRequestItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4377)
inline long _TaskRequestItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4378)
inline _bstr_t _TaskRequestItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4379)
inline VARIANT_BOOL _TaskRequestItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4380)
inline enum OlSensitivity _TaskRequestItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4381)
inline void _TaskRequestItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4382)
inline long _TaskRequestItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4383)
inline _bstr_t _TaskRequestItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4384)
inline void _TaskRequestItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4385)
inline VARIANT_BOOL _TaskRequestItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4386)
inline void _TaskRequestItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4387)
inline UserPropertiesPtr _TaskRequestItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4388)
inline HRESULT _TaskRequestItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4389)
inline IDispatchPtr _TaskRequestItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4390)
inline HRESULT _TaskRequestItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4391)
inline HRESULT _TaskRequestItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4392)
inline IDispatchPtr _TaskRequestItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4393)
inline HRESULT _TaskRequestItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4394)
inline HRESULT _TaskRequestItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4395)
inline HRESULT _TaskRequestItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4396)
inline _TaskItemPtr _TaskRequestItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(4397)
inline LinksPtr _TaskRequestItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4398)
inline enum OlDownloadState _TaskRequestItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4399)
inline HRESULT _TaskRequestItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4400)
inline ItemPropertiesPtr _TaskRequestItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4401)
inline enum OlRemoteStatus _TaskRequestItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4402)
inline void _TaskRequestItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4403)
inline VARIANT_BOOL _TaskRequestItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4404)
inline VARIANT_BOOL _TaskRequestItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4405)
inline ConflictsPtr _TaskRequestItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4406)
inline _PropertyAccessorPtr _TaskRequestItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4407)
inline _ConversationPtr _TaskRequestItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4408)
inline _bstr_t _TaskRequestItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4409)
inline _variant_t _TaskRequestItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4410)
inline void _TaskRequestItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _TaskRequestAcceptItem wrapper method implementations
//

#pragma implementation_key(4411)
inline _ApplicationPtr _TaskRequestAcceptItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4412)
inline enum OlObjectClass _TaskRequestAcceptItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4413)
inline _NameSpacePtr _TaskRequestAcceptItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4414)
inline IDispatchPtr _TaskRequestAcceptItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4415)
inline ActionsPtr _TaskRequestAcceptItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(4416)
inline AttachmentsPtr _TaskRequestAcceptItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(4417)
inline _bstr_t _TaskRequestAcceptItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4418)
inline void _TaskRequestAcceptItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4419)
inline _bstr_t _TaskRequestAcceptItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4420)
inline void _TaskRequestAcceptItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4421)
inline _bstr_t _TaskRequestAcceptItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4422)
inline void _TaskRequestAcceptItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4423)
inline _bstr_t _TaskRequestAcceptItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4424)
inline void _TaskRequestAcceptItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4425)
inline _bstr_t _TaskRequestAcceptItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4426)
inline _bstr_t _TaskRequestAcceptItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4427)
inline DATE _TaskRequestAcceptItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4428)
inline _bstr_t _TaskRequestAcceptItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4429)
inline FormDescriptionPtr _TaskRequestAcceptItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4430)
inline _InspectorPtr _TaskRequestAcceptItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4431)
inline enum OlImportance _TaskRequestAcceptItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4432)
inline void _TaskRequestAcceptItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4433)
inline DATE _TaskRequestAcceptItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4434)
inline IUnknownPtr _TaskRequestAcceptItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4435)
inline _bstr_t _TaskRequestAcceptItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4436)
inline void _TaskRequestAcceptItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4437)
inline _bstr_t _TaskRequestAcceptItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4438)
inline void _TaskRequestAcceptItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4439)
inline VARIANT_BOOL _TaskRequestAcceptItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4440)
inline void _TaskRequestAcceptItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4441)
inline long _TaskRequestAcceptItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4442)
inline _bstr_t _TaskRequestAcceptItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4443)
inline VARIANT_BOOL _TaskRequestAcceptItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4444)
inline enum OlSensitivity _TaskRequestAcceptItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4445)
inline void _TaskRequestAcceptItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4446)
inline long _TaskRequestAcceptItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4447)
inline _bstr_t _TaskRequestAcceptItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4448)
inline void _TaskRequestAcceptItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4449)
inline VARIANT_BOOL _TaskRequestAcceptItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4450)
inline void _TaskRequestAcceptItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4451)
inline UserPropertiesPtr _TaskRequestAcceptItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4452)
inline HRESULT _TaskRequestAcceptItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4453)
inline IDispatchPtr _TaskRequestAcceptItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4454)
inline HRESULT _TaskRequestAcceptItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4455)
inline HRESULT _TaskRequestAcceptItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4456)
inline IDispatchPtr _TaskRequestAcceptItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4457)
inline HRESULT _TaskRequestAcceptItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4458)
inline HRESULT _TaskRequestAcceptItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4459)
inline HRESULT _TaskRequestAcceptItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4460)
inline _TaskItemPtr _TaskRequestAcceptItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(4461)
inline LinksPtr _TaskRequestAcceptItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4462)
inline enum OlDownloadState _TaskRequestAcceptItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4463)
inline HRESULT _TaskRequestAcceptItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4464)
inline ItemPropertiesPtr _TaskRequestAcceptItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4465)
inline enum OlRemoteStatus _TaskRequestAcceptItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4466)
inline void _TaskRequestAcceptItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4467)
inline VARIANT_BOOL _TaskRequestAcceptItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4468)
inline VARIANT_BOOL _TaskRequestAcceptItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4469)
inline ConflictsPtr _TaskRequestAcceptItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4470)
inline _PropertyAccessorPtr _TaskRequestAcceptItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4471)
inline _ConversationPtr _TaskRequestAcceptItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4472)
inline _bstr_t _TaskRequestAcceptItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4473)
inline _variant_t _TaskRequestAcceptItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4474)
inline void _TaskRequestAcceptItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _TaskRequestDeclineItem wrapper method implementations
//

#pragma implementation_key(4475)
inline _ApplicationPtr _TaskRequestDeclineItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4476)
inline enum OlObjectClass _TaskRequestDeclineItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4477)
inline _NameSpacePtr _TaskRequestDeclineItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4478)
inline IDispatchPtr _TaskRequestDeclineItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4479)
inline ActionsPtr _TaskRequestDeclineItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(4480)
inline AttachmentsPtr _TaskRequestDeclineItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(4481)
inline _bstr_t _TaskRequestDeclineItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4482)
inline void _TaskRequestDeclineItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4483)
inline _bstr_t _TaskRequestDeclineItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4484)
inline void _TaskRequestDeclineItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4485)
inline _bstr_t _TaskRequestDeclineItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4486)
inline void _TaskRequestDeclineItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4487)
inline _bstr_t _TaskRequestDeclineItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4488)
inline void _TaskRequestDeclineItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4489)
inline _bstr_t _TaskRequestDeclineItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4490)
inline _bstr_t _TaskRequestDeclineItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4491)
inline DATE _TaskRequestDeclineItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4492)
inline _bstr_t _TaskRequestDeclineItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4493)
inline FormDescriptionPtr _TaskRequestDeclineItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4494)
inline _InspectorPtr _TaskRequestDeclineItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4495)
inline enum OlImportance _TaskRequestDeclineItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4496)
inline void _TaskRequestDeclineItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4497)
inline DATE _TaskRequestDeclineItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4498)
inline IUnknownPtr _TaskRequestDeclineItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4499)
inline _bstr_t _TaskRequestDeclineItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4500)
inline void _TaskRequestDeclineItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4501)
inline _bstr_t _TaskRequestDeclineItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4502)
inline void _TaskRequestDeclineItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4503)
inline VARIANT_BOOL _TaskRequestDeclineItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4504)
inline void _TaskRequestDeclineItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4505)
inline long _TaskRequestDeclineItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4506)
inline _bstr_t _TaskRequestDeclineItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4507)
inline VARIANT_BOOL _TaskRequestDeclineItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4508)
inline enum OlSensitivity _TaskRequestDeclineItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4509)
inline void _TaskRequestDeclineItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4510)
inline long _TaskRequestDeclineItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4511)
inline _bstr_t _TaskRequestDeclineItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4512)
inline void _TaskRequestDeclineItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4513)
inline VARIANT_BOOL _TaskRequestDeclineItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4514)
inline void _TaskRequestDeclineItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4515)
inline UserPropertiesPtr _TaskRequestDeclineItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4516)
inline HRESULT _TaskRequestDeclineItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4517)
inline IDispatchPtr _TaskRequestDeclineItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4518)
inline HRESULT _TaskRequestDeclineItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4519)
inline HRESULT _TaskRequestDeclineItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4520)
inline IDispatchPtr _TaskRequestDeclineItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4521)
inline HRESULT _TaskRequestDeclineItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4522)
inline HRESULT _TaskRequestDeclineItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4523)
inline HRESULT _TaskRequestDeclineItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4524)
inline _TaskItemPtr _TaskRequestDeclineItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(4525)
inline LinksPtr _TaskRequestDeclineItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4526)
inline enum OlDownloadState _TaskRequestDeclineItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4527)
inline HRESULT _TaskRequestDeclineItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4528)
inline ItemPropertiesPtr _TaskRequestDeclineItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4529)
inline enum OlRemoteStatus _TaskRequestDeclineItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4530)
inline void _TaskRequestDeclineItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4531)
inline VARIANT_BOOL _TaskRequestDeclineItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4532)
inline VARIANT_BOOL _TaskRequestDeclineItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4533)
inline ConflictsPtr _TaskRequestDeclineItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4534)
inline _PropertyAccessorPtr _TaskRequestDeclineItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4535)
inline _ConversationPtr _TaskRequestDeclineItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4536)
inline _bstr_t _TaskRequestDeclineItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4537)
inline _variant_t _TaskRequestDeclineItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4538)
inline void _TaskRequestDeclineItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _TaskRequestUpdateItem wrapper method implementations
//

#pragma implementation_key(4539)
inline _ApplicationPtr _TaskRequestUpdateItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4540)
inline enum OlObjectClass _TaskRequestUpdateItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4541)
inline _NameSpacePtr _TaskRequestUpdateItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4542)
inline IDispatchPtr _TaskRequestUpdateItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4543)
inline ActionsPtr _TaskRequestUpdateItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(4544)
inline AttachmentsPtr _TaskRequestUpdateItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(4545)
inline _bstr_t _TaskRequestUpdateItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4546)
inline void _TaskRequestUpdateItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4547)
inline _bstr_t _TaskRequestUpdateItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4548)
inline void _TaskRequestUpdateItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4549)
inline _bstr_t _TaskRequestUpdateItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4550)
inline void _TaskRequestUpdateItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4551)
inline _bstr_t _TaskRequestUpdateItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4552)
inline void _TaskRequestUpdateItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4553)
inline _bstr_t _TaskRequestUpdateItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4554)
inline _bstr_t _TaskRequestUpdateItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4555)
inline DATE _TaskRequestUpdateItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4556)
inline _bstr_t _TaskRequestUpdateItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4557)
inline FormDescriptionPtr _TaskRequestUpdateItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(4558)
inline _InspectorPtr _TaskRequestUpdateItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(4559)
inline enum OlImportance _TaskRequestUpdateItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4560)
inline void _TaskRequestUpdateItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4561)
inline DATE _TaskRequestUpdateItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4562)
inline IUnknownPtr _TaskRequestUpdateItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4563)
inline _bstr_t _TaskRequestUpdateItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4564)
inline void _TaskRequestUpdateItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4565)
inline _bstr_t _TaskRequestUpdateItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4566)
inline void _TaskRequestUpdateItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4567)
inline VARIANT_BOOL _TaskRequestUpdateItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4568)
inline void _TaskRequestUpdateItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4569)
inline long _TaskRequestUpdateItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4570)
inline _bstr_t _TaskRequestUpdateItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4571)
inline VARIANT_BOOL _TaskRequestUpdateItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4572)
inline enum OlSensitivity _TaskRequestUpdateItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4573)
inline void _TaskRequestUpdateItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4574)
inline long _TaskRequestUpdateItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4575)
inline _bstr_t _TaskRequestUpdateItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4576)
inline void _TaskRequestUpdateItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4577)
inline VARIANT_BOOL _TaskRequestUpdateItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4578)
inline void _TaskRequestUpdateItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4579)
inline UserPropertiesPtr _TaskRequestUpdateItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(4580)
inline HRESULT _TaskRequestUpdateItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4581)
inline IDispatchPtr _TaskRequestUpdateItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4582)
inline HRESULT _TaskRequestUpdateItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4583)
inline HRESULT _TaskRequestUpdateItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4584)
inline IDispatchPtr _TaskRequestUpdateItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4585)
inline HRESULT _TaskRequestUpdateItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4586)
inline HRESULT _TaskRequestUpdateItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4587)
inline HRESULT _TaskRequestUpdateItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4588)
inline _TaskItemPtr _TaskRequestUpdateItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(4589)
inline LinksPtr _TaskRequestUpdateItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(4590)
inline enum OlDownloadState _TaskRequestUpdateItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4591)
inline HRESULT _TaskRequestUpdateItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4592)
inline ItemPropertiesPtr _TaskRequestUpdateItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(4593)
inline enum OlRemoteStatus _TaskRequestUpdateItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4594)
inline void _TaskRequestUpdateItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4595)
inline VARIANT_BOOL _TaskRequestUpdateItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4596)
inline VARIANT_BOOL _TaskRequestUpdateItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4597)
inline ConflictsPtr _TaskRequestUpdateItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(4598)
inline _PropertyAccessorPtr _TaskRequestUpdateItem::GetPropertyAccessor ( ) {
    struct _PropertyAccessor * _result = 0;
    HRESULT _hr = get_PropertyAccessor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PropertyAccessorPtr(_result, false);
}

#pragma implementation_key(4599)
inline _ConversationPtr _TaskRequestUpdateItem::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4600)
inline _bstr_t _TaskRequestUpdateItem::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4601)
inline _variant_t _TaskRequestUpdateItem::GetRTFBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RTFBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4602)
inline void _TaskRequestUpdateItem::PutRTFBody ( const _variant_t & RTFBody ) {
    HRESULT _hr = put_RTFBody(RTFBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _ConversationHeader wrapper method implementations
//

#pragma implementation_key(4603)
inline _ApplicationPtr _ConversationHeader::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4604)
inline enum OlObjectClass _ConversationHeader::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4605)
inline _NameSpacePtr _ConversationHeader::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(4606)
inline IDispatchPtr _ConversationHeader::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4607)
inline _ConversationPtr _ConversationHeader::GetConversation ( ) {
    struct _Conversation * _result = 0;
    HRESULT _hr = raw_GetConversation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ConversationPtr(_result, false);
}

#pragma implementation_key(4608)
inline _bstr_t _ConversationHeader::GetConversationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4609)
inline _bstr_t _ConversationHeader::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4610)
inline _SimpleItemsPtr _ConversationHeader::GetItems ( ) {
    struct _SimpleItems * _result = 0;
    HRESULT _hr = raw_GetItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SimpleItemsPtr(_result, false);
}
